jQuery(".aem-GridColumn").addClass("section");
/*!
 * fancyBox - jQuery Plugin
 * version: 2.1.7 (Tue, 28 Feb 2017)
 * requires jQuery v1.6 or later
 *
 * Examples at http://fancyapps.com/fancybox/
 * License: www.fancyapps.com/fancybox/#license
 *
 * Copyright 2017 fancyapps.com
 *
 */

;(function (window, document, $, undefined) {
  "use strict";

  var H = $("html"),
    W = $(window),
    D = $(document),
    F = $.fancybox = function () {
      F.open.apply( this, arguments );
    },
    IE =  navigator.userAgent.match(/msie/i),
    didUpdate	= null,
    isTouch		= document.createTouch !== undefined,

    isQuery	= function(obj) {
      return obj && obj.hasOwnProperty && obj instanceof $;
    },
    isString = function(str) {
      return str && $.type(str) === "string";
    },
    isPercentage = function(str) {
      return isString(str) && str.indexOf('%') > 0;
    },
    isScrollable = function(el) {
      return (el && !(el.style.overflow && el.style.overflow === 'hidden') && ((el.clientWidth && el.scrollWidth > el.clientWidth) || (el.clientHeight && el.scrollHeight > el.clientHeight)));
    },
    getScalar = function(orig, dim) {
      var value = parseInt(orig, 10) || 0;

      if (dim && isPercentage(orig)) {
        value = F.getViewport()[ dim ] / 100 * value;
      }

      return Math.ceil(value);
    },
    getValue = function(value, dim) {
      return getScalar(value, dim) + 'px';
    };

  $.extend(F, {
    // The current version of fancyBox
    version: '2.1.7',

    defaults: {
      padding : 15,
      margin  : 20,

      width     : 800,
      height    : 600,
      minWidth  : 100,
      minHeight : 100,
      maxWidth  : 9999,
      maxHeight : 9999,
      pixelRatio: 1, // Set to 2 for retina display support

      autoSize   : true,
      autoHeight : false,
      autoWidth  : false,

      autoResize  : true,
      autoCenter  : !isTouch,
      fitToView   : true,
      aspectRatio : false,
      topRatio    : 0.5,
      leftRatio   : 0.5,

      scrolling : 'auto', // 'auto', 'yes' or 'no'
      wrapCSS   : '',

      arrows     : true,
      closeBtn   : true,
      closeClick : false,
      nextClick  : false,
      mouseWheel : true,
      autoPlay   : false,
      playSpeed  : 3000,
      preload    : 3,
      modal      : false,
      loop       : true,

      ajax  : {
        dataType : 'html',
        headers  : { 'X-fancyBox': true }
      },
      iframe : {
        scrolling : 'auto',
        preload   : true
      },
      swf : {
        wmode: 'transparent',
        allowfullscreen   : 'true',
        allowscriptaccess : 'always'
      },

      keys  : {
        next : {
          13 : 'left', // enter
          34 : 'up',   // page down
          39 : 'left', // right arrow
          40 : 'up'    // down arrow
        },
        prev : {
          8  : 'right',  // backspace
          33 : 'down',   // page up
          37 : 'right',  // left arrow
          38 : 'down'    // up arrow
        },
        close  : [27], // escape key
        play   : [32], // space - start/stop slideshow
        toggle : [70]  // letter "f" - toggle fullscreen
      },

      direction : {
        next : 'left',
        prev : 'right'
      },

      scrollOutside  : true,

      // Override some properties
      index   : 0,
      type    : null,
      href    : null,
      content : null,
      title   : null,

      // HTML templates
      tpl: {
        wrap     : '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
        image    : '<img class="fancybox-image" src="{href}" alt="" />',
        iframe   : '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' + (IE ? ' allowtransparency="true"' : '') + '></iframe>',
        error    : '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
        closeBtn : '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
        next     : '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
        prev     : '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>',
        loading  : '<div id="fancybox-loading"><div></div></div>'
      },

      // Properties for each animation type
      // Opening fancyBox
      openEffect  : 'fade', // 'elastic', 'fade' or 'none'
      openSpeed   : 250,
      openEasing  : 'swing',
      openOpacity : true,
      openMethod  : 'zoomIn',

      // Closing fancyBox
      closeEffect  : 'fade', // 'elastic', 'fade' or 'none'
      closeSpeed   : 250,
      closeEasing  : 'swing',
      closeOpacity : true,
      closeMethod  : 'zoomOut',

      // Changing next gallery item
      nextEffect : 'elastic', // 'elastic', 'fade' or 'none'
      nextSpeed  : 250,
      nextEasing : 'swing',
      nextMethod : 'changeIn',

      // Changing previous gallery item
      prevEffect : 'elastic', // 'elastic', 'fade' or 'none'
      prevSpeed  : 250,
      prevEasing : 'swing',
      prevMethod : 'changeOut',

      // Enable default helpers
      helpers : {
        overlay : true,
        title   : true
      },

      // Callbacks
      onCancel     : $.noop, // If canceling
      beforeLoad   : $.noop, // Before loading
      afterLoad    : $.noop, // After loading
      beforeShow   : $.noop, // Before changing in current item
      afterShow    : $.noop, // After opening
      beforeChange : $.noop, // Before changing gallery item
      beforeClose  : $.noop, // Before closing
      afterClose   : $.noop  // After closing
    },

    //Current state
    group    : {}, // Selected group
    opts     : {}, // Group options
    previous : null,  // Previous element
    coming   : null,  // Element being loaded
    current  : null,  // Currently loaded element
    isActive : false, // Is activated
    isOpen   : false, // Is currently open
    isOpened : false, // Have been fully opened at least once

    wrap  : null,
    skin  : null,
    outer : null,
    inner : null,

    player : {
      timer    : null,
      isActive : false
    },

    // Loaders
    ajaxLoad   : null,
    imgPreload : null,

    // Some collections
    transitions : {},
    helpers     : {},

    /*
     *	Static methods
     */

    open: function (group, opts) {
      if (!group) {
        return;
      }

      if (!$.isPlainObject(opts)) {
        opts = {};
      }

      // Close if already active
      if (false === F.close(true)) {
        return;
      }

      // Normalize group
      if (!$.isArray(group)) {
        group = isQuery(group) ? $(group).get() : [group];
      }

      // Recheck if the type of each element is `object` and set content type (image, ajax, etc)
      $.each(group, function(i, element) {
        var obj = {},
          href,
          title,
          content,
          type,
          rez,
          hrefParts,
          selector;

        if ($.type(element) === "object") {
          // Check if is DOM element
          if (element.nodeType) {
            element = $(element);
          }

          if (isQuery(element)) {
            obj = {
              href    : element.data('fancybox-href') || element.attr('href'),
              title   : $('<div/>').text( element.data('fancybox-title') || element.attr('title') || '' ).html(),
              isDom   : true,
              element : element
            };

            if ($.metadata) {
              $.extend(true, obj, element.metadata());
            }

          } else {
            obj = element;
          }
        }

        href  = opts.href  || obj.href || (isString(element) ? element : null);
        title = opts.title !== undefined ? opts.title : obj.title || '';

        content = opts.content || obj.content;
        type    = content ? 'html' : (opts.type  || obj.type);

        if (!type && obj.isDom) {
          type = element.data('fancybox-type');

          if (!type) {
            rez  = element.prop('class').match(/fancybox\.(\w+)/);
            type = rez ? rez[1] : null;
          }
        }

        if (isString(href)) {
          // Try to guess the content type
          if (!type) {
            if (F.isImage(href)) {
              type = 'image';

            } else if (F.isSWF(href)) {
              type = 'swf';

            } else if (href.charAt(0) === '#') {
              type = 'inline';

            } else if (isString(element)) {
              type    = 'html';
              content = element;
            }
          }

          // Split url into two pieces with source url and content selector, e.g,
          // "/mypage.html #my_id" will load "/mypage.html" and display element having id "my_id"
          if (type === 'ajax') {
            hrefParts = href.split(/\s+/, 2);
            href      = hrefParts.shift();
            selector  = hrefParts.shift();
          }
        }

        if (!content) {
          if (type === 'inline') {
            if (href) {
              content = $( isString(href) ? href.replace(/.*(?=#[^\s]+$)/, '') : href ); //strip for ie7

            } else if (obj.isDom) {
              content = element;
            }

          } else if (type === 'html') {
            content = href;

          } else if (!type && !href && obj.isDom) {
            type    = 'inline';
            content = element;
          }
        }

        $.extend(obj, {
          href     : href,
          type     : type,
          content  : content,
          title    : title,
          selector : selector
        });

        group[ i ] = obj;
      });

      // Extend the defaults
      F.opts = $.extend(true, {}, F.defaults, opts);

      // All options are merged recursive except keys
      if (opts.keys !== undefined) {
        F.opts.keys = opts.keys ? $.extend({}, F.defaults.keys, opts.keys) : false;
      }

      F.group = group;

      return F._start(F.opts.index);
    },

    // Cancel image loading or abort ajax request
    cancel: function () {
      var coming = F.coming;

      if (coming && false === F.trigger('onCancel')) {
        return;
      }

      F.hideLoading();

      if (!coming) {
        return;
      }

      if (F.ajaxLoad) {
        F.ajaxLoad.abort();
      }

      F.ajaxLoad = null;

      if (F.imgPreload) {
        F.imgPreload.onload = F.imgPreload.onerror = null;
      }

      if (coming.wrap) {
        coming.wrap.stop(true, true).trigger('onReset').remove();
      }

      F.coming = null;

      // If the first item has been canceled, then clear everything
      if (!F.current) {
        F._afterZoomOut( coming );
      }
    },

    // Start closing animation if is open; remove immediately if opening/closing
    close: function (event) {
      F.cancel();

      if (false === F.trigger('beforeClose')) {
        return;
      }

      F.unbindEvents();

      if (!F.isActive) {
        return;
      }

      if (!F.isOpen || event === true) {
        $('.fancybox-wrap').stop(true).trigger('onReset').remove();

        F._afterZoomOut();

      } else {
        F.isOpen = F.isOpened = false;
        F.isClosing = true;

        $('.fancybox-item, .fancybox-nav').remove();

        F.wrap.stop(true, true).removeClass('fancybox-opened');

        F.transitions[ F.current.closeMethod ]();
      }
    },

    // Manage slideshow:
    //   $.fancybox.play(); - toggle slideshow
    //   $.fancybox.play( true ); - start
    //   $.fancybox.play( false ); - stop
    play: function ( action ) {
      var clear = function () {
          clearTimeout(F.player.timer);
        },
        set = function () {
          clear();

          if (F.current && F.player.isActive) {
            F.player.timer = setTimeout(F.next, F.current.playSpeed);
          }
        },
        stop = function () {
          clear();

          D.unbind('.player');

          F.player.isActive = false;

          F.trigger('onPlayEnd');
        },
        start = function () {
          if (F.current && (F.current.loop || F.current.index < F.group.length - 1)) {
            F.player.isActive = true;

            D.bind({
              'onCancel.player beforeClose.player' : stop,
              'onUpdate.player'   : set,
              'beforeLoad.player' : clear
            });

            set();

            F.trigger('onPlayStart');
          }
        };

      if (action === true || (!F.player.isActive && action !== false)) {
        start();
      } else {
        stop();
      }
    },

    // Navigate to next gallery item
    next: function ( direction ) {
      var current = F.current;

      if (current) {
        if (!isString(direction)) {
          direction = current.direction.next;
        }

        F.jumpto(current.index + 1, direction, 'next');
      }
    },

    // Navigate to previous gallery item
    prev: function ( direction ) {
      var current = F.current;

      if (current) {
        if (!isString(direction)) {
          direction = current.direction.prev;
        }

        F.jumpto(current.index - 1, direction, 'prev');
      }
    },

    // Navigate to gallery item by index
    jumpto: function ( index, direction, router ) {
      var current = F.current;

      if (!current) {
        return;
      }

      index = getScalar(index);

      F.direction = direction || current.direction[ (index >= current.index ? 'next' : 'prev') ];
      F.router    = router || 'jumpto';

      if (current.loop) {
        if (index < 0) {
          index = current.group.length + (index % current.group.length);
        }

        index = index % current.group.length;
      }

      if (current.group[ index ] !== undefined) {
        F.cancel();

        F._start(index);
      }
    },

    // Center inside viewport and toggle position type to fixed or absolute if needed
    reposition: function (e, onlyAbsolute) {
      var current = F.current,
        wrap    = current ? current.wrap : null,
        pos;

      if (wrap) {
        pos = F._getPosition(onlyAbsolute);

        if (e && e.type === 'scroll') {
          delete pos.position;

          wrap.stop(true, true).animate(pos, 200);

        } else {
          wrap.css(pos);

          current.pos = $.extend({}, current.dim, pos);
        }
      }
    },

    update: function (e) {
      var type = (e && e.originalEvent && e.originalEvent.type),
        anyway = !type || type === 'orientationchange';

      if (anyway) {
        clearTimeout(didUpdate);

        didUpdate = null;
      }

      if (!F.isOpen || didUpdate) {
        return;
      }

      didUpdate = setTimeout(function() {
        var current = F.current;

        if (!current || F.isClosing) {
          return;
        }

        F.wrap.removeClass('fancybox-tmp');

        if (anyway || type === 'load' || (type === 'resize' && current.autoResize)) {
          F._setDimension();
        }

        if (!(type === 'scroll' && current.canShrink)) {
          F.reposition(e);
        }

        F.trigger('onUpdate');

        didUpdate = null;

      }, (anyway && !isTouch ? 0 : 300));
    },

    // Shrink content to fit inside viewport or restore if resized
    toggle: function ( action ) {
      if (F.isOpen) {
        F.current.fitToView = $.type(action) === "boolean" ? action : !F.current.fitToView;

        // Help browser to restore document dimensions
        if (isTouch) {
          F.wrap.removeAttr('style').addClass('fancybox-tmp');

          F.trigger('onUpdate');
        }

        F.update();
      }
    },

    hideLoading: function () {
      D.unbind('.loading');

      $('#fancybox-loading').remove();
    },

    showLoading: function () {
      var el, viewport;

      F.hideLoading();

      el = $(F.opts.tpl.loading).click(F.cancel).appendTo('body');

      // If user will press the escape-button, the request will be canceled
      D.bind('keydown.loading', function(e) {
        if ((e.which || e.keyCode) === 27) {
          e.preventDefault();

          F.cancel();
        }
      });

      if (!F.defaults.fixed) {
        viewport = F.getViewport();

        el.css({
          position : 'absolute',
          top  : (viewport.h * 0.5) + viewport.y,
          left : (viewport.w * 0.5) + viewport.x
        });
      }

      F.trigger('onLoading');
    },

    getViewport: function () {
      var locked = (F.current && F.current.locked) || false,
        rez    = {
          x: W.scrollLeft(),
          y: W.scrollTop()
        };

      if (locked && locked.length) {
        rez.w = locked[0].clientWidth;
        rez.h = locked[0].clientHeight;

      } else {
        // See http://bugs.jquery.com/ticket/6724
        rez.w = isTouch && window.innerWidth  ? window.innerWidth  : W.width();
        rez.h = isTouch && window.innerHeight ? window.innerHeight : W.height();
      }

      return rez;
    },

    // Unbind the keyboard / clicking actions
    unbindEvents: function () {
      if (F.wrap && isQuery(F.wrap)) {
        F.wrap.unbind('.fb');
      }

      D.unbind('.fb');
      W.unbind('.fb');
    },

    bindEvents: function () {
      var current = F.current,
        keys;

      if (!current) {
        return;
      }

      // Changing document height on iOS devices triggers a 'resize' event,
      // that can change document height... repeating infinitely
      W.bind('orientationchange.fb' + (isTouch ? '' : ' resize.fb') + (current.autoCenter && !current.locked ? ' scroll.fb' : ''), F.update);

      keys = current.keys;

      if (keys) {
        D.bind('keydown.fb', function (e) {
          var code   = e.which || e.keyCode,
            target = e.target || e.srcElement;

          // Skip esc key if loading, because showLoading will cancel preloading
          if (code === 27 && F.coming) {
            return false;
          }

          // Ignore key combinations and key events within form elements
          if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey && !(target && (target.type || $(target).is('[contenteditable]')))) {
            $.each(keys, function(i, val) {
              if (current.group.length > 1 && val[ code ] !== undefined) {
                F[ i ]( val[ code ] );

                e.preventDefault();
                return false;
              }

              if ($.inArray(code, val) > -1) {
                F[ i ] ();

                e.preventDefault();
                return false;
              }
            });
          }
        });
      }

      if ($.fn.mousewheel && current.mouseWheel) {
        F.wrap.bind('mousewheel.fb', function (e, delta, deltaX, deltaY) {
          var target = e.target || null,
            parent = $(target),
            canScroll = false;

          while (parent.length) {
            if (canScroll || parent.is('.fancybox-skin') || parent.is('.fancybox-wrap')) {
              break;
            }

            canScroll = isScrollable( parent[0] );
            parent    = $(parent).parent();
          }

          if (delta !== 0 && !canScroll) {
            if (F.group.length > 1 && !current.canShrink) {
              if (deltaY > 0 || deltaX > 0) {
                F.prev( deltaY > 0 ? 'down' : 'left' );

              } else if (deltaY < 0 || deltaX < 0) {
                F.next( deltaY < 0 ? 'up' : 'right' );
              }

              e.preventDefault();
            }
          }
        });
      }
    },

    trigger: function (event, o) {
      var ret, obj = o || F.coming || F.current;

      if (obj) {
        if ($.isFunction( obj[event] )) {
          ret = obj[event].apply(obj, Array.prototype.slice.call(arguments, 1));
        }

        if (ret === false) {
          return false;
        }

        if (obj.helpers) {
          $.each(obj.helpers, function (helper, opts) {
            if (opts && F.helpers[helper] && $.isFunction(F.helpers[helper][event])) {
              F.helpers[helper][event]($.extend(true, {}, F.helpers[helper].defaults, opts), obj);
            }
          });
        }
      }

      D.trigger(event);
    },

    isImage: function (str) {
      return isString(str) && str.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i);
    },

    isSWF: function (str) {
      return isString(str) && str.match(/\.(swf)((\?|#).*)?$/i);
    },

    _start: function (index) {
      var coming = {},
        obj,
        href,
        type,
        margin,
        padding;

      index = getScalar( index );
      obj   = F.group[ index ] || null;

      if (!obj) {
        return false;
      }

      coming = $.extend(true, {}, F.opts, obj);

      // Convert margin and padding properties to array - top, right, bottom, left
      margin  = coming.margin;
      padding = coming.padding;

      if ($.type(margin) === 'number') {
        coming.margin = [margin, margin, margin, margin];
      }

      if ($.type(padding) === 'number') {
        coming.padding = [padding, padding, padding, padding];
      }

      // 'modal' propery is just a shortcut
      if (coming.modal) {
        $.extend(true, coming, {
          closeBtn   : false,
          closeClick : false,
          nextClick  : false,
          arrows     : false,
          mouseWheel : false,
          keys       : null,
          helpers: {
            overlay : {
              closeClick : false
            }
          }
        });
      }

      // 'autoSize' property is a shortcut, too
      if (coming.autoSize) {
        coming.autoWidth = coming.autoHeight = true;
      }

      if (coming.width === 'auto') {
        coming.autoWidth = true;
      }

      if (coming.height === 'auto') {
        coming.autoHeight = true;
      }

      /*
       * Add reference to the group, so it`s possible to access from callbacks, example:
       * afterLoad : function() {
       *     this.title = 'Image ' + (this.index + 1) + ' of ' + this.group.length + (this.title ? ' - ' + this.title : '');
       * }
       */

      coming.group  = F.group;
      coming.index  = index;

      // Give a chance for callback or helpers to update coming item (type, title, etc)
      F.coming = coming;

      if (false === F.trigger('beforeLoad')) {
        F.coming = null;

        return;
      }

      type = coming.type;
      href = coming.href;

      if (!type) {
        F.coming = null;

        //If we can not determine content type then drop silently or display next/prev item if looping through gallery
        if (F.current && F.router && F.router !== 'jumpto') {
          F.current.index = index;

          return F[ F.router ]( F.direction );
        }

        return false;
      }

      F.isActive = true;

      if (type === 'image' || type === 'swf') {
        coming.autoHeight = coming.autoWidth = false;
        coming.scrolling  = 'visible';
      }

      if (type === 'image') {
        coming.aspectRatio = true;
      }

      if (type === 'iframe' && isTouch) {
        coming.scrolling = 'scroll';
      }

      // Build the neccessary markup
      coming.wrap = $(coming.tpl.wrap).addClass('fancybox-' + (isTouch ? 'mobile' : 'desktop') + ' fancybox-type-' + type + ' fancybox-tmp ' + coming.wrapCSS).appendTo( coming.parent || 'body' );

      $.extend(coming, {
        skin  : $('.fancybox-skin',  coming.wrap),
        outer : $('.fancybox-outer', coming.wrap),
        inner : $('.fancybox-inner', coming.wrap)
      });

      $.each(["Top", "Right", "Bottom", "Left"], function(i, v) {
        coming.skin.css('padding' + v, getValue(coming.padding[ i ]));
      });

      F.trigger('onReady');

      // Check before try to load; 'inline' and 'html' types need content, others - href
      if (type === 'inline' || type === 'html') {
        if (!coming.content || !coming.content.length) {
          return F._error( 'content' );
        }

      } else if (!href) {
        return F._error( 'href' );
      }

      if (type === 'image') {
        F._loadImage();

      } else if (type === 'ajax') {
        F._loadAjax();

      } else if (type === 'iframe') {
        F._loadIframe();

      } else {
        F._afterLoad();
      }
    },

    _error: function ( type ) {
      $.extend(F.coming, {
        type       : 'html',
        autoWidth  : true,
        autoHeight : true,
        minWidth   : 0,
        minHeight  : 0,
        scrolling  : 'no',
        hasError   : type,
        content    : F.coming.tpl.error
      });

      F._afterLoad();
    },

    _loadImage: function () {
      // Reset preload image so it is later possible to check "complete" property
      var img = F.imgPreload = new Image();

      img.onload = function () {
        this.onload = this.onerror = null;

        F.coming.width  = this.width / F.opts.pixelRatio;
        F.coming.height = this.height / F.opts.pixelRatio;

        F._afterLoad();
      };

      img.onerror = function () {
        this.onload = this.onerror = null;

        F._error( 'image' );
      };

      img.src = F.coming.href;

      if (img.complete !== true) {
        F.showLoading();
      }
    },

    _loadAjax: function () {
      var coming = F.coming;

      F.showLoading();

      F.ajaxLoad = $.ajax($.extend({}, coming.ajax, {
        url: coming.href,
        error: function (jqXHR, textStatus) {
          if (F.coming && textStatus !== 'abort') {
            F._error( 'ajax', jqXHR );

          } else {
            F.hideLoading();
          }
        },
        success: function (data, textStatus) {
          if (textStatus === 'success') {
            coming.content = data;

            F._afterLoad();
          }
        }
      }));
    },

    _loadIframe: function() {
      var coming = F.coming,
        iframe = $(coming.tpl.iframe.replace(/\{rnd\}/g, new Date().getTime()))
        .attr('scrolling', isTouch ? 'auto' : coming.iframe.scrolling)
        .attr('src', coming.href);

      // This helps IE
      $(coming.wrap).bind('onReset', function () {
        try {
          $(this).find('iframe').hide().attr('src', '//about:blank').end().empty();
        } catch (e) {}
      });

      if (coming.iframe.preload) {
        F.showLoading();

        iframe.one('load', function() {
          $(this).data('ready', 1);

          // iOS will lose scrolling if we resize
          if (!isTouch) {
            $(this).bind('load.fb', F.update);
          }

          // Without this trick:
          //   - iframe won't scroll on iOS devices
          //   - IE7 sometimes displays empty iframe
          $(this).parents('.fancybox-wrap').width('100%').removeClass('fancybox-tmp').show();

          F._afterLoad();
        });
      }

      coming.content = iframe.appendTo( coming.inner );

      if (!coming.iframe.preload) {
        F._afterLoad();
      }
    },

    _preloadImages: function() {
      var group   = F.group,
        current = F.current,
        len     = group.length,
        cnt     = current.preload ? Math.min(current.preload, len - 1) : 0,
        item,
        i;

      for (i = 1; i <= cnt; i += 1) {
        item = group[ (current.index + i ) % len ];

        if (item.type === 'image' && item.href) {
          new Image().src = item.href;
        }
      }
    },

    _afterLoad: function () {
      var coming   = F.coming,
        previous = F.current,
        placeholder = 'fancybox-placeholder',
        current,
        content,
        type,
        scrolling,
        href,
        embed;

      F.hideLoading();

      if (!coming || F.isActive === false) {
        return;
      }

      if (false === F.trigger('afterLoad', coming, previous)) {
        coming.wrap.stop(true).trigger('onReset').remove();

        F.coming = null;

        return;
      }

      if (previous) {
        F.trigger('beforeChange', previous);

        previous.wrap.stop(true).removeClass('fancybox-opened')
        .find('.fancybox-item, .fancybox-nav')
        .remove();
      }

      F.unbindEvents();

      current   = coming;
      content   = coming.content;
      type      = coming.type;
      scrolling = coming.scrolling;

      $.extend(F, {
        wrap  : current.wrap,
        skin  : current.skin,
        outer : current.outer,
        inner : current.inner,
        current  : current,
        previous : previous
      });

      href = current.href;

      switch (type) {
        case 'inline':
        case 'ajax':
        case 'html':
          if (current.selector) {
            content = $('<div>').html(content).find(current.selector);

          } else if (isQuery(content)) {
            if (!content.data(placeholder)) {
              content.data(placeholder, $('<div class="' + placeholder + '"></div>').insertAfter( content ).hide() );
            }

            content = content.show().detach();

            current.wrap.bind('onReset', function () {
              if ($(this).find(content).length) {
                content.hide().replaceAll( content.data(placeholder) ).data(placeholder, false);
              }
            });
          }
          break;

        case 'image':
          content = current.tpl.image.replace(/\{href\}/g, href);
          break;

        case 'swf':
          content = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + href + '"></param>';
          embed   = '';

          $.each(current.swf, function(name, val) {
            content += '<param name="' + name + '" value="' + val + '"></param>';
            embed   += ' ' + name + '="' + val + '"';
          });

          content += '<embed src="' + href + '" type="application/x-shockwave-flash" width="100%" height="100%"' + embed + '></embed></object>';
          break;
      }

      if (!(isQuery(content) && content.parent().is(current.inner))) {
        current.inner.append( content );
      }

      // Give a chance for helpers or callbacks to update elements
      F.trigger('beforeShow');

      // Set scrolling before calculating dimensions
      current.inner.css('overflow', scrolling === 'yes' ? 'scroll' : (scrolling === 'no' ? 'hidden' : scrolling));

      // Set initial dimensions and start position
      F._setDimension();

      F.reposition();

      F.isOpen = false;
      F.coming = null;

      F.bindEvents();

      if (!F.isOpened) {
        $('.fancybox-wrap').not( current.wrap ).stop(true).trigger('onReset').remove();

      } else if (previous.prevMethod) {
        F.transitions[ previous.prevMethod ]();
      }

      F.transitions[ F.isOpened ? current.nextMethod : current.openMethod ]();

      F._preloadImages();
    },

    _setDimension: function () {
      var viewport   = F.getViewport(),
        steps      = 0,
        canShrink  = false,
        canExpand  = false,
        wrap       = F.wrap,
        skin       = F.skin,
        inner      = F.inner,
        current    = F.current,
        width      = current.width,
        height     = current.height,
        minWidth   = current.minWidth,
        minHeight  = current.minHeight,
        maxWidth   = current.maxWidth,
        maxHeight  = current.maxHeight,
        scrolling  = current.scrolling,
        scrollOut  = current.scrollOutside ? current.scrollbarWidth : 0,
        margin     = current.margin,
        wMargin    = getScalar(margin[1] + margin[3]),
        hMargin    = getScalar(margin[0] + margin[2]),
        wPadding,
        hPadding,
        wSpace,
        hSpace,
        origWidth,
        origHeight,
        origMaxWidth,
        origMaxHeight,
        ratio,
        width_,
        height_,
        maxWidth_,
        maxHeight_,
        iframe,
        body;

      // Reset dimensions so we could re-check actual size
      wrap.add(skin).add(inner).width('auto').height('auto').removeClass('fancybox-tmp');

      wPadding = getScalar(skin.outerWidth(true)  - skin.width());
      hPadding = getScalar(skin.outerHeight(true) - skin.height());

      // Any space between content and viewport (margin, padding, border, title)
      wSpace = wMargin + wPadding;
      hSpace = hMargin + hPadding;

      origWidth  = isPercentage(width)  ? (viewport.w - wSpace) * getScalar(width)  / 100 : width;
      origHeight = isPercentage(height) ? (viewport.h - hSpace) * getScalar(height) / 100 : height;

      if (current.type === 'iframe') {
        iframe = current.content;

        if (current.autoHeight && iframe && iframe.data('ready') === 1) {
          try {
            if (iframe[0].contentWindow.document.location) {
              inner.width( origWidth ).height(9999);

              body = iframe.contents().find('body');

              if (scrollOut) {
                body.css('overflow-x', 'hidden');
              }

              origHeight = body.outerHeight(true);
            }

          } catch (e) {}
        }

      } else if (current.autoWidth || current.autoHeight) {
        inner.addClass( 'fancybox-tmp' );

        // Set width or height in case we need to calculate only one dimension
        if (!current.autoWidth) {
          inner.width( origWidth );
        }

        if (!current.autoHeight) {
          inner.height( origHeight );
        }

        if (current.autoWidth) {
          origWidth = inner.width();
        }

        if (current.autoHeight) {
          origHeight = inner.height();
        }

        inner.removeClass( 'fancybox-tmp' );
      }

      width  = getScalar( origWidth );
      height = getScalar( origHeight );

      ratio  = origWidth / origHeight;

      // Calculations for the content
      minWidth  = getScalar(isPercentage(minWidth) ? getScalar(minWidth, 'w') - wSpace : minWidth);
      maxWidth  = getScalar(isPercentage(maxWidth) ? getScalar(maxWidth, 'w') - wSpace : maxWidth);

      minHeight = getScalar(isPercentage(minHeight) ? getScalar(minHeight, 'h') - hSpace : minHeight);
      maxHeight = getScalar(isPercentage(maxHeight) ? getScalar(maxHeight, 'h') - hSpace : maxHeight);

      // These will be used to determine if wrap can fit in the viewport
      origMaxWidth  = maxWidth;
      origMaxHeight = maxHeight;

      if (current.fitToView) {
        maxWidth  = Math.min(viewport.w - wSpace, maxWidth);
        maxHeight = Math.min(viewport.h - hSpace, maxHeight);
      }

      maxWidth_  = viewport.w - wMargin;
      maxHeight_ = viewport.h - hMargin;

      if (current.aspectRatio) {
        if (width > maxWidth) {
          width  = maxWidth;
          height = getScalar(width / ratio);
        }

        if (height > maxHeight) {
          height = maxHeight;
          width  = getScalar(height * ratio);
        }

        if (width < minWidth) {
          width  = minWidth;
          height = getScalar(width / ratio);
        }

        if (height < minHeight) {
          height = minHeight;
          width  = getScalar(height * ratio);
        }

      } else {
        width = Math.max(minWidth, Math.min(width, maxWidth));

        if (current.autoHeight && current.type !== 'iframe') {
          inner.width( width );

          height = inner.height();
        }

        height = Math.max(minHeight, Math.min(height, maxHeight));
      }

      // Try to fit inside viewport (including the title)
      if (current.fitToView) {
        inner.width( width ).height( height );

        wrap.width( width + wPadding );

        // Real wrap dimensions
        width_  = wrap.width();
        height_ = wrap.height();

        if (current.aspectRatio) {
          while ((width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight) {
            if (steps++ > 19) {
              break;
            }

            height = Math.max(minHeight, Math.min(maxHeight, height - 10));
            width  = getScalar(height * ratio);

            if (width < minWidth) {
              width  = minWidth;
              height = getScalar(width / ratio);
            }

            if (width > maxWidth) {
              width  = maxWidth;
              height = getScalar(width / ratio);
            }

            inner.width( width ).height( height );

            wrap.width( width + wPadding );

            width_  = wrap.width();
            height_ = wrap.height();
          }

        } else {
          width  = Math.max(minWidth,  Math.min(width,  width  - (width_  - maxWidth_)));
          height = Math.max(minHeight, Math.min(height, height - (height_ - maxHeight_)));
        }
      }

      if (scrollOut && scrolling === 'auto' && height < origHeight && (width + wPadding + scrollOut) < maxWidth_) {
        width += scrollOut;
      }

      inner.width( width ).height( height );

      wrap.width( width + wPadding );

      width_  = wrap.width();
      height_ = wrap.height();

      canShrink = (width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight;
      canExpand = current.aspectRatio ? (width < origMaxWidth && height < origMaxHeight && width < origWidth && height < origHeight) : ((width < origMaxWidth || height < origMaxHeight) && (width < origWidth || height < origHeight));

      $.extend(current, {
        dim : {
          width	: getValue( width_ ),
          height	: getValue( height_ )
        },
        origWidth  : origWidth,
        origHeight : origHeight,
        canShrink  : canShrink,
        canExpand  : canExpand,
        wPadding   : wPadding,
        hPadding   : hPadding,
        wrapSpace  : height_ - skin.outerHeight(true),
        skinSpace  : skin.height() - height
      });

      if (!iframe && current.autoHeight && height > minHeight && height < maxHeight && !canExpand) {
        inner.height('auto');
      }
    },

    _getPosition: function (onlyAbsolute) {
      var current  = F.current,
        viewport = F.getViewport(),
        margin   = current.margin,
        width    = F.wrap.width()  + margin[1] + margin[3],
        height   = F.wrap.height() + margin[0] + margin[2],
        rez      = {
          position: 'absolute',
          top  : margin[0],
          left : margin[3]
        };

      if (current.autoCenter && current.fixed && !onlyAbsolute && height <= viewport.h && width <= viewport.w) {
        rez.position = 'fixed';

      } else if (!current.locked) {
        rez.top  += viewport.y;
        rez.left += viewport.x;
      }

      rez.top  = getValue(Math.max(rez.top,  rez.top  + ((viewport.h - height) * current.topRatio)));
      rez.left = getValue(Math.max(rez.left, rez.left + ((viewport.w - width)  * current.leftRatio)));

      return rez;
    },

    _afterZoomIn: function () {
      var current = F.current;

      if (!current) {
        return;
      }

      F.isOpen = F.isOpened = true;

      F.wrap.css('overflow', 'visible').addClass('fancybox-opened').hide().show(0);

      F.update();

      // Assign a click event
      if ( current.closeClick || (current.nextClick && F.group.length > 1) ) {
        F.inner.css('cursor', 'pointer').bind('click.fb', function(e) {
          if (!$(e.target).is('a') && !$(e.target).parent().is('a')) {
            e.preventDefault();

            F[ current.closeClick ? 'close' : 'next' ]();
          }
        });
      }

      // Create a close button
      if (current.closeBtn) {
        $(current.tpl.closeBtn).appendTo(F.skin).bind('click.fb', function(e) {
          e.preventDefault();

          F.close();
        });
      }

      // Create navigation arrows
      if (current.arrows && F.group.length > 1) {
        if (current.loop || current.index > 0) {
          $(current.tpl.prev).appendTo(F.outer).bind('click.fb', F.prev);
        }

        if (current.loop || current.index < F.group.length - 1) {
          $(current.tpl.next).appendTo(F.outer).bind('click.fb', F.next);
        }
      }

      F.trigger('afterShow');

      // Stop the slideshow if this is the last item
      if (!current.loop && current.index === current.group.length - 1) {

        F.play( false );

      } else if (F.opts.autoPlay && !F.player.isActive) {
        F.opts.autoPlay = false;

        F.play(true);
      }
    },

    _afterZoomOut: function ( obj ) {
      obj = obj || F.current;

      $('.fancybox-wrap').trigger('onReset').remove();

      $.extend(F, {
        group  : {},
        opts   : {},
        router : false,
        current   : null,
        isActive  : false,
        isOpened  : false,
        isOpen    : false,
        isClosing : false,
        wrap   : null,
        skin   : null,
        outer  : null,
        inner  : null
      });

      F.trigger('afterClose', obj);
    }
  });

  /*
   *	Default transitions
   */

  F.transitions = {
    getOrigPosition: function () {
      var current  = F.current,
        element  = current.element,
        orig     = current.orig,
        pos      = {},
        width    = 50,
        height   = 50,
        hPadding = current.hPadding,
        wPadding = current.wPadding,
        viewport = F.getViewport();

      if (!orig && current.isDom && element.is(':visible')) {
        orig = element.find('img:first');

        if (!orig.length) {
          orig = element;
        }
      }

      if (isQuery(orig)) {
        pos = orig.offset();

        if (orig.is('img')) {
          width  = orig.outerWidth();
          height = orig.outerHeight();
        }

      } else {
        pos.top  = viewport.y + (viewport.h - height) * current.topRatio;
        pos.left = viewport.x + (viewport.w - width)  * current.leftRatio;
      }

      if (F.wrap.css('position') === 'fixed' || current.locked) {
        pos.top  -= viewport.y;
        pos.left -= viewport.x;
      }

      pos = {
        top     : getValue(pos.top  - hPadding * current.topRatio),
        left    : getValue(pos.left - wPadding * current.leftRatio),
        width   : getValue(width  + wPadding),
        height  : getValue(height + hPadding)
      };

      return pos;
    },

    step: function (now, fx) {
      var ratio,
        padding,
        value,
        prop       = fx.prop,
        current    = F.current,
        wrapSpace  = current.wrapSpace,
        skinSpace  = current.skinSpace;

      if (prop === 'width' || prop === 'height') {
        ratio = fx.end === fx.start ? 1 : (now - fx.start) / (fx.end - fx.start);

        if (F.isClosing) {
          ratio = 1 - ratio;
        }

        padding = prop === 'width' ? current.wPadding : current.hPadding;
        value   = now - padding;

        F.skin[ prop ](  getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) ) );
        F.inner[ prop ]( getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) - (skinSpace * ratio) ) );
      }
    },

    zoomIn: function () {
      var current  = F.current,
        startPos = current.pos,
        effect   = current.openEffect,
        elastic  = effect === 'elastic',
        endPos   = $.extend({opacity : 1}, startPos);

      // Remove "position" property that breaks older IE
      delete endPos.position;

      if (elastic) {
        startPos = this.getOrigPosition();

        if (current.openOpacity) {
          startPos.opacity = 0.1;
        }

      } else if (effect === 'fade') {
        startPos.opacity = 0.1;
      }

      F.wrap.css(startPos).animate(endPos, {
        duration : effect === 'none' ? 0 : current.openSpeed,
        easing   : current.openEasing,
        step     : elastic ? this.step : null,
        complete : F._afterZoomIn
      });
    },

    zoomOut: function () {
      var current  = F.current,
        effect   = current.closeEffect,
        elastic  = effect === 'elastic',
        endPos   = {opacity : 0.1};

      if (elastic) {
        endPos = this.getOrigPosition();

        if (current.closeOpacity) {
          endPos.opacity = 0.1;
        }
      }

      F.wrap.animate(endPos, {
        duration : effect === 'none' ? 0 : current.closeSpeed,
        easing   : current.closeEasing,
        step     : elastic ? this.step : null,
        complete : F._afterZoomOut
      });
    },

    changeIn: function () {
      var current   = F.current,
        effect    = current.nextEffect,
        startPos  = current.pos,
        endPos    = { opacity : 1 },
        direction = F.direction,
        distance  = 200,
        field;

      startPos.opacity = 0.1;

      if (effect === 'elastic') {
        field = direction === 'down' || direction === 'up' ? 'top' : 'left';

        if (direction === 'down' || direction === 'right') {
          startPos[ field ] = getValue(getScalar(startPos[ field ]) - distance);
          endPos[ field ]   = '+=' + distance + 'px';

        } else {
          startPos[ field ] = getValue(getScalar(startPos[ field ]) + distance);
          endPos[ field ]   = '-=' + distance + 'px';
        }
      }

      // Workaround for http://bugs.jquery.com/ticket/12273
      if (effect === 'none') {
        F._afterZoomIn();

      } else {
        F.wrap.css(startPos).animate(endPos, {
          duration : current.nextSpeed,
          easing   : current.nextEasing,
          complete : F._afterZoomIn
        });
      }
    },

    changeOut: function () {
      var previous  = F.previous,
        effect    = previous.prevEffect,
        endPos    = { opacity : 0.1 },
        direction = F.direction,
        distance  = 200;

      if (effect === 'elastic') {
        endPos[ direction === 'down' || direction === 'up' ? 'top' : 'left' ] = ( direction === 'up' || direction === 'left' ? '-' : '+' ) + '=' + distance + 'px';
      }

      previous.wrap.animate(endPos, {
        duration : effect === 'none' ? 0 : previous.prevSpeed,
        easing   : previous.prevEasing,
        complete : function () {
          $(this).trigger('onReset').remove();
        }
      });
    }
  };

  /*
   *	Overlay helper
   */

  F.helpers.overlay = {
    defaults : {
      closeClick : true,      // if true, fancyBox will be closed when user clicks on the overlay
      speedOut   : 200,       // duration of fadeOut animation
      showEarly  : true,      // indicates if should be opened immediately or wait until the content is ready
      css        : {},        // custom CSS properties
      locked     : !isTouch,  // if true, the content will be locked into overlay
      fixed      : true       // if false, the overlay CSS position property will not be set to "fixed"
    },

    overlay : null,      // current handle
    fixed   : false,     // indicates if the overlay has position "fixed"
    el      : $('html'), // element that contains "the lock"

    // Public methods
    create : function(opts) {
      var parent;

      opts = $.extend({}, this.defaults, opts);

      if (this.overlay) {
        this.close();
      }

      parent = F.coming ? F.coming.parent : opts.parent;

      this.overlay = $('<div class="fancybox-overlay"></div>').appendTo( parent && parent.length ? parent : 'body' );
      this.fixed   = false;

      if (opts.fixed && F.defaults.fixed) {
        this.overlay.addClass('fancybox-overlay-fixed');

        this.fixed = true;
      }
    },

    open : function(opts) {
      var that = this;

      opts = $.extend({}, this.defaults, opts);

      if (this.overlay) {
        this.overlay.unbind('.overlay').width('auto').height('auto');

      } else {
        this.create(opts);
      }

      if (!this.fixed) {
        W.bind('resize.overlay', $.proxy( this.update, this) );

        this.update();
      }

      if (opts.closeClick) {
        this.overlay.bind('click.overlay', function(e) {
          if ($(e.target).hasClass('fancybox-overlay')) {
            if (F.isActive) {
              F.close();
            } else {
              that.close();
            }

            return false;
          }
        });
      }

      this.overlay.css( opts.css ).show();
    },

    close : function() {
      W.unbind('resize.overlay');

      if (this.el.hasClass('fancybox-lock')) {
        $('.fancybox-margin').removeClass('fancybox-margin');

        this.el.removeClass('fancybox-lock');

        W.scrollTop( this.scrollV ).scrollLeft( this.scrollH );
      }

      $('.fancybox-overlay').remove().hide();

      $.extend(this, {
        overlay : null,
        fixed   : false
      });
    },

    // Private, callbacks

    update : function () {
      var width = '100%', offsetWidth;

      // Reset width/height so it will not mess
      this.overlay.width(width).height('100%');

      // jQuery does not return reliable result for IE
      if (IE) {
        offsetWidth = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);

        if (D.width() > offsetWidth) {
          width = D.width();
        }

      } else if (D.width() > W.width()) {
        width = D.width();
      }

      this.overlay.width(width).height(D.height());
    },

    // This is where we can manipulate DOM, because later it would cause iframes to reload
    onReady : function (opts, obj) {
      var overlay = this.overlay;

      $('.fancybox-overlay').stop(true, true);

      if (!overlay) {
        this.create(opts);
      }

      if (opts.locked && this.fixed && obj.fixed) {
        obj.locked = this.overlay.append( obj.wrap );
        obj.fixed  = false;
      }

      if (opts.showEarly === true) {
        this.beforeShow.apply(this, arguments);
      }
    },

    beforeShow : function(opts, obj) {
      if (obj.locked && !this.el.hasClass('fancybox-lock')) {
        if (this.fixPosition !== false) {
          $('*:not(object)').filter(function(){
            return ($(this).css('position') === 'fixed' && !$(this).hasClass("fancybox-overlay") && !$(this).hasClass("fancybox-wrap") );
          }).addClass('fancybox-margin');
        }

        this.el.addClass('fancybox-margin');

        this.scrollV = W.scrollTop();
        this.scrollH = W.scrollLeft();

        this.el.addClass('fancybox-lock');

        W.scrollTop( this.scrollV ).scrollLeft( this.scrollH );
      }

      this.open(opts);
    },

    onUpdate : function() {
      if (!this.fixed) {
        this.update();
      }
    },

    afterClose: function (opts) {
      // Remove overlay if exists and fancyBox is not opening
      // (e.g., it is not being open using afterClose callback)
      if (this.overlay && !F.coming) {
        this.overlay.fadeOut(opts.speedOut, $.proxy( this.close, this ));
      }
    }
  };

  /*
   *	Title helper
   */

  F.helpers.title = {
    defaults : {
      type     : 'float', // 'float', 'inside', 'outside' or 'over',
      position : 'bottom' // 'top' or 'bottom'
    },

    beforeShow: function (opts) {
      var current = F.current,
        text    = current.title,
        type    = opts.type,
        title,
        target;

      if ($.isFunction(text)) {
        text = text.call(current.element, current);
      }

      if (!isString(text) || $.trim(text) === '') {
        return;
      }

      title = $('<div class="fancybox-title fancybox-title-' + type + '-wrap">' + text + '</div>');

      switch (type) {
        case 'inside':
          target = F.skin;
          break;

        case 'outside':
          target = F.wrap;
          break;

        case 'over':
          target = F.inner;
          break;

        default: // 'float'
          target = F.skin;

          title.appendTo('body');

          if (IE) {
            title.width( title.width() );
          }

          title.wrapInner('<span class="child"></span>');

          //Increase bottom margin so this title will also fit into viewport
          F.current.margin[2] += Math.abs( getScalar(title.css('margin-bottom')) );
          break;
      }

      title[ (opts.position === 'top' ? 'prependTo'  : 'appendTo') ](target);
    }
  };

  // jQuery plugin initialization
  $.fn.fancybox = function (options) {
    var index,
      that     = $(this),
      selector = this.selector || '',
      run      = function(e) {
        var what = $(this).blur(), idx = index, relType, relVal;

        if (!(e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) && !what.is('.fancybox-wrap')) {
          relType = options.groupAttr || 'data-fancybox-group';
          relVal  = what.attr(relType);

          if (!relVal) {
            relType = 'rel';
            relVal  = what.get(0)[ relType ];
          }

          if (relVal && relVal !== '' && relVal !== 'nofollow') {
            what = selector.length ? $(selector) : that;
            what = what.filter('[' + relType + '="' + relVal + '"]');
            idx  = what.index(this);
          }

          options.index = idx;

          // Stop an event from bubbling if everything is fine
          if (F.open(what, options) !== false) {
            e.preventDefault();
          }
        }
      };

    options = options || {};
    index   = options.index || 0;

    if (!selector || options.live === false) {
      that.unbind('click.fb-start').bind('click.fb-start', run);

    } else {
      D.undelegate(selector, 'click.fb-start').delegate(selector + ":not('.fancybox-item, .fancybox-nav')", 'click.fb-start', run);
    }

    this.filter('[data-fancybox-start=1]').trigger('click');

    return this;
  };

  // Tests that need a body at doc ready
  D.ready(function() {
    var w1, w2;

    if ( $.scrollbarWidth === undefined ) {
      // http://benalman.com/projects/jquery-misc-plugins/#scrollbarwidth
      $.scrollbarWidth = function() {
        var parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo('body'),
          child  = parent.children(),
          width  = child.innerWidth() - child.height( 99 ).innerWidth();

        parent.remove();

        return width;
      };
    }

    if ( $.support.fixedPosition === undefined ) {
      $.support.fixedPosition = (function() {
        var elem  = $('<div style="position:fixed;top:20px;"></div>').appendTo('body'),
          fixed = ( elem[0].offsetTop === 20 || elem[0].offsetTop === 15 );

        elem.remove();

        return fixed;
      }());
    }

    $.extend(F.defaults, {
      scrollbarWidth : $.scrollbarWidth(),
      fixed  : $.support.fixedPosition,
      parent : $('body')
    });

    //Get real width of page scroll-bar
    w1 = $(window).width();

    H.addClass('fancybox-lock-test');

    w2 = $(window).width();

    H.removeClass('fancybox-lock-test');

    $("<style type='text/css'>.fancybox-margin{margin-right:" + (w2 - w1) + "px;}</style>").appendTo("head");
  });

}(window, document, jQuery));

function loadSearchTemplate($targetEl, incomingdata, $templateEl, loadNextPage, callback) {
    if (undefined === loadNextPage) {
        loadNextPage = false;
    }

    var source = $templateEl.html();
    var template = Handlebars.compile(source);
    if (loadNextPage) {
        $targetEl.append(template(incomingdata));
    } else {
        $targetEl.html(template(incomingdata));
    }

    if (callback) {
        callback();
    }
}


/////
// Check for quicklinks for search word
function hasQuickLink(searchTerm){
    if (CludoSearch.websiteSettings && CludoSearch.websiteSettings.quicklinks) {
        for (var i = 0, leni = CludoSearch.websiteSettings.quicklinks.length; i < leni; i++) {
            for (var j = 0, lenj = CludoSearch.websiteSettings.quicklinks[i].terms.length; j < lenj; j++) {
                var matchQuery = undefined;
                var quicklink = CludoSearch.websiteSettings.quicklinks[i];
                if (CludoSearch._isStringMatch(searchTerm, quicklink.terms[j].name)) {
                    matchQuery = searchTerm;
                }
                if (matchQuery) {
                    CludoSearch.websiteSettings.quicklink = quicklink;
                    CludoSearch.websiteSettings.quicklink.matchQuery = matchQuery;
                    return true;
                }
            }
        }
    }
    return false;
}
// Returns true if quicklink was processed
function handleQuickLinks(searchTerm) {
    if (!window.quickLinkHandled && hasQuickLink(searchTerm)) {
        window.quickLinkHandled = true;
        doQuickLinkData(searchTerm);
    } else {
        window.quickLinkHandled = false;
    }
}

function doQuickLinkData(searchTerm){
    var data = {
        "ls": "searchresult",
        "sz": screen.width + "x" + screen.height,
        "ua": navigator.userAgent,
        "sw": CludoSearch.websiteSettings.quicklink.matchQuery || searchTerm,
        "brl": navigator.language,
        "pn": 1,
        "page": 1,
        "rc": 0,
        "fquery": CludoSearch.websiteSettings.quicklink.matchQuery || searchTerm,
        "hn": window.location.hostname,
        "sid": CludoSearch.getSessionId(),
        "refurl": window.location.protocol + "//" + window.location.hostname + window.location.pathname,
        "refpt": document.title,
        "ql": CludoSearch.websiteSettings.quicklink.id,
        "dt": CludoSearch.getDeviceType(),
        // to purge cache
        "a": new Date().getTime()
    }
    if((CludoSearch.websiteSettings.quicklink.matchQuery || searchTerm) && searchTerm != ''){
        jQuery.ajax({
            url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId +'/search/pushstat/querylog',
            method: "POST",
            async: false,
            crossDomain: true,
            data: JSON.stringify(data),
            headers: {
                "Content-Type": "application/json; charset=utf-8",
                "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
            },
            complete: function () {
                window.location.href = CludoSearch.websiteSettings.quicklink.url;
            }
        });
    }
}

function grabCludoSettings() {
    //Grab website settings from cludo that will get the quicklinks setup.
    //Only running this on first search bar interaction to grab settings.
    if(!CludoSearch.websiteSettings || !CludoSearch.websiteSettings.quicklinks){
        //We don't want this running on page load or if we already have the settings.
        jQuery.ajax({
            url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId +'/websites/publicsettings',
            method: "GET",
            async: false,
            crossDomain: true,
            headers: {
                "Content-Type": "application/json; charset=utf-8",
                "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
            },
            success: function (data) {
                CludoSearch.websiteSettings = data;
            },
            error: function (xhr, status, error){}
        });
    }
    //End the website settings setup.
}

function minimizeHeader(){
    jQuery('.nav-context .ps-navigation').replaceWith('<div class=\"header-container\" style=\"height:64px\"><div class=\"checkout-header--wrapper clearfix light\">\r\n<span class=\"global-header__logo\">\r\n<div class=\"logo\">\r\n<a href=\"https:\/\/www.pluralsight.com\/\" title=\"Pluralsight\">\r\n<img src=\"\/content\/dam\/pluralsight\/images\/logo\/ps_logo_f-03.png\" alt=\"Pluralsight\">\r\n<\/a>\r\n<\/div>\r\n<\/span>\r\n<span class=\"global-header__mobilelogo\">\r\n<div class=\"logo\">\r\n<a href=\"https:\/\/www.pluralsight.com\/\" title=\"Pluralsight\">\r\n<img src=\"\/content\/dam\/pluralsight\/images\/logo\/ps_logo_f-03.png\" alt=\"Pluralsight\">\r\n<\/a>\r\n<\/div>\r\n<\/span>\r\n<\/div><\/div>');
    jQuery('.nav-context .checkout-header--wrapper .header_utilities').remove();
    jQuery('.nav-context .header_padding').remove();
}
function minimizeFooter(){
    jQuery('footer#ftr').replaceWith('<div class=\"checkout-footer-component\">\r\n<div class=\"footer-component\">\r\n<div class=\"container\">\r\n<div class=\"row\">\r\n<div class=\"twelve columns\">\r\n<div class=\"footer__container\">\r\n<div class=\"footer__copyright\">\r\n<p>Copyright \u00A9 2004 - 2022 Pluralsight LLC. All rights reserved. <span class=\"copyright-divider\">|<\/span> <a href=\"\/content\/pluralsight\/en\/terms.html\" class=\"plain\" target=\"_self\">Terms of Use<\/a> <span class=\"copyright-divider\">|<\/span> <a href=\"\/content\/pluralsight\/en\/privacy.html\" class=\"plain\" target=\"_self\">Privacy Policy<\/a><\/p>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<\/div>');
}

if (document.URL.indexOf("minimal=true") > -1){
    minimizeHeader();
    minimizeFooter();
}

var partner = getParameterByName("partner");
if (typeof partner != "undefined" && partner != ""){
    var addPartner = function(){
        jQuery("a").each(function(key,item){
            var href = jQuery(item).attr('href');
            if (href && href.indexOf("#") != 0 && href.indexOf("partner") == -1){
                var paramSign = (href.indexOf("?") == -1 ? "?" : "&");
                jQuery(item).attr('href', href + paramSign + "partner=" + partner );
            }
        });
        jQuery(".main-course-signup a, a.main-paths-signup, a.main-roleiq-signup").removeClass("fancybox").attr("href","http://www.pluralsight.com/product/pilot-request").text("Request a pilot").attr("data-aa-title","partner-pilot");
    }
    jQuery(".path-template #ps_skill").hide();
    addPartner();
    window.setTimeout(function(){ //in case items in the middle of product service callbacks get missed
        addPartner();
    },1000);
}

/* Google GCP SKU */
if( ((document.URL.indexOf('/courses/') > -1) ||
     (document.URL.indexOf('/paths/') > -1) ||
     (document.URL.indexOf('/role-iq/') > -1 )) &&
      document.URL.indexOf('indgcp') > -1 ) {
    var btn = jQuery('.main-course-signup a.button, .course-bottom-free-trial-banner a.button, .paths-header a.button, .main-roleiq-signup.button, .roleiq-course--svg a.button');
    var btnCourses = jQuery('.main-course-signup a.button, .course-bottom-free-trial-banner a.button');
    var btnPaths = jQuery('.paths-header a.button');
    var btnRoleIQ = jQuery('.main-roleiq-signup.button, .roleiq-course--svg a.button');
    var style = jQuery('<style>.nopromos #site-promo{display: none !important;}.nopromos #drift-widget-container{display: none !important;}</style>');
    minimizeHeader();
    minimizeFooter();

    jQuery('body').addClass('nopromos').append(style);

    jQuery('.course-template .course-bottom-right').css('display','none');
    jQuery('.course-template .course-bottom-left').css('width','100%');
    jQuery('.learning-paths-page #ps_skill .ps_skill').css('pointer-events','none');
    jQuery('.learning-paths-page #ps_skill .ps_skill--overlay').css('display','none');

    btn.attr('href', 'https://www.pluralsight.com/buy?sku=SLICE-IND-GCP-M');
    btn.attr('data-product-sku', 'SLICE-IND-GCP-M');
    btn.attr('title', 'Get started');
    btn.attr('rel', 'nofollow noindex');
    btn.text('Get Started');
    btn.removeClass('fancybox');
    btnCourses.attr('data-aa-title', 'ind-gcp');
    btnPaths.attr('data-aa-title', 'ind-gcp-paths');
    btnRoleIQ.attr('data-aa-title', 'ind-gcp-iq');
}

/*
 @author Sanford Whiteman, TEKNKL (blog.teknkl.com / sandy@teknkl.com)
 @version v1.0.2
 @copyright Copyright 2016, 2017 FigureOne, Inc.
 @license MIT License: You must include this license and the above credits in all uses & reproductions of this software.
*/
// see https://blog.teknkl.com/pre-fill-any-site-any-form/ for implementation
function SimpleDTO(a) {
  var e = Function.prototype.call.bind(Array.prototype.slice);
  try {
    a.debug && console.log("SimpleDTO: Unifying domains " + [document.domain, a.domain].join(", ")), document.domain = a.domain;
  } catch (b) {
    throw "SimpleDTO: Domain unification error, domain: " + a.domain;
  }
  if ("receive" == a.mode) {
    var c = document.createElement("iframe");
    this.setSource = function(b) {
      c.src = b;
    };
    this.getSource = function() {
      return d;
    };
    c.addEventListener("load", function() {
      this.data || this.src ? (a.debug && console.log("SimpleDTO: running callback"), a.cb && a.cb.call(this, f)) : console.warn("SimpleDTO: skipping load event due to empty data src or callback");
    });
    c.setAttribute("data-transfer-object", "true");
    [["visibility", "hidden"], ["position", "absolute"]].forEach(function(b) {
      c.style.setProperty.apply(c.style, b);
    });
    var d = document.createElement("a");
    d.href = a.dataSrc || "";
    a.noReplaceQuery || (d.search = document.location.search);
    a.noInit || this.setSource(d.href);
    document.body.appendChild(c);
  }
  var f = this;
  return {getGlobal:function() {
    return c.contentWindow;
  }, cleanup:function() {
    var b = c.contentWindow.frameElement;
    b.parentNode.removeChild(b);
  }, parse:function(b) {
    b = document.querySelector('.dto-xml[data-field-collection="' + b + '"]').text;
    b = (new DOMParser).parseFromString(b, "application/xml");
    var a = b.querySelector("mktoPreFillFields");
    a = a.getAttribute("varName") || a.tagName;
    var c = {};
    e(b.querySelectorAll("mktoPreFillFields mktoField")).forEach(function(a) {
      c[a.getAttribute("inputName")] = a.textContent;
    });
    return self[a] = c;
  }};
}
window.SimpleDTO = SimpleDTO;
if (document.cookie.indexOf("imgTst=1") > -1 || document.URL.indexOf("aem.pluralsight.com") > -1 || document.URL.indexOf("www-stage.pluralsight.com") > -1){
    window.imageSizeWarningDisplayed = false;

    function removePagespeedCompression(imgUrl){
        var imgSplitUrl = imgUrl.split("/");
        var oldFileName = imgSplitUrl[imgSplitUrl.length - 1];
        var fixedFileName = oldFileName;
        if (oldFileName.indexOf(".pagespeed") > -1){
            fixedFileName = oldFileName.substring(1,oldFileName.length).split(".pagespeed")[0];
        }
        var fixedUrl = imgUrl.replace(oldFileName,fixedFileName).replace(",","%");

        if (fixedUrl.indexOf("pluralsight.com") > -1){
            fixedUrl = fixedUrl.replace(/^(?:\/\/|[^\/]+)*\//, "/");
        }

        return fixedUrl;
    }

    function isAnimatedGif(src, cb) {
        var request = new XMLHttpRequest();
        request.open('GET', src, true);
        request.responseType = 'arraybuffer';
        request.addEventListener('load', function () {
            var arr = new Uint8Array(request.response),
                i, len, length = arr.length, frames = 0;

            // make sure it's a gif (GIF8)
            if (arr[0] !== 0x47 || arr[1] !== 0x49 ||
                arr[2] !== 0x46 || arr[3] !== 0x38)
            {
                cb(false);
                return;
            }
            for (i=0, len = length - 9; i < len, frames < 2; ++i) {
                if (arr[i] === 0x00 && arr[i+1] === 0x21 &&
                    arr[i+2] === 0xF9 && arr[i+3] === 0x04 &&
                    arr[i+8] === 0x00 &&
                    (arr[i+9] === 0x2C || arr[i+9] === 0x21))
                {
                    frames++;
                }
            }

            // if frame count > 1, it's animated
            cb(frames > 1);
        });
        request.send();
    }

    function testAndMark(checkItem,imgUrl){
        if (imgUrl && imgUrl.indexOf("/content/") > -1){
            var imgWidth = checkItem.width();
            var imgHeight = checkItem.height();
            var sizeMax = imgHeight * imgWidth * 1.5;
            var fixedUrl = removePagespeedCompression(imgUrl);

            //go easy on cards since they have a wide range of responsive sizes
            if (checkItem.hasClass('ps-card--image')){
                sizeMax = sizeMax * 1.5;
            }

            var xhr = new XMLHttpRequest();
            xhr.open('GET', fixedUrl, true);
            xhr.onreadystatechange = function(){
              if ( xhr.readyState == 4 ) {
                if ( xhr.status == 200 ) {
                    var dataSize = xhr.getResponseHeader('Content-Length');
                    if (dataSize > sizeMax && dataSize > 50000 && sizeMax > 1000){
                        //isAnimatedGif(fixedUrl,function(response){
                            //if (!response){
                                checkItem.css("border","20px solid red");
                                console.log("large image: " + parseInt(dataSize/1024) + "KB, should be under " + parseInt(sizeMax/1024) + "KB at its current display size. https://www.pluralsight.com" + fixedUrl);
                                if (!window.imageSizeWarningDisplayed){
                                    window.imageSizeWarningDisplayed = true;
                                    jQuery('#content').before("<h5 id='ps-image-size-warning' style='text-align:center; color:black; background-color:white; display:none;'>Overly large or uncompressed image(s) are being used on this page. Please find highlighted in red below.</h3>");
                                    jQuery('#ps-image-size-warning').slideDown();
                                    setTimeout(function(){
                                        jQuery('#ps-image-size-warning').slideUp();
                                    },3000);
                                }
                            //}
                        //});
                    }
                }
              }
            };
            xhr.send(null);
        }
    }

    jQuery(document).ready(function(){
        setTimeout(function(){
            if (jQuery(window).width() > 1023){
                jQuery('img').each(function(key,item){
                    var imgUrl = jQuery(item).attr('src');
                    testAndMark(jQuery(item),imgUrl);
                });

                jQuery('div').filter(function(){
                    return jQuery(this).css("background-image");
                }).each(function(key,item){
                    var imgUrl = jQuery(item).css('background-image').replace('url("','').replace('")','');
                    testAndMark(jQuery(item),imgUrl);
                });
            }
        },1000);
    });
}
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AOS=t():e.AOS=t()}(this,function(){return function(e){function t(n){if(o[n])return o[n].exports;var i=o[n]={exports:{},id:n,loaded:!1};return e[n].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var o={};return t.m=e,t.c=o,t.p="dist/",t(0)}([function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var n in o)Object.prototype.hasOwnProperty.call(o,n)&&(e[n]=o[n])}return e},a=o(1),r=(n(a),o(5)),c=n(r),u=o(6),s=n(u),d=o(7),f=n(d),l=o(8),m=n(l),p=o(9),b=n(p),v=o(10),g=n(v),y=o(13),w=n(y),h=[],k=!1,x=document.all&&!window.atob,j={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded"},O=function(){var e=arguments.length<=0||void 0===arguments[0]?!1:arguments[0];return e&&(k=!0),k?(h=(0,g["default"])(h,j),(0,b["default"])(h,j.once),h):void 0},_=function(){h=(0,w["default"])(),O()},z=function(){h.forEach(function(e,t){e.node.removeAttribute("data-aos"),e.node.removeAttribute("data-aos-easing"),e.node.removeAttribute("data-aos-duration"),e.node.removeAttribute("data-aos-delay")})},A=function(e){return e===!0||"mobile"===e&&m["default"].mobile()||"phone"===e&&m["default"].phone()||"tablet"===e&&m["default"].tablet()||"function"==typeof e&&e()===!0},E=function(e){return j=i(j,e),h=(0,w["default"])(),A(j.disable)||x?z():(document.querySelector("body").setAttribute("data-aos-easing",j.easing),document.querySelector("body").setAttribute("data-aos-duration",j.duration),document.querySelector("body").setAttribute("data-aos-delay",j.delay),"DOMContentLoaded"===j.startEvent&&["complete","interactive"].indexOf(document.readyState)>-1?O(!0):"load"===j.startEvent?window.addEventListener(j.startEvent,function(){O(!0)}):document.addEventListener(j.startEvent,function(){O(!0)}),window.addEventListener("resize",(0,s["default"])(O,50,!0)),window.addEventListener("orientationchange",(0,s["default"])(O,50,!0)),window.addEventListener("scroll",(0,c["default"])(function(){(0,b["default"])(h,j.once)},99)),document.addEventListener("DOMNodeRemoved",function(e){var t=e.target;t&&1===t.nodeType&&t.hasAttribute&&t.hasAttribute("data-aos")&&(0,s["default"])(_,50,!0)}),(0,f["default"])("[data-aos]",_),h)};e.exports={init:E,refresh:O,refreshHard:_}},function(e,t){},,,,function(e,t,o){"use strict";function n(e,t,o){var n=!0,a=!0;if("function"!=typeof e)throw new TypeError(c);return i(o)&&(n="leading"in o?!!o.leading:n,a="trailing"in o?!!o.trailing:a),r(e,t,{leading:n,maxWait:t,trailing:a})}function i(e){var t="undefined"==typeof e?"undefined":a(e);return!!e&&("object"==t||"function"==t)}var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},r=o(6),c="Expected a function";e.exports=n},function(e,t){"use strict";function o(e,t,o){function n(t){var o=b,n=v;return b=v=void 0,O=t,y=e.apply(n,o)}function a(e){return O=e,w=setTimeout(d,t),_?n(e):y}function r(e){var o=e-h,n=e-O,i=t-o;return z?x(i,g-n):i}function u(e){var o=e-h,n=e-O;return!h||o>=t||0>o||z&&n>=g}function d(){var e=j();return u(e)?f(e):void(w=setTimeout(d,r(e)))}function f(e){return clearTimeout(w),w=void 0,A&&b?n(e):(b=v=void 0,y)}function l(){void 0!==w&&clearTimeout(w),h=O=0,b=v=w=void 0}function m(){return void 0===w?y:f(j())}function p(){var e=j(),o=u(e);if(b=arguments,v=this,h=e,o){if(void 0===w)return a(h);if(z)return clearTimeout(w),w=setTimeout(d,t),n(h)}return void 0===w&&(w=setTimeout(d,t)),y}var b,v,g,y,w,h=0,O=0,_=!1,z=!1,A=!0;if("function"!=typeof e)throw new TypeError(s);return t=c(t)||0,i(o)&&(_=!!o.leading,z="maxWait"in o,g=z?k(c(o.maxWait)||0,t):g,A="trailing"in o?!!o.trailing:A),p.cancel=l,p.flush=m,p}function n(e){var t=i(e)?h.call(e):"";return t==f||t==l}function i(e){var t="undefined"==typeof e?"undefined":u(e);return!!e&&("object"==t||"function"==t)}function a(e){return!!e&&"object"==("undefined"==typeof e?"undefined":u(e))}function r(e){return"symbol"==("undefined"==typeof e?"undefined":u(e))||a(e)&&h.call(e)==m}function c(e){if("number"==typeof e)return e;if(r(e))return d;if(i(e)){var t=n(e.valueOf)?e.valueOf():e;e=i(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(p,"");var o=v.test(e);return o||g.test(e)?y(e.slice(2),o?2:8):b.test(e)?d:+e}var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},s="Expected a function",d=NaN,f="[object Function]",l="[object GeneratorFunction]",m="[object Symbol]",p=/^\s+|\s+$/g,b=/^[-+]0x[0-9a-f]+$/i,v=/^0b[01]+$/i,g=/^0o[0-7]+$/i,y=parseInt,w=Object.prototype,h=w.toString,k=Math.max,x=Math.min,j=Date.now;e.exports=o},function(e,t){"use strict";function o(e,t){r.push({selector:e,fn:t}),!c&&a&&(c=new a(n),c.observe(i.documentElement,{childList:!0,subtree:!0,removedNodes:!0})),n()}function n(){for(var e,t,o=0,n=r.length;n>o;o++){e=r[o],t=i.querySelectorAll(e.selector);for(var a,c=0,u=t.length;u>c;c++)a=t[c],a.ready||(a.ready=!0,e.fn.call(a,a))}}Object.defineProperty(t,"__esModule",{value:!0});var i=window.document,a=window.MutationObserver||window.WebKitMutationObserver,r=[],c=void 0;t["default"]=o},function(e,t){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var o=0;o<t.length;o++){var n=t[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,o,n){return o&&e(t.prototype,o),n&&e(t,n),t}}(),i=function(){function e(){o(this,e)}return n(e,[{key:"phone",value:function(){var e=!1;return function(t){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0)}(navigator.userAgent||navigator.vendor||window.opera),e}},{key:"mobile",value:function(){var e=!1;return function(t){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0)}(navigator.userAgent||navigator.vendor||window.opera),e}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),e}();t["default"]=new i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e,t,o){var n=e.node.getAttribute("data-aos-once");t>e.position?e.node.classList.add("aos-animate"):"undefined"!=typeof n&&("false"===n||!o&&"true"!==n)&&e.node.classList.remove("aos-animate")},n=function(e,t){var n=window.pageYOffset,i=window.innerHeight;e.forEach(function(e,a){o(e,i+n,t)})};t["default"]=n},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var i=o(11),a=n(i),r=function(e,t){return e.forEach(function(e,o){e.node.classList.add("aos-init"),e.position=(0,a["default"])(e.node,t.offset)}),e};t["default"]=r},function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var i=o(12),a=n(i),r=function(e,t){var o=0,n=0,i=window.innerHeight,r={offset:e.getAttribute("data-aos-offset"),anchor:e.getAttribute("data-aos-anchor"),anchorPlacement:e.getAttribute("data-aos-anchor-placement")};switch(r.offset&&!isNaN(r.offset)&&(n=parseInt(r.offset)),r.anchor&&document.querySelectorAll(r.anchor)&&(e=document.querySelectorAll(r.anchor)[0]),o=(0,a["default"])(e).top,r.anchorPlacement){case"top-bottom":break;case"center-bottom":o+=e.offsetHeight/2;break;case"bottom-bottom":o+=e.offsetHeight;break;case"top-center":o+=i/2;break;case"bottom-center":o+=i/2+e.offsetHeight;break;case"center-center":o+=i/2+e.offsetHeight/2;break;case"top-top":o+=i;break;case"bottom-top":o+=e.offsetHeight+i;break;case"center-top":o+=e.offsetHeight/2+i}return r.anchorPlacement||r.offset||isNaN(t)||(n=t),o+n};t["default"]=r},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){for(var t=0,o=0;e&&!isNaN(e.offsetLeft)&&!isNaN(e.offsetTop);)t+=e.offsetLeft-("BODY"!=e.tagName?e.scrollLeft:0),o+=e.offsetTop-("BODY"!=e.tagName?e.scrollTop:0),e=e.offsetParent;return{top:o,left:t}};t["default"]=o},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){e=e||document.querySelectorAll("[data-aos]");var t=[];return[].forEach.call(e,function(e,o){t.push({node:e})}),t};t["default"]=o}])});
//# sourceMappingURL=aos.js.map

//PS note - this is Rellax.js, but with their screenX and screenY vars replaced with a single var called "smoothing", set to a constant of 1000. This makes sure the animation doesn't change speeds at different screen sizes.
(function(n,h){"function"===typeof define&&define.amd?define([],h):"object"===typeof module&&module.exports?module.exports=h():n.Rellax=h()})("undefined"!==typeof window?window:global,function(){var n=function(h,p){var a=Object.create(n.prototype),l=0,r=0,k=0,t=0,c=[],u=!0,B=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame||function(a){return setTimeout(a,1E3/60)},q=null,C=window.cancelAnimationFrame||
window.mozCancelAnimationFrame||clearTimeout,D=window.transformProp||function(){var a=document.createElement("div");if(null===a.style.transform){var b=["Webkit","Moz","ms"],e;for(e in b)if(void 0!==a.style[b[e]+"Transform"])return b[e]+"Transform"}return"transform"}();a.options={speed:-2,center:!1,wrapper:null,relativeToWrapper:!1,round:!0,vertical:!0,horizontal:!1,callback:function(){}};p&&Object.keys(p).forEach(function(d){a.options[d]=p[d]});h||(h=".rellax");var m="string"===typeof h?document.querySelectorAll(h):
[h];if(0<m.length){a.elems=m;if(a.options.wrapper&&!a.options.wrapper.nodeType)if(m=document.querySelector(a.options.wrapper))a.options.wrapper=m;else{console.warn("Rellax: The wrapper you're trying to use doesn't exist.");return}var w=function(){for(var d=0;d<c.length;d++)a.elems[d].style.cssText=c[d].style;c=[];r=1200;t=1600;x();for(d=0;d<a.elems.length;d++){var b=a.elems[d],e=b.getAttribute("data-rellax-percentage"),g=b.getAttribute("data-rellax-speed"),h=b.getAttribute("data-rellax-zindex")||
0,l=b.getAttribute("data-rellax-min"),n=b.getAttribute("data-rellax-max"),v=a.options.wrapper?a.options.wrapper.scrollTop:window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop;a.options.relativeToWrapper&&(v=(window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop)-a.options.wrapper.offsetTop);var f=a.options.vertical?e||a.options.center?v:0:0,k=a.options.horizontal?e||a.options.center?a.options.wrapper?a.options.wrapper.scrollLeft:window.pageXOffset||
document.documentElement.scrollLeft||document.body.scrollLeft:0:0;v=f+b.getBoundingClientRect().top;var m=b.clientHeight||b.offsetHeight||b.scrollHeight,p=k+b.getBoundingClientRect().left,q=b.clientWidth||b.offsetWidth||b.scrollWidth;f=e?e:(f-v+r)/(m+r);e=e?e:(k-p+t)/(q+t);a.options.center&&(f=e=.5);g=g?g:a.options.speed;e=y(e,f,g);b=b.style.cssText;f="";0<=b.indexOf("transform")&&(f=b.indexOf("transform"),f=b.slice(f),f=(k=f.indexOf(";"))?" "+f.slice(11,k).replace(/\s/g,""):" "+f.slice(11).replace(/\s/g,
""));c.push({baseX:e.x,baseY:e.y,top:v,left:p,height:m,width:q,speed:g,style:b,transform:f,zindex:h,min:l,max:n})}u&&(window.addEventListener("resize",w),u=!1);z()},x=function(){var d=l,b=k;l=a.options.wrapper?a.options.wrapper.scrollTop:(document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset;k=a.options.wrapper?a.options.wrapper.scrollLeft:(document.documentElement||document.body.parentNode||document.body).scrollLeft||window.pageXOffset;a.options.relativeToWrapper&&
(l=((document.documentElement||document.body.parentNode||document.body).scrollTop||window.pageYOffset)-a.options.wrapper.offsetTop);return d!=l&&a.options.vertical||b!=k&&a.options.horizontal?!0:!1},y=function(d,b,e){var c={};d=100*e*(1-d);b=100*e*(1-b);c.x=a.options.round?Math.round(d):Math.round(100*d)/100;c.y=a.options.round?Math.round(b):Math.round(100*b)/100;return c},A=function(){x()&&!1===u&&z();q=B(A)},z=function(){for(var d,b=0;b<a.elems.length;b++){d=y((k-c[b].left+t)/(c[b].width+t),(l-
c[b].top+r)/(c[b].height+r),c[b].speed);var e=d.y-c[b].baseY,g=d.x-c[b].baseX;null!==c[b].min&&(a.options.vertical&&!a.options.horizontal&&(e=e<=c[b].min?c[b].min:e),a.options.horizontal&&!a.options.vertical&&(g=g<=c[b].min?c[b].min:g));null!==c[b].max&&(a.options.vertical&&!a.options.horizontal&&(e=e>=c[b].max?c[b].max:e),a.options.horizontal&&!a.options.vertical&&(g=g>=c[b].max?c[b].max:g));a.elems[b].style[D]="translate3d("+(a.options.horizontal?g:"0")+"px,"+(a.options.vertical?e:"0")+"px,"+c[b].zindex+
"px) "+c[b].transform}a.options.callback(d)};a.destroy=function(){for(var d=0;d<a.elems.length;d++)a.elems[d].style.cssText=c[d].style;u||(window.removeEventListener("resize",w),u=!0);C(q);q=null};w();A();a.refresh=w;return a}console.warn("Rellax: The elements you're trying to select don't exist.")};return n});
/*global
  jQuery, Utils
 */
// iife to set up component during page load
(() => {
  'use strict';

  // an init() to be used in callbacks
  const init = () => {
    if (jQuery(".fancybox").not('.executive-member .fancybox').length) {
      var $triggers = jQuery(".fancybox").not('.executive-member .fancybox');

      var fancyConfig = {
        maxWidth: 1200,
        closeBtn: false,
        margin:[80,10,10,10],

        helpers: {
          overlay: {
            css: {
              'background': 'rgba(0,0,0,0.5)'
            }
          }
        },
        beforeShow: function () {
          if (typeof this.content != 'undefined' && typeof this.content.find != 'undefined'){
            this.content.find('.close-fancybox').on('click', function (e) {
              e.preventDefault();
              jQuery.fancybox.close();
            });
          }
        }
      };

      // basic fancybox
      $triggers.filter(".fancybox-wide").fancybox(fancyConfig);

      //others, set to default.
      fancyConfig.maxWidth = 800;
      $triggers.not(".fancybox-wide").fancybox(fancyConfig);
    }
    if (jQuery('.executive-member .fancybox').length){
      jQuery('.executive-member .fancybox').fancybox({
        padding: 0,
        margin: 25,
        height: 400,
        maxWidth: 800,
        tpl: {
          closeBtn: '<a title="Close" class="fancybox-item fancybox-close myClose exec-close"></a>'
        },
        helpers: {
          overlay: {
            css: {
              'background': 'rgba(0,0,0,0.5)'
            }
          }
        },
      });
    };
  };

  // use init() callback to init the component after page load
  jQuery(() => {init();});

  // use init() callback to init the component after target finishes
  document.addEventListener('at-content-rendering-succeeded', function(e) {
    jQuery(() => {init();});
  });
})();

/* Smooth scrolling for anchor links */

jQuery('body').on('click', 'a', function(event) {
    var href = jQuery(this).attr('href');
    var findClass = jQuery(this).hasClass('fancybox');

    if (findClass) {
        event.preventDefault();
    } else if(href && href.startsWith('#') && href !== '#') {
        event.preventDefault();
        var scrollTargetTop = 0;
        var foundTarget = false;
        if (jQuery(href + "_").length){
            scrollTargetTop = jQuery(href + "_").offset().top;
            foundTarget = true;
        } else if (jQuery(href).length){
            scrollTargetTop = jQuery(href).offset().top;
            foundTarget = true;
        } else if (jQuery('a[name=' + href.replace("#","") + ']').length){
            scrollTargetTop = jQuery('a[name=' + href.replace("#","") + ']').offset().top;
            foundTarget = true;

        }

        var headerHeight = 0;
        if (jQuery('nav').length > 0) {
            headerHeight = jQuery('nav').outerHeight();
        } else if (jQuery('.checkout-header--wrapper').length > 0) {
            headerHeight = jQuery('.checkout-header--wrapper').outerHeight();
        } else if (jQuery('body.tech-blog-post-template').length >0){
            headerHeight = jQuery('.ps--blog_nav').outerHeight();
        }

        var stickyGenericBlock = jQuery('.generic-block-wrapper.block--sticky');
        if (stickyGenericBlock.length > 0 && foundTarget) {
            jQuery('html, body').animate({scrollTop: scrollTargetTop - headerHeight - stickyGenericBlock.outerHeight()}, 200);
        } else if (foundTarget) {
            jQuery('html, body').animate({scrollTop: scrollTargetTop - headerHeight}, 200);
        }
    }
});

/*! js-cookie v3.0.1 | MIT */
;
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
      (global = global || self, (function () {
        var current = global.Cookies;
        var exports = global.Cookies = factory();
        exports.noConflict = function () { global.Cookies = current; return exports; };
      }()));
}(this, (function () { 'use strict';

  /* eslint-disable no-var */
  function assign (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        target[key] = source[key];
      }
    }
    return target
  }
  /* eslint-enable no-var */

  /* eslint-disable no-var */
  var defaultConverter = {
    read: function (value) {
      if (value[0] === '"') {
        value = value.slice(1, -1);
      }
      return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent)
    },
    write: function (value) {
      return encodeURIComponent(value).replace(
        /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
        decodeURIComponent
      )
    }
  };
  /* eslint-enable no-var */

  /* eslint-disable no-var */

  function init (converter, defaultAttributes) {
    function set (key, value, attributes) {
      if (typeof document === 'undefined') {
        return
      }

      attributes = assign({}, defaultAttributes, attributes);

      if (typeof attributes.expires === 'number') {
        attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
      }
      if (attributes.expires) {
        attributes.expires = attributes.expires.toUTCString();
      }

      key = encodeURIComponent(key)
      .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)
      .replace(/[()]/g, escape);

      var stringifiedAttributes = '';
      for (var attributeName in attributes) {
        if (!attributes[attributeName]) {
          continue
        }

        stringifiedAttributes += '; ' + attributeName;

        if (attributes[attributeName] === true) {
          continue
        }
        // Considers RFC 6265 section 5.2:
        // ...
        // 3.  If the remaining unparsed-attributes contains a %x3B (";")
        //     character:
        // Consume the characters of the unparsed-attributes up to,
        // not including, the first %x3B (";") character.
        // ...

        stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
      }

      return (document.cookie =
        key + '=' + converter.write(value, key) + stringifiedAttributes)
    }

    function get (key) {
      if (typeof document === 'undefined' || (arguments.length && !key)) {
        return
      }

      // To prevent the for loop in the first place assign an empty array
      // in case there are no cookies at all.
      var cookies = document.cookie ? document.cookie.split('; ') : [];
      var jar = {};
      for (var i = 0; i < cookies.length; i++) {
        var parts = cookies[i].split('=');
        var value = parts.slice(1).join('=');

        try {
          var foundKey = decodeURIComponent(parts[0]);
          jar[foundKey] = converter.read(value, foundKey);

          if (key === foundKey) {
            break
          }
        } catch (e) {}
      }

      return key ? jar[key] : jar
    }

    return Object.create(
      {
        set: set,
        get: get,
        remove: function (key, attributes) {
          set(
            key,
            '',
            assign({}, attributes, {
              expires: -1
            })
          );
        },
        withAttributes: function (attributes) {
          return init(this.converter, assign({}, this.attributes, attributes))
        },
        withConverter: function (converter) {
          return init(assign({}, this.converter, converter), this.attributes)
        }
      },
      {
        attributes: { value: Object.freeze(defaultAttributes) },
        converter: { value: Object.freeze(converter) }
      }
    )
  }

  var api = init(defaultConverter, { path: '/' });
  /* eslint-enable no-var */

  return api;

})));

/*global
    Cookies
 */

window.Utils = window.Utils || {};

/**
 * Utils.cookies exposes a global cookie setter/getter api that currently uses js-cookie
 */
Utils.cookies = (function () {
  'use strict';

  const cookiesObject = (function () {
    const defaultDomain = '.pluralsight.com';
    const defaultPath = '/';
    const defaultDaysToLive = 180;

    // sets the cookie
    const setCookie = function (name, value, domain, path, daysToLive) {
      const settings = {};
      settings.domain = domain || defaultDomain;
      settings.path = path || defaultPath;
      settings.expires = daysToLive || defaultDaysToLive;
      Cookies.set(name, value, settings);
    };

    // gets the value of the named cookie
    const getCookie = function (name) {
      return Cookies.get(name);
    };

    return {
      getCookie: getCookie,
      setCookie: setCookie
    };
  }());

  // prevent the objects from being modified
  Object.freeze(cookiesObject);

  return cookiesObject;
}());

/*global
    jQuery
 */

window.Utils = window.Utils || {};

/**
 * Utils.events exposes a global, safe coupling mechanism for late binding clicks to the body and firing/attaching custom events
 */
Utils.events = (function () {
  'use strict';

  const removeHandlerFromExternalElement = function ($elements, eventName) {
    $elements.off(eventName);
  };

  const addClickHandlerToExternalElement = function ($externalElements, eventName, callback) {
    $externalElements.on(eventName, callback);
  };

  // encapsulates all the body click events capabilities
  const clickBodyObject = (function () {
    const bodyElement = 'body';

    const addClickHandler = function (eventName, callback) {
      addClickHandlerToExternalElement(bodyElement, eventName, callback);
    };

    const removeClickHandler = function (eventName) {
      removeHandlerFromExternalElement(bodyElement, eventName);
    };

    return {
      addClickHandler: addClickHandler,
      removeClickHandler: removeClickHandler
    };
  }());

  // encapsulates all the custom events capabilities
  const customEventsObject = (function () {
    let handlerQueue = [];

    const removeCustomEventHandler = function (targetQuery, eventName) {
      const $target = jQuery(targetQuery);
      handlerQueue = handlerQueue.filter((handler) => {
        let matches = handler.targetQuery === targetQuery && handler.eventName === eventName;
        return !matches;
      });
      removeHandlerFromExternalElement($target, eventName);
    };

    const attemptTriggerCustomEvent = function ($elements, eventName) {
      if (typeof $elements === 'object' && jQuery.prototype.isPrototypeOf($elements)) {
        $elements.trigger(eventName);
      } else {
        console.error('Cannot attemptTriggerCustomEvent() to these elements in the queue... Not a jQuery object...');
      }
    };

    const attachCustomEventHandler = function (targetQuery, eventName, callback) {
      const $target = jQuery(targetQuery);
      if (typeof $target === 'object' && jQuery.prototype.isPrototypeOf($target)) {
        const $targetFirst = $target.first();
        if ($targetFirst.length > 0) {
          removeCustomEventHandler(targetQuery, eventName); // prevents double-attach
          handlerQueue.push({targetQuery: targetQuery, elements: $targetFirst, eventName: eventName});
          addClickHandlerToExternalElement($targetFirst, eventName, callback);
        } else {
          console.error('Cannot attachCustomEventHandler() to the elements... No elements selected...');
        }
      } else {
        console.error('Cannot attachCustomEventHandler() to the elements... Not a jQuery object...');
      }
    };

    const triggerCustomEvent = function (eventName) {
      handlerQueue.map((handler) => {
        if (eventName === handler.eventName) {
          attemptTriggerCustomEvent(handler.elements, handler.eventName);
        }
      });
    };

    return {
      attachCustomEventHandler: attachCustomEventHandler,
      removeCustomEventHandler: removeCustomEventHandler,
      triggerCustomEvent: triggerCustomEvent
    };
  }());

  // prevent the objects from being modified
  Object.freeze(clickBodyObject);
  Object.freeze(customEventsObject);

  return {
    click: clickBodyObject,
    customEvents: customEventsObject
  };
}());

/*global
  jQuery, Utils
 */
(() => {
  'use strict';

  // Finds all <a> links on the page and removes the unwanted /content/pluralsight/en
  const removeRootPaths = function() {
    if (typeof Granite !== 'undefined') {
      return; // don't change links on author
    }

    const $links = jQuery('a');
    $links.each(function() {
      const $link = jQuery(this);
      let adjustedLink = $link.attr('href');
      if (adjustedLink) {
        // TODO need to do for all languages, not just /en
        if (adjustedLink.indexOf('/content/pluralsight/en') > -1) {
          adjustedLink = adjustedLink.replace('/content/pluralsight/en', '');
          adjustedLink = adjustedLink.replace('.html', '');
          adjustedLink = adjustedLink.endsWith('/') ? adjustedLink.substring(0, adjustedLink.length - 1) : adjustedLink;

          // Prevent homepage link having empty url
          if (adjustedLink === '') {
            adjustedLink = '/';
          }

          $link.attr('href', adjustedLink);
        }
      }
    });
  };

  // run on DOM ready from original document load
  jQuery(() => {removeRootPaths();});

  // run if target succeeds
  document.addEventListener('at-content-rendering-succeeded', () => {
    removeRootPaths();
  });

  // run if target fails
  document.addEventListener('at-content-rendering-failed', () => {
    removeRootPaths();
  });

})();

window.Utils = window.Utils || {};

/**
 * Utils.url exposes a global url api
 *
 * Example Usages:
 *  - Utils.url.queryParameters.has('promo');                 // find out if there is a promo parameter
 *  - Utils.url.queryParameters.set('q', 'java');             // set search query to 'java'
 *  - Utils.url.queryParameters.get('roles');                 // get the value of the role facet to load search
 *  - Utils.url.queryParameters.clearAll();                   // remove all query parameters
 *
 *  - Utils.url.hash.has();                                   // true or false if the current URL has a hash
 *  - Utils.url.hash.get();                                   // get the current value of the hash (to open a modal?)
 *  - Utils.url.hash.set('team-trial-modal');                 // set the hash to 'team-trial-modal'
 *
 *  - Utils.url.redirect.to('www.google.com');                // redirect to a new page (must be a fully qualified URL)
 *  - Utils.url.redirect.toWithoutHistory('www.google.com');  // redirect to a new page but don't update browser back/forward history
 */
Utils.url = (function () {
  'use strict';

  /**
   * An encapsulating object for all URL utilities
   */
  const urlObject = (function () {

    /**
     * An encapsulating object for all URL Query Parameter utilities
     */
    const queryParameterObject = (function () {

      /**
       * Private function to simply get all of the current URL's query parameters
       * @returns {null}
       */
      const getAllParameters = function () {
        let allParameters = null;

        if ('URLSearchParams' in window) {
          allParameters = new URLSearchParams(window.location.search);
        } else {
          console.error('Browser is incapable -- unable to get URLSearchParams...');
        }

        return allParameters;
      };

      /**
       * Checks if a param exists on the current url
       * @param paramName String, e.g. "type"
       * @returns {boolean} Boolean, true if
       */
      const hasQueryParameter = function (paramName) {
        let hasIt = false;
        const allParams = getAllParameters();

        if (allParams != null) {
          hasIt = allParams.has(paramName);
        }

        return hasIt;
      };

      /**
       * Gets the value of the url param if it exists on the current url
       * @param paramName String, e.g. "type"
       * @returns {string} String, e.g. "individual"
       */
      const getQueryParameter = function (paramName) {
        let paramValue = "";

        if (hasQueryParameter(paramName)) {
          const allParams = getAllParameters();
          if (allParams != null) {
            paramValue = decodeURI(allParams.get(paramName));
          }
        }

        return paramValue;
      };

      /**
       * Safely sets the value of the url param (replacing any existing params by the same name)
       *  - does not reload the page
       * @param paramName String, e.g. "type"
       * @param paramValue String, e.g. "individual" (careful, removes if empty/null paramValue given)
       * @returns {string} String, resulting URL e.g. "https://www.pluralsight.com/skills/pricing?type=individual"
       */
      const setQueryParameter = function (paramName, paramValue) {
        const allParams = getAllParameters();

        if (allParams != null) {
          if (!paramValue) {
            allParams.delete(paramName);
          } else {
            allParams.set(paramName, encodeURI(paramValue));
          }

          let finalUrl = location.pathname;

          if (!allParams.keys().next().done) {
            finalUrl += '?' + allParams;
          }

          if (hashObject.has()) {
            finalUrl += '#' + hashObject.get();
          }

          window.history.replaceState({}, '', finalUrl);
        }

        return window.location.href;
      };

      /**
       * Clears all of the query parameters
       */
      const clearAllQueryParameters = function () {
        let finalUrl = location.pathname;
        if (hashObject.has()) {
          finalUrl += '#' + hashObject.get();
        }
        window.history.replaceState({}, '', finalUrl);
      };

      return {
        has: hasQueryParameter,
        get: getQueryParameter,
        set: setQueryParameter,
        clearAll: clearAllQueryParameters
      };
    }());

    /**
     * An encapsulating object for all URL Hash Utilities
     */
    const hashObject = (function () {

      /**
       * Check if the current URL has a hash
       * @returns {boolean} Boolean, true if URL hash a hash, otherwise false
       */
      const hasHash = function () {
        return window.location.hash !== '';
      };

      /**
       * Get the current hash
       * @returns {string} String, e.g. "team-trial-modal"
       */
      const getHash = function () {
        let hash = '';

        if (hasHash()) {
          hash = decodeURI(window.location.hash);
          if (hash.startsWith('#')) {
            hash = hash.substring(1, hash.length);
          }
        }

        return hash;
      };

      /**
       * Safely set a hash (replacing any existing hash)
       * @param hashValue {string} String, e.g. "team-trial-modal"
       * @returns {string} String, resulting URL e.g. "https://www.pluralsight.com/pricing/skills#team-trial-modal"
       */
      const setHash = function (hashValue) {
        window.location.hash = encodeURI(hashValue);

        // remove an empty # symbol if hashValue is empty/null/undefined
        if (!hashValue) {
          window.history.pushState("", document.title, window.location.pathname + window.location.search);
        }

        return window.location.href;
      };

      return {
        has: hasHash,
        get: getHash,
        set: setHash
      };
    }());

    /**
     * An encapsulating object for all URL redirection utilities
     */
    const redirectObject = (function () {

      /**
       * Redirect to a new URL
       * @param urlString, String
       */
      const redirectTo = function (urlString) {
        try {
          const url = new URL(urlString);
          window.location.href = url.href;
        } catch (e) {
          console.error('Cannot redirect to the following URL, likely invalid: ' + urlString);
          console.error(e);
        }
      };

      /**
       * Redirect to a new URL but don't add it to the back/forward browser history
       * @param urlString
       */
      const redirectNoHistory = function (urlString) {
        try {
          const url = new URL(urlString);
          window.location.replace(url.href);
        } catch (e) {
          console.error('Cannot replace with the following URL, likely invalid: ' + urlString);
          console.error(e);
        }
      };

      return {
        to: redirectTo,
        toWithoutHistory: redirectNoHistory
      };
    }());

    // prevent the objects from being modified
    Object.freeze(queryParameterObject);
    Object.freeze(hashObject);
    Object.freeze(redirectObject);

    return {
      queryParameters: queryParameterObject,
      hash: hashObject,
      redirect: redirectObject
    };
  }());

  // prevent the objects from being modified
  Object.freeze(urlObject);

  return urlObject;
}());

'use strict';
let desktopStickyCTAs = {
  // selector - string representing a jquery selector of the element that will scroll
  // container - optional - string representing a jquery selector for the container that element will be constrained to (defaults to direct parent element);
  desktopStickyInit(selector, container = '') {
    let $el = jQuery(selector);
    if (!$el) {
      console.log('Returning early from desktopStickyInit. Element not passed in.');
      return;
    }
    $el.each(function () {
      $el.addClass('desktop-sticky');
      jQuery(window).on("scroll", function () {
        let top = jQuery(window).scrollTop();
        let bottom = $el.parents(container).first().height() - $el.height();
        if (top > -1 && top < bottom) {
          $el.css({
            'top': top + 'px'
          });
        }
      });
    });
  },
  ctaBlock: '',
  scrollLimiter: ''
};

(function(){
    var prev_handler = window.onload;
    //initialize any youtube videos other components have dropped into the queue
    window.onload = function(){
        if (prev_handler){
            prev_handler();
        }
        if (typeof psYtVideos != "undefined"
            && typeof psYtVideos.vidConfigs != "undefined"
            && psYtVideos.vidConfigs.length > 0){
            window.ytPlayers = [];
            window.onYouTubeIframeAPIReady = function() {
                var i;
                for (i = 0; i < psYtVideos.vidConfigs.length; i++) {
                    var curplayer = new YT.Player(psYtVideos.vidConfigs[i].videoElId, psYtVideos.vidConfigs[i].videoSettings);
                    ytPlayers.push(curplayer);
                }
            };
            var scriptElement = document.createElement("script");
            scriptElement.src = "https://www.youtube.com/iframe_api";
            var firstScriptElement = document.getElementsByTagName("script")[0];
            firstScriptElement.parentNode.insertBefore(scriptElement, firstScriptElement);
        }
    };
})();
(() => {
  'use strict';

  window.Utils = window.Utils || {};

  window.Utils.activeFeatureFlag = (flag) => {
    const featureFlagsMetaContent = document.head.querySelector(`[name~=featureFlags][content]`);
    const activeFeatureFlags = featureFlagsMetaContent?.content?.split(`|`);
    const result = activeFeatureFlags?.includes(flag?.toLowerCase?.());
    return result === true;
  };

})();
/**
 * Add a DO NOT SELL link to the footer for GDPR regimes (set in Transcend.io)
 */
(() => {
  'use strict';
  const DO_NOT_SELL_MESSAGE = `Do Not Sell or Share My Personal Data`

  const initDoNotSell = () => {
    if (window.airgap?.getRegimes?.()?.has(`California`)) {
      putDoNotSellHtml();
      document.querySelector(`.do-not-sell`).addEventListener(`click`, showConsentManager);
    }
  };

  const putDoNotSellHtml = () => {
    const url = window.location.href;
    let doNotSellHtml = ``;
    let parentSelector = ``;

    if (url.includes(`pluralsight.com`)) {

      if (document.querySelector(`footer#ftr`) || document.querySelector(`#unified-footer-id`)) {
        doNotSellHtml = getPluralsightDoNotSellHtml();
        parentSelector = `.footer-wrapper .footer-policy-link-list`;
      } else {
        doNotSellHtml = getPluralsightMinimalDoNotSellHtml();
        parentSelector = `.checkout-footer-component .footer__copyright p`;
        let parentElement = document.querySelector(parentSelector);
        parentElement.innerHTML = parentElement?.innerHTML + doNotSellHtml;
        return;
      }

    } else if (url.includes(`javascript.com`)) {
      doNotSellHtml = getJsDoNotSellHtml();
      parentSelector = `footer .right-content`;
    } else if (url.includes(`pluralsightone.org`)) {
      doNotSellHtml = getPsOneDoNotSellHtml();
      parentSelector = `.footer .ps1-inline.terms`;
    }

    let parentElement = document.querySelector(parentSelector);
    parentElement.innerHTML = doNotSellHtml + parentElement?.innerHTML;
  };

  const getPluralsightDoNotSellHtml = () => {
    return `<li class="footer-column-list-item" style="margin: 0 0 0 24px;">
              <div class="footer-column-list-item aem-component">
                <a href="#" class="footer-column-list-item-link do-not-sell" data-aa-title="tracking-do-not-sell">${DO_NOT_SELL_MESSAGE}</a>
              </div>
            </li>`;
  };

  const getPluralsightMinimalDoNotSellHtml = () => {
    return `<span class="copyright-divider">|</span>
            <a href="#" class="plain do-not-sell" data-aa-title="tracking-do-not-sell">${DO_NOT_SELL_MESSAGE}</a></p>`;
  };

  const getJsDoNotSellHtml = () => {
    return `<a href="#" class="footer-link do-not-sell" data-aa-title="tracking-do-not-sell">${DO_NOT_SELL_MESSAGE}</a>
            <span class="footer-divider">/</span>`;
  };

  const getPsOneDoNotSellHtml = () => {
    return `<a href="#" class="ps1-link do-not-sell" data-aa-title="tracking-do-not-sell">${DO_NOT_SELL_MESSAGE}</a>`;
  };

  const showConsentManager = (event) => {
    event.preventDefault();
    event.stopPropagation();

    window.transcend?.doNotSell(event);
  };

  document.readyState !== `loading` ? initDoNotSell() : document.addEventListener(`readystatechange`, () => {document.readyState === `complete` && initDoNotSell()});

})();
if (jQuery('.role-iq-content .role-skills').length){
    var $component = jQuery('.role-iq-content .role-skills');
    var $tabs = $component.find('.roleiq-tab');
    jQuery('.roleiq-item').each(function(i, e) {
        var title = jQuery(this).find('.roleiq-tab').clone().contents();
        if (jQuery(this).find($tabs).hasClass('active')) {
            jQuery(this).find('.roleiq-course--overlay').hide().fadeIn('fast');
        };
        jQuery(this).find('.roleiq-course--header').html(title);
    });
    $tabs.click(function(event) {
        event.preventDefault();
        $tabs.not(jQuery(this)).removeClass('active');
        jQuery(this).addClass('active');
        jQuery(this).siblings('.roleiq-course').find('.roleiq-course--overlay').hide().delay(500).fadeIn('fast');
    });
}


(function ($) {
  if (jQuery('body.path-template').length > 0) {

    //Expand and shrink description
    if (jQuery('.path-description #readmore').length) {
      jQuery('.path-description #readmore').click(function (e) {
        e.preventDefault();
        jQuery('.path-description .path-description-end').fadeIn();
        jQuery('.path-description #readmore').hide();
        jQuery('.path-description #readless').show();
      });
      jQuery('.path-description #readless').click(function (e) {
        e.preventDefault();
        jQuery('.path-description .path-description-end').fadeOut();
        jQuery('.path-description #readmore').show();
        jQuery('.path-description #readless').hide();
      });
    }

    // Expand and shrink the difficulty sections
    jQuery('.difficulty-header').on('click', function () {
      let difficultyContainer = jQuery(this).parent('.difficulty-container');
      if (difficultyContainer.hasClass('active')) {
        difficultyContainer.find('.difficulty-content').slideUp(300);
        difficultyContainer.removeClass('active');
      } else {
        difficultyContainer.find('.difficulty-content').slideDown(300);
        difficultyContainer.addClass('active');
      }
    });

    // Show Course Content
    jQuery('.course-box').on('click', function () {
      let courseBlock = jQuery(this).parent('.path-course-block'),
        courseContent = courseBlock.find('.course-content');
      if (jQuery(window).width() > 640) {
        if (courseBlock.hasClass('active')) {
          courseBlock.removeClass('active');
          courseContent.fadeOut(300);
        } else {
          jQuery('.path-course-block').removeClass('active');
          jQuery('.course-content').fadeOut(300);
          courseBlock.addClass('active');
          courseContent.fadeIn(300);
        }
      } else {
        if (courseBlock.hasClass('active')) {
          courseBlock.removeClass('active');
          courseContent.slideUp(300);
        } else {
          jQuery('.path-course-block').removeClass('active');
          jQuery('.course-content').slideUp(300);
          courseBlock.addClass('active');
          courseContent.slideDown(300);
        }
      }
    });

    let graphAnimate = function () {
      let skill_count = 0;
      let skill_percent = 2;
      window.setTimeout(function () {
        let skill_timer = window.setInterval(function () {
          if (skill_count <= 261) {
            document.getElementById('ps_rating_num').innerHTML = skill_count;
            skill_count += 3;
          } else {
            window.clearInterval(skill_timer);
          }
        }, 5);

        let skill_percentile = window.setInterval(function () {
          if (skill_percent <= 76) {
            document.getElementById('ps_graph--percentile').innerHTML = skill_percent + 'th';
            skill_percent += 2;
          } else {
            window.clearInterval(skill_percentile);
          }
        }, 10);
      }, 550);

      window.setTimeout(function () {
        jQuery('.ps_skill--overlay').animate({
          opacity: 1
        }, 1000);
      }, 2000);
    }

    //Listeners to launch graph animation
    jQuery(document).ready(function () {
      let skill_graph = document.getElementById('ps_graph');
      if (skill_graph) {
        if (window.skillGraphLoaded) {
          graphAnimate();
        } else {
          skill_graph.addEventListener('load', function () {
            graphAnimate();
          });
        }
      }
    });

    if (document.URL.indexOf("disableAnimation=true") > -1) {
      jQuery("#ps_graph--rating").hide();
      jQuery(".ps_skill--overlay").hide();
      jQuery("#ps_graph--fill").hide();
      jQuery(".ps_graph--hint").hide();
      jQuery(".ps_graph--fill-top-line").hide();
    }

    // Close button
    jQuery('#testAccessModal .closeButton').on('click', function () {
      parent.$.fancybox.close();
    });

    // Variation 2 - adding a scrollable div when needed
    let findLearnList = jQuery(".paths-aside-scrollable");
    if (findLearnList.height() > 372) {
      findLearnList.addClass("addMaxHeight");
    }

    // kick off sticky CTA for desktop
    desktopStickyCTAs.ctaBlock = '.paths-content-right .try-for-free';
    desktopStickyCTAs.scrollLimiter = '.paths-content-right';
    // desktopStickyCTAs.desktopStickyInit(desktopStickyCTAs.ctaBlock, desktopStickyCTAs.scrollLimiter);

  }
})(this.jQuery);
/*global
  jQuery
 */
jQuery(function () {
  'use strict';

  const $labPageContents = jQuery('.lab-page-content.aem-page');

  $labPageContents.each(function () {
    const $labPageContent = jQuery(this);
    const $labInfoToc = $labPageContent.find(".lab-info--toc");
    const $labTabsLink = $labPageContent.find(".lab-info-tab");

    $labInfoToc.each(function(index) {
      const $this = jQuery(this);
      $this.find(".lab-info--toc-toc").text(index + 1);
    });

    $labTabsLink.on('click', function() {
      let $dataLabTab = jQuery(this).attr('data-lab-tab');
      jQuery(this).addClass('active').siblings().removeClass('active');
      jQuery('#tab-'+ $dataLabTab).addClass('active').siblings().removeClass('active');
      return false;
    });
  });
});

if (jQuery('#hub_video').length) {
    window.psYtVideos = window.psYtVideos || {};
    psYtVideos.vidConfigs = psYtVideos.vidConfigs || [];

    var clipId = jQuery('#hub_video').data('vid-clip-id');
    if(clipId.length) {
        psYtVideos.vidConfigs.push({
            videoElId: 'hub_video',
            videoSettings: {
                videoId: clipId,
                playerVars: {
                    autoplay: 0,
                    controls: 1,
                    cc_load_policy: 0,
                    enablejsapi: 1,
                    iv_load_policy: 3,
                    loop: 0,
                    modestbranding: 1,
                    origin: document.domain,
                    rel: 0,
                    html5: 1
                }
            }
        });
    }
}
/*global
  jQuery
 */
jQuery(function () {
  'use strict';

  const $handsOnLabPageContents = jQuery('.hands-on-lab.aem-page');

  $handsOnLabPageContents.each(function () {
    const $handsOnLabPageContent = jQuery(this);
    const $handsOnLabInfoToc = $handsOnLabPageContent.find(".lab-info--toc");
    const $handsOnLabTabsLink = $handsOnLabPageContent.find(".lab-info-tab");
    const $handsOnLabChallenge = $handsOnLabPageContent.find(".lab-info--desc > p");

    $handsOnLabInfoToc.each(function(index) {
      const $this = jQuery(this);
      $this.find(".lab-info--toc-toc").text(index + 1);
    });

    $handsOnLabTabsLink.on('click', function() {
      let $dataLabTab = jQuery(this).attr('data-lab-tab');
      jQuery(this).addClass('active').siblings().removeClass('active');
      jQuery('#tab-'+ $dataLabTab).addClass('active').siblings().removeClass('active');
      return false;
    });

    $handsOnLabChallenge.each(function() {
      const $this = jQuery(this);
      const pattern = /^[0-9]*\.?[0-9]*$/;
      if ($this.match(pattern)) {
        console.log($this.text("XX"));
      }
    });
  });
});
/*global
  jQuery
 */
(function ($) {
  const $coursePages = jQuery(".course-content-main");
  $coursePages.each(function () {
    let $this = jQuery(this);
    let $stickyCTA = $this.find(".course-content-right.hide-for-large-up .cta-buttons");
    let stickyOffsetMobile = $stickyCTA.offset().top;
    let stickyOffset = $this.find(".course-content-about").offset().top;

    jQuery(".toc-title").on("click", function (e) {
      let $this = jQuery(this);
      $this.next(".toc-content").slideToggle().toggleClass("open");
      $this.parent(".toc-item").toggleClass("open");
      return false;
    });

    function setStickies() {
      let width = jQuery(this).width();
      let windowTop = jQuery(window).scrollTop();
      let navHeight = jQuery('.ps-navigation').height() + jQuery('.ps-navigation').position().top;

      if (width > 1024) {
        $stickyCTA.removeClass("sticky");
      } else {
        if (windowTop + navHeight >= stickyOffsetMobile) {
          $stickyCTA.addClass("sticky");
        } else {
          $stickyCTA.removeClass("sticky");
        }
      }
    }

    function resetPosition() {
      let width = jQuery(this).width();
      if (width <= 1024) {
        stickyOffsetMobile = $stickyCTA.offset().top;
      }
    }

    jQuery(window).on("resize", function () {
      resetPosition();
    });
    jQuery(window).on("load scroll", function () {
      setStickies();
    });
  });

  //setting and triggering from target currently
  desktopStickyCTAs.ctaBlock = '.course-content-right.show-for-large-up .try-for-free';
  desktopStickyCTAs.scrollLimiter = '.course-content-right';
  // desktopStickyCTAs.desktopStickyInit(desktopStickyCTAs.ctaBlock, desktopStickyCTAs.scrollLimiter);
})(this.jQuery);
if (jQuery('#course-page-hero-ytwrapper').length > 0){
	//tracking brought in from DTM since we're taking away its state change listener
	function onCoursePlayerStateChange(event) {
		if (event.data === 0){
			jQuery("#course-page-hero").show();
			jQuery("#course-page-hero-ytwrapper").hide();
		}
	}

    window.psYtVideos = window.psYtVideos || {};
    psYtVideos.vidConfigs = psYtVideos.vidConfigs || [];

	var ytId = jQuery('#course-page-hero-ytwrapper').data('youtubeId');

    psYtVideos.vidConfigs.push({
    	videoElId: "course-page-hero-ytplayer",
		videoSettings: {
			height: '100%',
			width: '100%',
			videoId: ytId,
			playerVars: {
				hd: '1',
				rel: '0',
				autohide: '1',
				modestbranding: '1',
                controls: '0',
                fs: '0',
                cc_load_policy: '0',
				iv_load_policy: '3',
				autohide: '1'
			},
			events: {
				'onStateChange' : onCoursePlayerStateChange
			}
		}
	});

	jQuery("#play-overview-button").click(function(){
		if (window.ytPlayers && window.ytPlayers[0] && window.ytPlayers[0].playVideo){
			jQuery("#course-page-hero").hide();
			jQuery("#course-page-hero-ytwrapper").show();
			ytPlayers[0].playVideo();
		}
	});

	jQuery("#course-overview-player-close").click(function(){
		ytPlayers[0].stopVideo();
		jQuery("#course-page-hero").show();
		jQuery("#course-page-hero-ytwrapper").hide();
	});
}

/*global
  jQuery
 */
jQuery(function () {
    const $browseCourses = jQuery('.brws-paths-courses-wrapper');

    $browseCourses.each(function () {
        const $browseCourse = jQuery(this);
        const $browseContentHighlight = $browseCourse.find('.content-highlight');
        const $browseShowMore = $browseContentHighlight.find('#browseCourseShowMore');

        jQuery('.course-item').hide();
        jQuery('.course-item:lt(6)').show();

        $browseShowMore.on('click', function(e) {
            var $goSearch = e.target.href;
            e.preventDefault();
            jQuery('.course-item').slideDown('fast');
            jQuery(this).find('p').html('Find more courses <i class="fa fa-chevron-right"></i>');
            $browseShowMore.off();
            jQuery(this).attr('href', $goSearch);
        });
    });
});

var noMarginBanner = '<a href=\"https:\/\/www.pluralsight.com\/pricing\" class=\"ps_blog--ad\" data-aa-title=\"blog-trial-promo\">\r\n\t<style type=\"text\/css\">\r\n\t.ps_blog--ad{background:#0e0c0d url(https:\/\/www.pluralsight.com\/content\/dam\/pluralsight2\/target\/blog_ads@2x.jpg) no-repeat center center;background-size:1500px 151px;box-sizing:border-box;color:#fff;display:block;font-size:18px;font-weight:700;hyphens:none;margin:0px;min-height:120px;padding:20px;text-align:center;text-decoration:none;}\r\n\t.ps_blog--ad:hover{color:#fff;text-decoration:none;}\r\n\t@media only screen and (min-width:800px){.ps_blog--ad{margin:0px auto;background-size:1000px 121px;} }\r\n\t.ps_blog--btn{background:#EC008C;background:-moz-linear-gradient(left,#F05A28 0%,#EC008C 100%);background:-webkit-linear-gradient(left,#F05A28 0%,#EC008C 100%);background:linear-gradient(to right #F05A28 0%,#EC008C 100%);border-radius:2px;display:inline-block;font-size:14px;font-weight:500;line-height:40px;margin:15px 0 0 0;padding:0 30px;}\r\n\t<\/style>\r\n\t<div class=\"ps_blog--title\">Learn something new. Take control of your career. <\/div>\r\n\t<div class=\"ps_blog--btn\">Sign up<\/div>\r\n<\/a>';

if (jQuery('body.blog-template').length > 0){
    if (jQuery('.ps_cigar_banner').length > 0){
        jQuery('.ps_cigar_banner').replaceWith(noMarginBanner);
    } else {
        jQuery('.hero-blog-block').after(noMarginBanner);
    }
    jQuery('#marketoForm_1041').closest('.generic-block').replaceWith(noMarginBanner);
}
// GENERAL NOTE: this JS is being used in conjunction with the search-filter-bar
// and search-filter-left components, though this component in particular does not
// require the bar or the filter-left. All searches and params are defined in the
// URL with the exception of the "page" param, which is kept as a data attribute in
// the HTML for sitewide "load more" button consistency functionality. Generally, for
// any changes in the search query, one will first update the URL param accordingly
// and then simply call this script's "searchFromURL" function. For situations where
// this is not an option the "search" function may be used directly, but it is
// recommended to keep the URL as the source of truth whenever possible.
//
// We also point out that any functionality following the search call is divided into
// two separate categories for clarity: data processing (results) and UI updates.
// Generally, one may extend or change the functionalities inside the "processSPData" or
// "updateUIOnSearchComplete" functions without touching the logic in the search
// function callback. However, if this is not sufficient--though again it is still
// the recommended approach--the search function itself can obviously be modified to
// meet business requirements.

if (jQuery("#search-field form").length) {
    var QUERY_PARAM_NAME = "q",
        CATEGORIES_PARAM_NAME = "categories",
        DEFAULT_QUERY = "*",
        DEFAULT_CATEGORIES = "all",
        $form = jQuery("#search-field form"),
        $searchInput = $form.find('input'),
        $results = jQuery('#search-results'),
        $resultsTarget = jQuery("#search-results-target"),
        $resultsTemplate = jQuery("#search-results-handlebars-template"),
        $resultsCategoryTarget = jQuery('#search-results-category-target'),
        $resultsCategoryTemplate = jQuery('#search-results-category-handlebars-template'),
        $searchFilterBlock = jQuery("#search-filter-left"),
        $searchFilterBar = jQuery("#search-filter-bar"),
        $searchLoadingOverlay = jQuery('.search-loading-overlay'),
        queryData = {};

    var searchWord = "",
        searchPage = 0,
        queryID = 0,
        qsid = 0,
        responseCount = 0,
        fixedQuery="",
        responseTime = 0;

    //show advanced search
    jQuery(document).on("keypress", function(e) {
        if (e.ctrlKey && (e.key==="`")){
            jQuery('.advancedsearch').show();
        }
    });

    $form.on("submit", function(event) {
        event.preventDefault();
        grabCludoSettings();
        let searchInputVal = $searchInput.val();

        //DOES SEARCH CONTAIN COLON SYMBOL
        if(searchInputVal.includes(':')) {
            searchInputVal = searchInputVal.replaceAll(':',' ').replaceAll(/\s\s+/g, ' ').trim();  // RegEx: replace all spacing, tabs, new lines etc to one space.
        }

        handleQuickLinks(searchInputVal);
        if(!window.quickLinkHandled){
            if (searchInputVal == ""){ searchInputVal = "*";}

            const updatedUrl = window.location.protocol + "//" + window.location.host + window.location.pathname + "?q=" + encodeURIComponent(searchInputVal) + "&categories=all";
            window.history.pushState({path: updatedUrl}, "", updatedUrl);

            searchFromURL();
        }
    });

    $resultsCategoryTarget.on('click', '#search-results-section-load-more', function(e) {
        e.preventDefault();

        jQuery(this).parents('.search-results-section__load-button').remove();
        searchFromURL(jQuery(this).attr("data-page"));
    });

    function mapTabNameToResultSetName(name) {
        if (Array.isArray(name)) {
          // IFF name is an array just use the first one
          name = name[0];
        }
        switch (name) {
            case 'course':
            case 'cloud-courses':
                return 'courses';
            case 'cloud-paths':
                return 'courses';
            case 'blog':
                return 'blogs';
            case 'resource':
                return 'resources';
            case 'aem-author':
                return 'authors';
            case 'page':
                return 'pages';
            case 'event':
                return 'events';
            case 'lab':
            case 'cloud-labs':
                return 'labs';
            default:
                return name;
        }
    }

    function processCludoResultSet(currentCategory, data) {
        const resultSet = {
            results: data.TypedDocuments
        };
        resultSet.name =  mapTabNameToResultSetName(currentCategory.category);
        resultSet.total = data.TotalDocument;
        return resultSet;
    }

    function processCategoryCludoData(category, page, data, sort, facets) {
        const processedCludoData = {resultsData: {}};
        processedCludoData.resultsData.resultSets = [];
        processedCludoData.resultsData.resultSets[0] = {results: data.TypedDocuments};
        if (category !== 'all') {
            processedCludoData.resultsData.resultSets[0].name = mapTabNameToResultSetName(category);
            processedCludoData.resultsData.resultSets[0].categoryResults = true;
            processedCludoData.resultsData.resultSets[0].total = data.TotalDocument;
            processedCludoData.resultsData.total = data.TotalDocument;
            processedCludoData.resultsData.facets = data.Facets;
            processedCludoData.pagination = { next: ""};
            processedCludoData.pagination.current = parseInt(page);
            if((page * ((category === 'resource' || category === 'aem-author') ? 24 : 25)) < processedCludoData.resultsData.total){
                processedCludoData.pagination.next = parseInt(page) + 1;
            }
            const sortMenu = buildSortMenu(sort);
            processedCludoData.resultsData.sortMenu = sortMenu;
        }

        if(processedCludoData && processedCludoData.resultsData && processedCludoData.resultsData.facets) {
            normalizeFacets(facets, processedCludoData);
        }
        return processedCludoData;
    }

    function normalizeFacets(facets, processedCludoData){
        jQuery.each(processedCludoData.resultsData.facets, function(i, cludoElement) {
            if(cludoElement.Items){
                if(cludoElement.FieldName === "Roles") {
                    cludoElement.dataKey = "roles";
                    if(facets["roles"]){
                        cludoElement.Items.forEach(function(cludoElement) {
                            facets["roles"].forEach(function(element) {
                                if(cludoElement.Key === element){
                                    cludoElement.selected = true;
                                }
                            });
                        });
                    }
                }
                if(cludoElement.FieldName === "Skill Levels") {
                    cludoElement.dataKey = "skillLevels";
                    if(facets["skillLevels"]){
                        cludoElement.Items.forEach(function(cludoElement) {
                            facets["skillLevels"].forEach(function(element) {
                                if(cludoElement.Key === element){
                                    cludoElement.selected = true;
                                }
                            });
                        });
                    }
                }
                if(cludoElement.FieldName === "Content Type") {
                    cludoElement.dataKey = "contentType";
                    if(facets["contentType"]){
                        cludoElement.Items.forEach(function(cludoElement) {
                            facets["contentType"].forEach(function(element) {
                                if(cludoElement.Key === element){
                                    cludoElement.selected = true;
                                }
                            });
                        });
                    }
                }
                if(cludoElement.FieldName === "Post Tags") {
                    cludoElement.dataKey = "postTags";
                    if(facets["postTags"]){
                        cludoElement.Items.forEach(function(cludoElement) {
                            facets["postTags"].forEach(function(element) {
                                if(cludoElement.Key === element){
                                    cludoElement.selected = true;
                                }
                            });
                        });
                    }
                }
                if(cludoElement.FieldName === "event-types") {
                    cludoElement.FieldName = "Event Types";
                    cludoElement.dataKey = "eventType";
                    if(facets["eventType"]){
                        cludoElement.Items.forEach(function(cludoElement) {
                            facets["eventType"].forEach(function(element) {
                                if(cludoElement.Key === element){
                                    cludoElement.selected = true;
                                }
                            });
                        });
                    }
                }
                if(cludoElement.FieldName === "event-regions") {
                    cludoElement.FieldName = "Event Regions";
                    cludoElement.dataKey = "eventRegion";
                    if(facets["eventRegion"]){
                        cludoElement.Items.forEach(function(cludoElement) {
                            facets["eventRegion"].forEach(function(element) {
                                if(cludoElement.Key === element){
                                    cludoElement.selected = true;
                                }
                            });
                        });
                    }
                }
                if(cludoElement.FieldName === "unified-tags") {
                    cludoElement.FieldName = "Topics";
                    cludoElement.dataKey = "topic";
                    if(facets["topic"]){
                        cludoElement.Items.forEach(function(cludoElement) {
                            facets["topic"].forEach(function(element) {
                                if(cludoElement.Key === element){
                                    cludoElement.selected = true;
                                }
                            });
                        });
                    }
                }
                if(cludoElement.FieldName === 'categories') {
                    cludoElement.dataKey = "categories";
                }

            }
        });
    }

    function setSelectedFacets(facets, processedCludoData, facetName){
        facets.forEach(function(element) {
            processedCludoData.resultsData.facets[facetName].Items.forEach(function(cludoElement) {
                if(cludoElement.Key === element){
                    cludoElement.selected = true;
                }
            });
        });
    }

    function updateUIOnCludoSearchComplete(queryValue, category, page, facets, sort, cludoData) {
        $searchInput.val((queryValue === "*" ? "" : queryValue));
        if (cludoData.resultsData.total){
            $results.find('#search-results-total-count').text(
                cludoData.resultsData.total + ' Results');
        }
        let resultsTarget = "";
        let resultsTemplate = "";
        if (category === 'all') {
            resultsTarget = $resultsTarget;
            resultsTemplate = $resultsTemplate;
            jQuery("#content").removeClass("tab-selected");
        } else {
            resultsTarget = $resultsCategoryTarget;
            resultsTemplate = $resultsCategoryTemplate;

            jQuery("#content").addClass("tab-selected");
        }

        if(cludoData.banners && cludoData.banners.length > 0) {
            let html = '';
            cludoData.banners.forEach(function(banner) {
                html += `<div class="banner">${banner.Banner}</div>`;
            });

            $('#cludo-banner').html(html).show();
        }

        const loadNextPage = page > 1;
        $searchFilterBar.trigger("search:complete", [cludoData, category, facets, sort, loadNextPage]);
        $searchFilterBlock.trigger("search:complete", [cludoData, facets]);
        loadSearchTemplate(resultsTarget, cludoData, resultsTemplate, loadNextPage, false);

        if (category === 'all') {
            jQuery(".search-results-section .view-all-link").on('click', function(e) {
                e.preventDefault();

                const category = jQuery(this).attr("data-tab-param");
                changeHistoryQueryParam(CATEGORIES_PARAM_NAME, category, false, false, false);
                searchFromURL();
            });
        }
        dtmEventTrigger('PS.ranSearch',{});
    }

    // BEGIN search functions
    function buildCludoQueryData(qValue, category, facets, page, sort) {
        const facetsSearch = {};
        if (category === "all") {
            facetsSearch["categories"] = ["paths","course","labs","blog","resource","aem-author","event","page"];
        } else if (Array.isArray(category)) {
            facetsSearch["categories"] = category;
        } else {
            facetsSearch["categories"] = [category];
        }
        if (facets) {
            if (facets["roles"]) {
                const roles = [];
                facets["roles"].forEach(function(element) {
                    roles.push(element);
                });
                facetsSearch["roles"] = roles;
            }
            if (facets["skillLevels"]) {
                const levels = [];
                facets["skillLevels"].forEach(function(element) {
                    levels.push(element);
                });
                facetsSearch["Skill Levels"] = levels;
            }
            if (facets["contentType"]) {
                const contentTypes = [];
                facets["contentType"].forEach(function(element) {
                    contentTypes.push(element);
                });
                facetsSearch["content-type"] = contentTypes;
            }
            if (facets["postTags"]) {
                const postTags = [];
                facets["postTags"].forEach(function(element) {
                    postTags.push(element);
                });
                facetsSearch["post-tags"] = postTags;
            }
            if (facets["eventType"]) {
                const eventType = [];
                facets["eventType"].forEach(function(element) {
                    eventType.push(element);
                });
                facetsSearch["event-types"] = eventType;
            }
            if (facets["eventRegion"]) {
                const eventRegion = [];
                facets["eventRegion"].forEach(function(element) {
                    eventRegion.push(element);
                });
                facetsSearch["event-regions"] = eventRegion;
            }
            if (facets["topic"]) {
                const topic = [];
                facets["topic"].forEach(function(element) {
                    topic.push(element);
                });
                facetsSearch["unified-tags"] = topic;
            }
        }

        const body = {
            "ResponseType":"json",
            "query":qValue,
            "facets": facetsSearch,
            "enableFacetFiltering":"true",
            "operator":"and"
        };
        if (page) {
            body.page = page;
            body.perPage = (category === 'resource' || category === 'aem-author') ? 24 : 25;
        }

        if (sort && sort !== "relevance") {
            if (category === 'aem-author') {
                const sortField = {};
                if(sort === "displayDate"){
                    sortField["cludo-date"] = "desc";
                } else if (sort === "title") {
                    sortField["name"] = "asc";
                }
                body.sort = sortField;
            } else if (category === 'resource') {
                const sortField = {};
                if (sort === "displayDate") {
                    sortField["cludo-date"] = "desc";
                } else if (sort === "title") {
                    sortField["hub-title"] = "asc";
                }
                body.sort = sortField;
            } else if (category === 'blog') {
                const sortField = {};
                if (sort === "displayDate") {
                    sortField["cludo-date"] = "desc";
                } else if (sort === "title") {
                    sortField["blog-title"] = "asc";
                }
                body.sort = sortField;
            } else if (category === 'event') {
                const sortField = {};
                if (sort === "displayDate") {
                    sortField["eventDateEnd_date"] = "desc";
                } else if (sort === "title") {
                    sortField["Title"] = "asc";
                }
                body.sort = sortField;
            } else {
                const sortField = {};
                if (sort === "displayDate") {
                    sortField["display-date-formatted"] = "desc";
                } else if (sort === "average_rating") {
                    sortField["rating"] = "desc";
                } else if (sort === "title") {
                    sortField["title"] = "asc";
                }
                body.sort = sortField;
            }
        }

        return body;
    }

    // BEGIN search functions
    function buildAllCludoQueryData(qValue, currentCategory, facets, page, sort) {
        const facetsSearch = {};
        if (Array.isArray(currentCategory.category)) {
            facetsSearch["categories"] = currentCategory.category;
        } else {
            facetsSearch["categories"] = [currentCategory.category];
        }
        if(facets){
            if(facets["roles"]){
                const roles = [];
                facets["roles"].forEach(function(element) {
                    roles.push(element);
                });
                facetsSearch["roles"] = roles;
            }
            if (facets["skillLevels"]) {
                const levels = [];
                facets["skillLevels"].forEach(function(element) {
                    levels.push(element);
                });
                facetsSearch["Skill Levels"] = levels;
            }
            if (facets["contentType"]) {
                const contentTypes = [];
                facets["contentType"].forEach(function(element) {
                    contentTypes.push(element);
                });
                facetsSearch["content-type"] = contentTypes;
            }
            if (facets["postTags"]) {
                const postTags = [];
                facets["postTags"].forEach(function(element) {
                    postTags.push(element);
                });
                facetsSearch["post-tags"] = postTags;
            }
            if (facets["eventType"]) {
                const eventType = [];
                facets["eventType"].forEach(function(element) {
                    eventType.push(element);
                });
                facetsSearch["event-types"] = eventType;
            }
            if (facets["eventRegion"]) {
                const eventRegion = [];
                facets["eventRegion"].forEach(function(element) {
                    eventRegion.push(element);
                });
                facetsSearch["event-regions"] = eventRegion;
            }
            if (facets["topic"]) {
                const topic = [];
                facets["topic"].forEach(function(element) {
                    topic.push(element);
                });
                facetsSearch["unified-tags"] = topic;
            }
        }

        const body = {
            "ResponseType":"json",
            "query":qValue,
            "facets": facetsSearch,
            "enableFacetFiltering":"true",
            "page": 1,
            "perPage": currentCategory.perPage,
            "operator":"and"
        };

        return body;
    }

    function buildSortMenu(sort) {
        const sortMenu = {
            "name": "sort",
            "label": "Sort By",
            "type": "sort",
            "items": [
                {
                    "selected": true,
                    "value": "relevance",
                    "label": "Relevance"
                },
                {
                    "selected": false,
                    "value": "title",
                    "label": "A - Z"
                },
                {
                    "selected": false,
                    "value": "displayDate",
                    "label": "Recency"
                },
                {
                    "selected": false,
                    "value": "average_rating",
                    "label": "Rating"
                }
            ]
        };

        if (sort) {
            for(let i = 0; i < sortMenu.items.length; i++) {
                if (sortMenu.items[i].value === sort) {
                    sortMenu.items[i].selected = true;
                } else {
                    sortMenu.items[i].selected = false;
                }
            }
        }
        return sortMenu;
    }

    function search(queryValue, category, facets, page, sort) {
        if (CludoSearch) {
            if (category === "all") {
                const processedCludoData = {resultsData: { resultSets: []}};
                const allFacets = [
                    {
                        "index":0,
                        "category":["paths","cloud-paths"],
                        "perPage":"8",
                        "complete":false
                    },
                    {
                        "index":1,
                        "category":["course", "cloud-courses"],
                        "perPage":"8",
                        "complete":false
                    },
                    {
                        "index":2,
                        "category":["labs", "cloud-labs"],
                        "perPage":"6",
                        "complete":false
                    },
                    {
                        "index":3,
                        "category":"hands-on learning",
                        "perPage":"6",
                        "complete":false
                    },
                    {
                        "index":4,
                        "category":"blog",
                        "perPage":"4",
                        "complete":false
                    },
                    {
                        "index":5,
                        "category":"resource",
                        "perPage":"3",
                        "complete":false
                    },
                    {
                        "index":6,
                        "category":"aem-author",
                        "perPage":"7",
                        "complete":false
                    },
                    {
                        "index":7,
                        "category":"event",
                        "perPage":"3",
                        "complete":false
                    },
                    {
                        "index":8,
                        "category":["page","generic"],
                        "perPage":"10",
                        "complete":false
                    },
                    {
                        "all":true,
                        "category":["paths","cloud-paths","course","cloud-courses","labs","cloud-labs","hands-on learning","blog","resource","aem-author","event","page","generic"],
                        "perPage":"1",
                        "complete":false
                    }];
                $searchLoadingOverlay.show();
                jQuery('#search-results-target').html("");
                jQuery('#search-results-total-count').html("");

                allFacets.forEach(function(currentCategory) {
                    const cludoQueryData = buildAllCludoQueryData(queryValue, currentCategory, facets);
                    //All category search
                    jQuery.ajax({
                        url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId +'/search',
                        method: "POST",
                        async: true,
                        crossDomain: true,
                        processData: false,
                        data: JSON.stringify(cludoQueryData),
                        headers: {
                            "Content-Type": "application/json; charset=utf-8",
                            "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
                        },
                        success: function (data) {
                            // process data returned
                            if (currentCategory.all) {
                                processedCludoData.resultsData.total = data.TotalDocument;
                                processedCludoData.resultsData.facets = data.Facets;
                                processedCludoData.banners = data.Banners;
                                if (processedCludoData && processedCludoData.resultsData && processedCludoData.resultsData.facets) {
                                    normalizeFacets(facets, processedCludoData);
                                }
                                //From All, we are going to send search query over to cludo.
                                if (queryValue !== searchWord || qsid === "") {
                                    qsid = self.generateUUID();
                                }
                                responseCount = data.TotalDocument;
                                searchWord = queryValue;
                                searchPage = page;
                                queryID = data.QueryId;
                                fixedQuery = data.FixedQuery;
                                responseTime = data.ResponseTime;
                                if (searchWord !== "*") {
                                    //We don't want to track for * searches. These are coming from other links.
                                    doSearchComplete(data);
                                }
                            } else {
                                const resultSet = processCludoResultSet(currentCategory,data);
                                processedCludoData.resultsData.resultSets[currentCategory.index] = resultSet;
                            }
                            currentCategory.complete = true;
                        },
                        error: function (xhr, status, error){
                            //Setting this to true so will complete still. But these won't show because we didn't get a success
                            currentCategory.complete = true;
                            console.log("ajax error: " + status + " - " + error);
                        },
                        complete: function (jqXHR, textStatus) {
                            updateUIOnCludoSearchComplete(queryValue, category, page, facets, sort, processedCludoData);
                            $searchLoadingOverlay.hide();
                        }
                    });
                });

            } else {
                const cludoQueryData = buildCludoQueryData(queryValue, category, facets, page, sort);
                $searchLoadingOverlay.show();
                jQuery('#search-results-target').html("");
                jQuery('#search-results-total-count').html("");
                //Category Search
                jQuery.ajax({
                    url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId +'/search',
                    method: "POST",
                    async: true,
                    crossDomain: true,
                    processData: false,
                    data: JSON.stringify(cludoQueryData),
                    headers: {
                        "Content-Type": "application/json; charset=utf-8",
                        "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
                    },
                    success: function (data) {
                        // process data returned
                        var processedCludoData = processCategoryCludoData(category, page, data, sort, facets);

                        // update UI with processed data
                        updateUIOnCludoSearchComplete(queryValue, category, page,
                            facets, sort, processedCludoData);
                    },
                    error: function (xhr, status, error) {
                        console.log("ajax error: " + status + " - " + error);
                    },
                    complete: function (jqXHR, textStatus) {
                        $searchLoadingOverlay.hide();
                    }
                });

            }
        }
    }

    function generateUUID() {
        let d = new Date().getTime();
        if (window.performance && typeof window.performance.now === "function") {
            d += performance.now();     // use high-precision timer if available
        }
        let uuid = 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            const r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
        });
        return uuid;
    }

    function doSearchComplete(dataResponse) {

        //use current page as refurl unless the header originated the search and sent us this short-lived cookie of the original page URL.
        let refurl = window.location.hostname + "" + window.location.pathname;
        if (typeof Cookies?.get("header_search_origin") != "undefined") {
            refurl = Cookies.get("header_search_origin");
            Cookies.remove("header_search_origin", { path: '/' });
        }
        let refpt = document.title;
        if (typeof Cookies?.get("header_search_origin_title") != "undefined") {
            refpt = Cookies.get("header_search_origin_title");
            Cookies.remove("header_search_origin_title", { path: '/' });
        }


        const data = {
            "ls": "searchresult",
            "sz": screen.width + "x" + screen.height,
            "ua": navigator.userAgent,
            "sw": searchWord,
            "brl": navigator.language,
            "dt": CludoSearch.getDeviceType(),
            "qid": queryID,
            "pn":searchPage,
            "rc": responseCount,
            "fquery": fixedQuery,
            "rt": responseTime,
            "hn": window.location.hostname,
            "qsid": qsid,
            "sid": CludoSearch.getSessionId(),
            "refurl": refurl,
            "refpt": refpt,

            // to purge cache
            "a": new Date().getTime()
        }

        jQuery.ajax({
            url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId +'/search/pushstat/querylog',
            method: "POST",
            async: true,
            crossDomain: true,
            processData: false,
            data: JSON.stringify(data),
            headers: {
                "Content-Type": "application/json",
            },
            success: function (data) {
            },
            error: function (xhr, status, error) {
            }
        });
    }

    // TODO: unused?!?!?
    function doClickResult(url, title){
        const data = {
            "ls": "searchresult",
            "sz": screen.width + "x" + screen.height,
            "ua": navigator.userAgent,
            "sw": searchWord,
            "brl": navigator.language,
            "qid": queryID,
            "pn":searchPage,
            "dt": CludoSearch.getDeviceType(),
            "rc":responseCount,
            "clurl":url,
            "title":title,
            "hn": window.location.hostname,
            "enid": CludoSearch.engineId,
            "qsid": qsid,
            "sid": CludoSearch.getSessionId(),
            // to purge cache
            "a": new Date().getTime()
        }

        jQuery.ajax({
            url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId +'/search/pushstat/clicklog',
            method: "POST",
            async: true,
            crossDomain: true,
            processData: false,
            data: JSON.stringify(data),
            headers: {
                "Content-Type": "application/json",
            },
            success: function (data) { },
            error: function (xhr, status, error) { },
            complete: function (jqXHR, textStatus) { }
        });
    }

    function allComplete(allFacets) {
        let complete = true;
        for (let i = 0; i < allFacets.length; i++) {
            if(!allFacets[i].complete) {
                complete = false;
                break; // short circuit the loop if we know the value
            }
        }

        return complete;
    }

    // Note: this function is specifically for computing search categories in
    // the Pluralsight sense as opposed to "search" in the location.search
    // sense. In other words, this function does NOT parse query params
    // in general.
    function getSearchParamsFromURL() {
        const searchParams = {};
        searchParams.facets = {};
        searchParams.query = DEFAULT_QUERY;
        searchParams.categories = DEFAULT_CATEGORIES;
        searchParams.sort = "";

        function stringIsFacetName(string) {
            const FACET_PARAM_NAMES = ["roles", "skillLevels", "contentType", "postTags", "eventType","eventRegion","topic"];
            return jQuery.inArray(string, FACET_PARAM_NAMES);
        }

        const params = new URLSearchParams(location.search);
        params.forEach((value, key) => {
            if (key.includes("__proto__")) return; // prototype pollution protection
            switch (key) {
                case QUERY_PARAM_NAME:
                    searchParams.query = value;
                    break;
                case CATEGORIES_PARAM_NAME:
                    searchParams.categories = value === 'all' ? 'all' : value.split(',');
                    break;
                case "sort":
                    searchParams.sort = value;
                    break;
                default:
                    if (stringIsFacetName(key) > -1) {
                        if (typeof value == "string") {
                            searchParams.facets[key] = value.split("|");
                        }
                    }
            }
        });

        return searchParams;
    }

    // Note: "page" is the only param not defined in the URL. See class notes above
    // for details.
    window.searchFromURL = function(page) {
        if (page === undefined) {
            page = 1;
        }

        const searchParams = getSearchParamsFromURL();
        search(searchParams.query, searchParams.categories, searchParams.facets, page, searchParams.sort);
    }

    jQuery(window).ready(function(e) {
        window.searchFromURL();
    });
}

if (jQuery("#search-filter-left").length) {
    var $filterLeftComp = jQuery("#search-filter-left"),
        $filtersTarget = $filterLeftComp.find('#search-filter-left-target'),
        $filtersTemplate = $filterLeftComp.find('#search-filter-sections__handlebars-template');

    $filterLeftComp.on('click', '.search-filter-header a', function(e) {
        e.preventDefault();
        var $clicked = jQuery(this);
        if($clicked.hasClass('open')){
            // collapse filter section
            $clicked.parent().siblings('.search-filter-options').slideUp(400, function() {
                $clicked.removeClass('open');
            });
        } else {
            // expand filter section
            $clicked.parent().siblings('.search-filter-options').slideDown(400, function() {
                $clicked.addClass('open');
            });
        }
    });

    // removing a filter
    $filterLeftComp.on('click', '.search-filter-selected-option-remove', function(e) {
        e.preventDefault();
        var $parent = jQuery(this).parent();
        var facetName = $parent.attr("data-label"); // note: label and facetName are the same thing here
        var valueToRemove = $parent.attr("data-value");

        var currentFacetValue = getParameterByName(facetName);
        var newFacetValue = removeFacetParamFromString(valueToRemove, currentFacetValue);

        changeHistoryQueryParam(facetName,
            newFacetValue, (newFacetValue === ''), false, false);

        window.searchFromURL();

        function removeFacetParamFromString(valueToRemove, currentFacetString) {
            if (currentFacetString.indexOf(valueToRemove) == 0) {
                return currentFacetString.replace(new RegExp(valueToRemove.replace('+','\\+') + "\\|?"), "");
            }
            return currentFacetString.replace(new RegExp("\\|?" + valueToRemove.replace('+','\\+')), "");
        }
    });

    // selecting a filter
    $filterLeftComp.on('click', '.search-filter-options a', function(e){
        e.preventDefault();
        var facetName = jQuery(this).attr("data-label");
        var valueToAdd = jQuery(this).attr("data-value");
        var currentFacetValue = getParameterByName(facetName);
        var newFacetValue = (currentFacetValue === "" ? "" : currentFacetValue + "|") + valueToAdd;

        changeHistoryQueryParam(facetName, newFacetValue, false, false, false);

        window.searchFromURL();
    });

    $filterLeftComp.on('search:complete', function(e, eventData) {
        loadSearchTemplate($filtersTarget, eventData.resultsData, $filtersTemplate, false, undefined);
        $filterLeftComp.find('.search-filter-options a.selected').each(function (index, element) {
            setFacetActive(jQuery(element));
        });
        if (document.URL.indexOf("categories=blog") > -1){
            jQuery("#search-filter-left .search-filter-options li a[data-label='contentType']").closest(".search-filter-section").hide();
        }
        if (document.URL.indexOf("categories=event") > -1){
            jQuery("#search-filter-left .search-filter-options li a[data-label='contentType']").closest(".search-filter-section").hide();
        }
        if (document.URL.indexOf("categories=all") > -1  || document.URL.indexOf("categories=") < 0){
            jQuery("#search-filter-left .search-filter-options li a[data-label='contentType']").closest(".search-filter-section").hide();
            jQuery("#search-filter-left .search-filter-options li a[data-label='postTags']").closest(".search-filter-section").hide();
            jQuery("#search-filter-left .search-filter-options li a[data-label='eventTypes']").closest(".search-filter-section").hide();
            jQuery("#search-filter-left .search-filter-options li a[data-label='eventRegions']").closest(".search-filter-section").hide();
        }
        // hide underpopulated/undesirable roles
        jQuery("#search-filter-left .search-filter-options li a[data-label='roles'][data-value='aec']").closest('li').hide(); // only 1 result currently, and not high value customer type
        jQuery("#search-filter-left .search-filter-options li a[data-label='roles'][data-value='software-developer']").closest('li').hide();  // only 6 results currently, and duplicative of "software-development"
        jQuery("#search-filter-left .search-filter-options li a[data-label='roles'][data-value='web-development']").closest('li').hide();  // only 1 result currently, and duplicative of "software-development"
        jQuery("#search-filter-left .search-filter-options li a[data-label='roles'][data-value='manufacturing-design']").closest('li').hide(); // only 2 results currently, and not high value customer type

        // remove broken skill level
        jQuery("#search-filter-left .search-filter-options li a[data-label='skillLevels'][data-value='Beginner|Intermediate|Advanced']").closest('li').hide();
    });

    function setFacetActive($clickedFacet) {
        var $selectedFacet = $clickedFacet.parents('.search-filter-section')
            .find('.search-filter-selected-option').eq(0);
        if($selectedFacet.find('.search-filter-selected-text').text() !== '') {
            var $selectedFacetParent = $selectedFacet.parent();
            $selectedFacet = $selectedFacet.clone();
            $selectedFacetParent.append($selectedFacet);
        }

        var facetText = $clickedFacet.find('.search-filter-option-text').text();
        $selectedFacet.find('.search-filter-selected-text').text(facetText);

        if(!$selectedFacet.hasClass('active')) {
            $selectedFacet.addClass('active');
        }

        $selectedFacet.attr('data-label', $clickedFacet.data('label'));
        $selectedFacet.attr('data-value', $clickedFacet.data('value'));
    }
}

if (jQuery("#search-filter-bar").length) {
    var $filterBar = jQuery("#search-filter-bar"),
        $searchSortTarget = $filterBar.find("#search-sort"),
        $searchSortTemplate = $filterBar.find("#search-sort__handlebars-template"),
        $searchPageStart = $filterBar.find("#search-page-start"),
        $searchPageEnd = $filterBar.find('#search-page-end'),
        $searchResultsTotal = $filterBar.find('.search-results-total'),
        $searchResultsSectionTitle = jQuery('.search-results-section h4'),
        $mobileSearchTabsDropdown = jQuery('#search-filter-tabs-select');


    $filterBar.on('search:complete', function(e, eventData, category,
            facets, sort, loadNextPage) {
        updateFilterBarUI(eventData, category, facets, sort, loadNextPage);
    });

    $searchSortTarget.on('change', function() {
        changeHistoryQueryParam("sort",
            jQuery(this).val(), false, false);
        window.searchFromURL();
    });

    $filterBar.on('click', '#search-filter-tabs a', function(e, pushHistoryState) {
        e.preventDefault();
        clearFacetsSortParam();
        changeHistoryQueryParam("categories",
            jQuery(this).attr("data-categories").split(','), false, false);
        window.searchFromURL();
    });

    $mobileSearchTabsDropdown.on('change', function() {
        changeHistoryQueryParam("categories",
            jQuery(this).val().split(','), false, false);
        window.searchFromURL();
    });

    jQuery(window).on('popstate', function() {
        window.searchFromURL();
    });

    function clearFacetsSortParam(){
        var qParamsEncoded = (window.location.search == "" ? "?" : window.location.search);
        if(qParamsEncoded !== "?"){
            var FACET_PARAM_NAMES = ["roles", "skillLevels", "contentType", "postTags","eventType","eventRegion","topic"];
            //Check to remove all facets first.
            FACET_PARAM_NAMES.forEach(function(element) {
                qParamsEncoded = removeQueryParam(element, qParamsEncoded);
            });
            //Remove sort param next.
            qParamsEncoded = removeQueryParam("sort",qParamsEncoded);

            var updatedUrl = window.location.protocol + "//" + window.location.host +
                        window.location.pathname + qParamsEncoded;
            window.history.replaceState({}, document.title, updatedUrl);
        }
    }

    function removeQueryParam(name, qParamsEncoded) {
        var re = new RegExp("&?"+name+"=[^&]*","g");
        return qParamsEncoded.replace(re, "");
    }


    function updateFilterBarUI(eventData, category, facets, sort, loadNextPage) {
        var categoryValue = category !== 'all' ? category.join(',') : 'all'
        var $tabToSelect = jQuery("#content #search-filter-tabs .tab-title " +
            "[data-categories='" + categoryValue + "']");
        var $tabToSelectParent = $tabToSelect.parent();
        if (!$tabToSelectParent.hasClass('ui-tabs-active')) {
            $tabToSelectParent.siblings().removeClass('ui-tabs-active');
            $tabToSelectParent.addClass('ui-tabs-active');
        }
        if ($mobileSearchTabsDropdown.length) {
            $mobileSearchTabsDropdown.val(categoryValue);
        }

        if (category !== 'all') {
            var data = eventData.resultsData;
            if (undefined === loadNextPage) {
                loadNextPage = false;
            }
            loadSearchTemplate($searchSortTarget, data.sortMenu, $searchSortTemplate, false, function(){
                if (!category.includes('course')){
                    jQuery("#search-filter-bar #search-sort option[value='average_rating']").hide();
                }
            });

            $searchResultsTotal.text(data.total);
            $searchResultsSectionTitle.text(mapTabNameToResultSetName(category));
        }
    }
}

if (jQuery('.news-table-container').length) {
    var $component = jQuery('.news-table-container');
    $component.on('click', 'a.news-table-see-more', function(e){
        e.preventDefault();

        var pageLength = 9,
            nextRows = jQuery('.news-table-container').find('.news-card.hide:lt(' + pageLength + ')');

        nextRows.slideDown(400, function(){
            if (nextRows.length < pageLength) {
                jQuery(this).hide();
            }
        }).removeClass('hide');
    });

    $component.on('click', 'a.news-table-back-to-top', function(e){
        e.preventDefault();

        jQuery('html,body').animate({
            scrollTop: 0
        }, 700);
    });
}
if (jQuery(".news-archive-container").length) {
    var $component = jQuery(".news-archive-container");
    var $newsCards = jQuery("[data-newsroom-date]");
    var $yearLinksContainer = $component.find(".news-archive-links");
    var cardYearArr = [];

    jQuery.each( $newsCards, function( key, value ) {
        var newsCardYear = jQuery(value).data("newsroom-date");

        if(newsCardYear != undefined && jQuery.inArray(newsCardYear, cardYearArr) === -1) {
            cardYearArr.push(newsCardYear);
        }
    });
    
    cardYearArr = cardYearArr.sort(function(a, b){return a-b}); // sort ascending, but prepend below flips order

    jQuery.each( cardYearArr, function( key, value ) {
        var year = value,
            yearHtml = '<li><a href="#" data-show-newsroom-date="' + year + '">' + year + "</a></li>";
        
        $yearLinksContainer.prepend(yearHtml);
    });

    $component.on('click', '[data-show-newsroom-date]', function(e){
        e.preventDefault();

        var year = jQuery(this).data('show-newsroom-date');

        if (year === "all") {
            $newsCards.show().removeClass('hide');
        } else {
            $newsCards.hide();
            jQuery("[data-newsroom-date=" + year + "]").show().removeClass('hide');
        }

        jQuery(".news-archive-hide-button").hide();
    });

    jQuery(".news-archive-container").on('click', '.news-archive-title, .news-archive-dd', function(e){
        e.preventDefault();
        
        var $thisComponent = jQuery(".news-archive-container");
            $yearLinks =  $thisComponent.find(".news-archive-links"),
            $dd =  $thisComponent.find(".news-archive-dd"),
            UP_TRIANGLE = "&#9650;",
            DOWN_TRIANGLE = "&#9660;";

        $yearLinks.slideToggle(400);

        if ($thisComponent.hasClass("news-archive-dd-expanded")) {
            $thisComponent.toggleClass("news-archive-dd-expanded");
            $dd.html(DOWN_TRIANGLE);
        } else {
            $thisComponent.toggleClass("news-archive-dd-expanded");
            $dd.html(UP_TRIANGLE);
        }
    });   
}
if (jQuery(".awards-table-component").length) {
    var $component = jQuery(".awards-table-component");
    $component.on('click', 'a.awards-table-see-more', function(e){
        e.preventDefault();

        var pageLength = 6,
            nextRows = $component.find('.awards-row.hide:lt(' + pageLength + ')');

        nextRows.slideDown(400, function(){
            if (nextRows.length < pageLength) {
                jQuery(this).hide();
            }
        }).removeClass('hide');
    });

    $component.on('click', 'a.awards-table-back-to-top', function(e){
        e.preventDefault();

        jQuery('html,body').animate({
            scrollTop: 0
        }, 700);
    });
}
/*global
  jQuery, Utils
 */
// iife to set up component during page load
(() => {
  'use strict';

  const init = () => {
    const $globalNav = jQuery('.ps-navigation');

    $globalNav.each(function () {
      let $nav = jQuery(this),
        $psNav = $nav.find(".ps-navigation-universal"),
        $psNavMenuLink = $nav.find(".menu-link .menu-a"),
        $psNavMenuDropdownPanel = $nav.find(".menu-dropdown-panel"),
        $psNavMobileHamburger = $psNav.find(".ps-nav-mobile button"),
        $skipContent = jQuery("#skipContent"),
        resizeIsDone,
        mobileExpanded = false,
        isMobile = false,
        desktopBreakpoint = 1025,

        //Search
        $searchForm = jQuery("#header_searchForm"),
        $headerNav = $searchForm.parents(".ps-navigation-universal"),
        $searchWrapper = $headerNav.find(".header_nav_search"),
        $searchPopout = $headerNav.closest(".menu-dropdown-panel"),
        $searchInput = $searchForm.find(".header_search--input"),
        searchTerm = "",
        $searchCloseButton = $searchForm.find(".closebutton"),
        $resultsTarget = $searchForm.parents('.search-button__component').parent('.header_nav_search').siblings('.header_tabs_content--container').find('#header_dropdown--resultList'),
        $resultsTargetCourses = $searchForm.parents('.search-button__component').parent('.header_nav_search').siblings('.header_tabs_content--container').find('#header_dropdown--resultListCourses'),
        $resultsTargetPaths = $searchForm.parents('.search-button__component').parent('.header_nav_search').siblings('.header_tabs_content--container').find('#header_dropdown--resultListPaths'),
        minChars = 3,
        searchOpen = false,
        timer = null;


      /************
       SEARCH
       ***********/
      function searchTermKeyUpHandler(e) {
        if (e.which === '27') {//escape
          e.preventDefault();
          hideSearchResultPopup();
        } else if (e.which === '40') {// down
          e.preventDefault();
          selectTerm();
        } else if (e.which === '38') {//up
          e.preventDefault();
          selectTerm(true);
        } else if (e.which === '13') {//enter - use highlighted option if available, otherwise use search text

        } else {
          if (timer) {
            clearTimeout(timer); // clear the timer as keys are still entered
          }

          if ($searchInput) {
            searchTerm = $searchInput.val().trim();
          }

          //DOES SEARCH CONTAIN COLON SYMBOL
          if(searchTerm.includes(':')) {
            searchTerm = searchTerm.replaceAll(':',' ').replaceAll(/\s\s+/g, ' ').trim();  // RegEx: replace all spacing, tabs, new lines etc to one space.
          }

          timer = setTimeout(function () {
            if (searchTerm !== undefined) {
              let term = jQuery.trim(searchTerm);
              if (term.length >= minChars) {
                search();
              } else if (term.length < minChars) {
                clearResults();
              }
            }
          }, 350);
        }

        //watch for users clicking on suggested search term - still need to pass referring page to Cludo.
        jQuery(document).off('click.psUnifiedNav');
        jQuery(document).on('click.psUnifiedNav', '.header_dropdown--resultInfo a', function() {
            let refurl = window.location.hostname + "" + window.location.pathname;
            Cookies.set("header_search_origin", refurl, { expires: 1, path: '/' }); //save current page URL to send in with search analytics on the search page.
            Cookies.set("header_search_origin_title", pageTitle, { expires: 1, path: '/' }); //save current page URL to send in with search analytics on the search page.
          }
        );

        function selectTerm(prev) {
          let $selectedTerm = jQuery('.nav-search-result .header_dropdown--resultInfo.selected');
          if ($selectedTerm.length) {
            let $selectedTermSibling = (prev ? $selectedTerm.prev() :$selectedTerm.next());

            if ($selectedTermSibling.length) {
              $selectedTerm.removeClass('selected');
              $selectedTermSibling.addClass('selected');
            }
          } else {
            if (prev) {
              $resultsTarget.find('.header_dropdown--resultInfo').last().addClass('selected');
            } else {
              $resultsTarget.find('.header_dropdown--resultInfo').first().addClass('selected');
            }
          }
        }
      }

      function searchTermKeyDownHandler(e) { //stop jitters from happening
        if (e.which === '40') {// down
          e.preventDefault();
        } else if (e.which === '38') {//up
          e.preventDefault();
        }
      }

      function handleSearch() {
        let $selectedTermAnchor = $resultsTarget.find('.header_dropdown--resultInfo.selected a');
        if ($selectedTermAnchor.length) {
          $selectedTermAnchor[0].click();
        } else {
          let refurl = window.location.hostname + "" + window.location.pathname;
          Cookies.set("header_search_origin", refurl, {expires: 1, path: '/'}); //save current page URL to send in with search analytics on the search page.
          let refpt = document.title;
          Cookies.set("header_search_origin", refpt, {expires: 1, path: '/'}); //save current page URL to send in with search analytics on the search page.

          searchTerm = $searchInput.val().trim();
          grabCludoSettings();
          handleQuickLinks(searchTerm);
          if (!window.quickLinkHandled) {
            let encodedSearchTerm = encodeURIComponent(searchTerm);
            if (searchTerm === "") {
              encodedSearchTerm = "*";
            }
            window.location.href = $headerNav.find(".header_search--url").attr('href') + "?q=" + encodedSearchTerm;
          }
        }
      }

      function clearResults() {
        $resultsTarget.html("");
        $resultsTargetCourses.html("");
        $resultsTargetPaths.html("");
      }

      function showSearchResultPopup() {
        if (!searchOpen) {
          $searchPopout.fadeIn(300);
          $searchInput.focus();
          searchOpen = true;
          window.scrollTo(0, 0);
        }
      }

      function hideSearchResultPopup() {
        if (searchOpen) {
          $searchPopout.fadeOut(300);
          clearResults();
          $searchInput.val("");
          searchOpen = false;
        }
      }

      function search() {
        let spaceRegEx = new RegExp('\ ', 'g');
        //Auto Complete
        jQuery.ajax({
          url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId + '/Autocomplete?text=' + searchTerm.replace(spaceRegEx, "-"),
          method: "GET",
          async: true,
          crossDomain: true,
          headers: {
            "Content-Type": "application/json; charset=utf-8",
            "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
          },
          success: function (data) {
            // data[0] is the first word result
            if (data.length > 0) {
              renderSuggestionResults($resultsTarget, data);
            } else {
              clearResults();
            }
          },
          error: function (xhr, status, error) {
          }
        });

        if (CludoSearch) {
          let courseFacet = {};
          courseFacet["categories"] = ["course"];

          let pathsFacet = {};
          pathsFacet["categories"] = ["paths"];


          let courseBody = {
            "ResponseType": "json",
            "query": searchTerm,
            "facets": courseFacet,
            "enableFacetFiltering": "true",
            "page": "1",
            "perPage": "8"
          };

          let pathsBody = {
            "ResponseType": "json",
            "query": searchTerm,
            "facets": pathsFacet,
            "enableFacetFiltering": "true",
            "page": "1",
            "perPage": "8"
          };

          //Courses Search
          jQuery.ajax({
            url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId + '/search',
            method: "POST",
            async: true,
            crossDomain: true,
            processData: false,
            data: JSON.stringify(courseBody),
            headers: {
              "Content-Type": "application/json; charset=utf-8",
              "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
            },
            success: function (data) {
              if (data.TypedDocuments && data.TypedDocuments.length > 0) {
                renderResultsCourse($resultsTargetCourses, data);
              }
            },
            error: function (xhr, status, error) {
              console.log("ajax error: " + status + " - " + error);
            }
          });
          //Paths Search
          jQuery.ajax({
            url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId + '/search',
            method: "POST",
            async: true,
            crossDomain: true,
            processData: false,
            data: JSON.stringify(pathsBody),
            headers: {
              "Content-Type": "application/json; charset=utf-8",
              "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
            },
            success: function (data) {
              if (data.TypedDocuments && data.TypedDocuments.length > 0) {
                renderResultsPaths($resultsTargetPaths, data);
              }
            },
            error: function (xhr, status, error) {
              console.log("ajax error: " + status + " - " + error);
            }
          });
        }

        function renderSuggestionResults($resultsTarget, data) {
          let html = '<ul class="header_dropdown--lists">';
          let searchUrl = $headerNav.find(".header_search--url").attr('href');
          let dashRegEx = new RegExp('\-', 'g');
          for (let i = 0; i < data.length && i < 5; i++) {
            html += '<li class="header_dropdown--resultInfo">';
            html += '<a class="header_dropdown--resultInfoTitle" href="' + searchUrl + '?q=' + data[i].replace(dashRegEx, "%20") + '">' + data[i].replace(dashRegEx, " ") + '</a>';
            html += '</li>';
          }
          html += '</ul>';
          $resultsTarget.html(html);
        }

        function renderResultsCourse(targetElement, data) {
          let html = '<ul class="header_dropdown--lists">';
          html += '<li class="first li-list">Courses</li>';
          for (let i = 0; i < data.TypedDocuments.length; i++) {
            let course = data.TypedDocuments[i];
            html += '<li class="header_dropdown--resultInfo">';
            html += '<a href="https://www.pluralsight.com/courses/' + course.Fields.courseName.Value + '">' + course.Fields.Title.Value + '</a>';
            html += '</li>';
          }
          html += '<li class="last li-list"><a href="https://www.pluralsight.com/search?categories=course&q=' + encodeURI(searchTerm) + '">See more results</a></li>';
          html += '</ul>';
          targetElement.html(html);
        }

        function renderResultsPaths(targetElement, data) {
          let html = '<ul class="header_dropdown--lists">';

          if (data.Banners && data.Banners.length > 0) {
            let bannerHtml = '<div class="banners">';
            data.Banners.forEach(function (banner) {
              let markup = `<div class="banner">${banner.Banner}</div>`;
              bannerHtml += markup;
            });
            bannerHtml += `</div>`;
            html = bannerHtml + html;
          }

          html += '<li class="first li-list">Paths</li>';

          for (let i = 0; i < data.TypedDocuments.length; i++) {
            let path = data.TypedDocuments[i];
            html += '<li class="header_dropdown--resultInfo"><div class="item">';
            html += '<a href="https://www.pluralsight.com/paths/' + path.Fields.urlSlug.Value + '">';
            html += '<div class="item-each">';
            html += '<div class="item-image"><img src="' + path.Fields.thumbnail.Value + '"' + ' alt="' + path.Fields.Title.Value + '" /></div>';
            html += '<div class="item-text">' + path.Fields.Title.Value;
            html += '<ul>';
            html += '<li>' + '<span>' + path.Fields.numberOfCourses.Value + '</span>' + ' Courses' + '</li>';
            html += '<li>' + '<span>' + path.Fields.numberOfHours.Value + '</span>' + ' Hours' + '</li>';
            html += '</ul>';
            html += '</div>';
            html += '</div>';
            html += '</a>';
            html += '</div></li>';
          }
          html += '<li class="last li-list"><a href="https://www.pluralsight.com/product/paths">View all paths</a></li>';
          html += '</ul>';
          targetElement.html(html);
        }
      }


      /************
       SEARCH EVENTS
       ************/
      $searchInput.off('keyup.psUnifiedNav');
      $searchInput.on('keyup.psUnifiedNav', function (e) {
        searchTermKeyUpHandler(e);
      });
      $searchInput.off('keydown.psUnifiedNav');
      $searchInput.on('keyup.psUnifiedNav', function (e) {
        searchTermKeyDownHandler(e);
      });
      $searchForm.submit(function (event) {
        event.stopPropagation();
        event.preventDefault();
        handleSearch();
      });
      $searchWrapper.off('click.psUnifiedNav');
      $searchWrapper.on('click.psUnifiedNav', function (e) {
        if (jQuery(e.target).parents("#header_tabs--search").length == 0
          && jQuery(e.target).parents("#header_searchForm").length == 0) {
          hideSearchResultPopup();
        }
      });

      if (document.URL.indexOf("www.pluralsight.com") > -1 || document.URL.indexOf("beta.www.pluralsight.com") > -1 || document.URL.indexOf("www-stage.pluralsight.com") > -1 || document.URL.indexOf("beta.www-stage.pluralsight.com") > -1) {
        jQuery(".ps-nav--search a.header_search--url").attr("href", "/search"); //This sometimes changes this to an absolute link to http (which gets redirected and breaks the query) and cause is unknown.
      }

      let pageTitle = document.title; //grab early since chat bot likes to change this.

      //header search popup
      jQuery(".search-button__component .header_search--form").off('focus.psUnifiedNav input.psUnifiedNav');
      jQuery(".search-button__component .header_search--form").on('focus.psUnifiedNav input.psUnifiedNav', function (e) {
        e.preventDefault();
        let inputValue = jQuery(".header_search--input").val().trim();
        if (inputValue.length >= 3) {
          // show popout
          jQuery(".ps-navigation-universal .ps-nav-search  #header_tabs--search").css("height", "auto");
          showSearchResultPopup();
        } else if (inputValue.length === 0) {
          jQuery(".ps-navigation-universal .ps-nav-search #header_tabs--search").css("height", "");
          hideSearchResultPopup();
        }
      });

      /************
       FUNCTIONS
       ***********/
      function closeSearchButton() {
        hideSearchResultPopup();
        $searchInput.focus();
      }

      function closeMobileMenu() {
        mobileExpanded = false;
        jQuery(".menu-link.open").removeClass("open");
        jQuery(".menu-dropdown-panel").slideUp(500);
        jQuery(".ps-navigation-universal").removeClass("open");
        closeSearchButton();
      }

      function openMobileMenu() {
        mobileExpanded = true;
        jQuery(this).parents(".ps-navigation-universal").addClass("open");
      }

      function mobileNav() {
        let $this = jQuery(this);
        let isMegaNavMobile = $this.parents(".ps-navigation-mega").hasClass("mobile-only");
        if (isMegaNavMobile) {
          let megaId = $this.data("accordion");
          $this.parent(".menu-link").toggleClass("open");
          jQuery(".menu-link .menu-a").not(this).parent().removeClass("open").children(".menu-a").attr("aria-expanded", false);
          jQuery('#' + megaId).slideToggle(500);
          jQuery(".menu-dropdown-panel").not(jQuery('#' + megaId)).slideUp(500);
        } else {
          $this.siblings(".menu-dropdown-panel").slideToggle();
          $this.parent(".menu-link").toggleClass("open");
        }
        if ($this.parent(".menu-link").hasClass("open")) {
          $this.attr("aria-expanded", true);
        } else {
          $this.attr("aria-expanded", false);
        }
      }

      function desktopNav() {
        let $this = jQuery(this);
        let isSearch = jQuery(this).parent().hasClass("ps-nav-search");
        $this.parent(".menu-link").toggleClass("open");
        jQuery(".menu-link.open .menu-a").not(this).parent().removeClass("open").children(".menu-a").attr("aria-expanded", false);
        if ($this.parent(".menu-link").hasClass("open")) {
          $this.attr("aria-expanded", true);
          if (isSearch) {
            setTimeout(function () {
              $searchInput.focus();
            }, 300);
          }
        } else {
          $this.attr("aria-expanded", false);
          $searchInput.blur();
        }
      }

      function resetNav() {
        $psNavMenuLink.parent().removeClass("open");
        $psNav.removeClass("open");
        $psNavMenuDropdownPanel.removeAttr("style");
        hideSearchResultPopup();
      }

      function doTransition() {
        let currentWindowSize = jQuery(window).innerWidth() < desktopBreakpoint;
        let viewPortChanged = currentWindowSize !== isMobile;
        isMobile = currentWindowSize;
        if (viewPortChanged) {
          resetNav();
          if (isMobile) {
            mobileExpanded = false;
            mobileNav.call(this);
          }
          if (!isMobile) {
            desktopNav.call(this);
          }
        }
      }

      /******************
       EVENTS
       *****************/
      // event handler for mobile hamburger menu
      $psNavMobileHamburger.off("click.psUnifiedNav");
      $psNavMobileHamburger.on("click.psUnifiedNav", function () {
        if (mobileExpanded) {
          closeMobileMenu.call(this);
        } else {
          openMobileMenu.call(this);
        }
        return false;
      });

      // event handler for drop down menu buttons/links
      $psNavMenuLink.off("click.psUnifiedNav");
      $psNavMenuLink.on("click.psUnifiedNav", function (e) {
        isMobile = jQuery(window).innerWidth() < desktopBreakpoint;
        if (isMobile) {
          mobileNav.call(this);
        } else {
          desktopNav.call(this);
        }
        return false;
      });

      // event handler for closing search button
      $searchCloseButton.off("click.psUnifiedNav");
      $searchCloseButton.on("click.psUnifiedNav", function () {
        closeSearchButton();
        return false;
      });

      // event handler for skip Content for ADA
      $skipContent.off("keydown.psUnifiedNav");
      $skipContent.on("keydown.psUnifiedNav", function(e) {
        let code = e.keyCode || e.which;
        if (code === 13) {
          e.preventDefault();
          jQuery(this).trigger("click");
          jQuery("#content").attr("tabIndex",-1).focus();
        }
      });

      // Get window height for mobile viewport (variable defined in less)
      let vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', `${vh}px`);

      // event handler for close menu on overlay
      $psNavMenuDropdownPanel.off("click.psUnifiedNav");
      $psNavMenuDropdownPanel.on("click.psUnifiedNav", function (e) {
        let $this = jQuery(this);
        if (e.target !== this) {
          return;
        }
        $this.parent().removeClass("open");
        return false;
      });

      jQuery(window).off("resize.psUnifiedNav");
      jQuery(window).on("resize.psUnifiedNav", () => {
        clearTimeout(resizeIsDone);
        resizeIsDone = setTimeout(function () {
          doTransition();
        }, 300);
      });

      // Shy global nav - window.shyGlobalNav = true;
      let scrollPos = 0;
      window.addEventListener('scroll', function(){
        if (this.window.shyGlobalNav){
          if ((document.body.getBoundingClientRect()).top > scrollPos){
            $nav.css('height','');
            $nav.slideDown(200);
          } else if (scrollPos < -100){
            $nav.slideUp(200);
            $nav.css('height','0');
          }
          scrollPos = (document.body.getBoundingClientRect()).top;
        }
      });
    });
  };

  if (jQuery('.ps-navigation').length > 0) {
    // use init() callback to init the component after page load
    jQuery(() => {
      init();
    });

    // use init() callback to init the component after target finishes
    document.addEventListener('at-content-rendering-succeeded', function (e) {
      jQuery(() => {
        init();
      });
    });
    document.addEventListener('at-content-rendering-failed', function (e) {
      jQuery(() => {
        init();
      });
    });
  }
})();
/*global
  jQuery, Utils
 */
jQuery(function() {
  var $localNavs = jQuery('#local-nav');

  $localNavs.each(function() {
    var $localNav = jQuery(this);
    var $localPhoneNumber = $localNav.find('#local-phone-number');
    var $dropdownSelectedAnchors = $localNav.find('.locale-selected a');
    var $localDropdown = $localNav.find('.locale-options');
    var $localDropdownList = $localDropdown.find('ul');
    var $localDropdownListItems = $localDropdownList.find('li');

    // toggle dropdown
    $dropdownSelectedAnchors.on('click', function(e) {
      e.preventDefault();
      $localDropdownList.fadeToggle(300);
      jQuery(this).parent().toggleClass('selected');
    });

    $localDropdownListItems.on('click', function(e) {
      Utils.cookies.setCookie('country-override', 'true', '.pluralsight.com', '/', 1);
    });

    // close dropdown when clicked on document
    jQuery(document).on('click', function(e) {
      var $dropdown = jQuery('.locale-selected');

      e.stopPropagation();
      if(!$dropdown.is(e.target) && $dropdown.has(e.target).length === 0) {
        $localDropdownList.hide();
        jQuery('.locale-selected').removeClass('selected');
      }
    });

    // remove dashes on the phone number
    var formatPN = $localPhoneNumber.attr('href').replace(/\-/g, '');
    $localPhoneNumber.attr('href', formatPN);
  });
});

/*global
  jQuery, Utils
 */
// iife to set up component during page load
(() => {
  'use strict';

  const init = () => {
    let $globalNav = jQuery(".ps-locale-nav");
    $globalNav.each(function () {
      let $psNav = jQuery(this),
        $psNavMain = $psNav.find(".ps-nav--main"),
        $psNavUtil = $psNav.find(".ps-nav--util"),
        $psNavLinks = $psNav.find(".ps-nav--links"),
        $psNavHeaderDropdown =$psNav.find(".header_dropdown"),
        $psNavTabsProduct = jQuery(".ps-nav--mobile #header_tabs--products .link-products"),
        $psNavMobile = $psNav.find("#menuMobile"),
        $psNavMobileAccordionLinks = jQuery(".link-products"),
        numberOfUtilNavItem = $psNavUtil.find("li").length,
        bodyLocked = false;

      function lockBody(){
        if (!bodyLocked){
          window.scrollPosition = window.pageYOffset;
          jQuery("#content").css("margin-top",-scrollPosition + "px");
          jQuery("body").addClass("header-popup-open");
          bodyLocked = true;
        }
      }
      function unlockBody(){
        if (bodyLocked){
          jQuery("body").removeClass("header-popup-open");
          jQuery("#content").css("margin-top",0);
          window.scrollTo(0,scrollPosition);
          bodyLocked = false;
        }
      }

      // Monitor scrolling and show/hide nav.
      var scrollPos = 0;
      var $globalHeader = jQuery(".ps-nav");
      //window.shyGlobalNav = true;
      window.addEventListener('scroll', function(){
        if (this.window.shyGlobalNav){
          if ((document.body.getBoundingClientRect()).top > scrollPos){
            $globalHeader.css('height','');
            $globalHeader.slideDown(200);
          } else if (scrollPos < -100){
            $globalHeader.slideUp(200)
            $globalHeader.css('height','0');
          }
          scrollPos = (document.body.getBoundingClientRect()).top;
        }
      });

      /************
       DROPDOWNS
       ***********/
      function showHideNav() {
        let utilMenu = $psNavUtil.children(),
            navList = $psNavLinks.find("> ul > li"),
            originalUtilLIs = numberOfUtilNavItem;
        if(jQuery(window).width() < 1024) {
          utilMenu.appendTo($psNavMain);
          $psNavLinks.css("display","");
          $psNav.removeClass("ps-nav--desktop desktop-active");
          $psNav.addClass("ps-nav--mobile");
          $psNavHeaderDropdown.show();
          $psNavLinks.css("display","");
          $psNavTabsProduct.find(".link-items > ul").addClass("active");
          jQuery(".nav-product-link-list").hide();

          if(!$psNav.hasClass("mobile-active")) {
            navList.removeClass("open move-out");
            $psNavHeaderDropdown.removeClass('slide-out');
          }
        } else if(jQuery(window).width() >= 1024) {
          $psNav.addClass("ps-nav--desktop");
          $psNav.removeClass("ps-nav--mobile mobile-active");
          //$psNavTabsProduct.find(".link-items > ul").css("display","").removeClass("active");
          $psNavLinks.removeClass("back-to-main").css("display","flex");
          jQuery(".nav-product-link-list").show();

          if (utilMenu.length === 0) {
            $psNavMain.find("> li").slice(-originalUtilLIs).appendTo($psNavUtil);
          }

          if(!$psNavLinks.find("li").hasClass("open")) {
            $psNavHeaderDropdown.hide(); //
          }
          if($psNav.hasClass("ps-nav--desktop") && !$psNav.hasClass("desktop-active")) {
            $psNavLinks.find("li").removeClass("open move-out");
            $psNavHeaderDropdown.removeClass("slide-out");
            $psNavHeaderDropdown.hide();
          }
        }
      }
      function desktopDropdown() {
        jQuery(this).siblings($psNavHeaderDropdown).fadeToggle(300);
        $psNavHeaderDropdown.not(jQuery(this).siblings()).fadeOut(300);
        jQuery(this).parent().fadeIn(300).toggleClass("open");
        $psNav.find("li.open").not(jQuery(this).parent()).removeClass("open");

        if($psNav.find("li").hasClass("open")) {
          jQuery(".ps-nav--desktop").addClass("desktop-active");
        } else {
          jQuery(".ps-nav--desktop").removeClass("desktop-active");
        }
      }
      function mobileDropdown() {
        jQuery(this).siblings($psNavHeaderDropdown).toggleClass("slide-out");
        jQuery(this).find($psNavHeaderDropdown).not(jQuery(this).parent()).removeClass("slide-out");
        jQuery(this).parent().fadeIn(300).toggleClass("open");
        $psNav.find("li.open").not(jQuery(this).parent()).removeClass("open");
        jQuery(this).parent().siblings().toggleClass("move-out");
        $psNav.find("li.open").not(jQuery(this).parent()).removeClass("move-out");

        if ($psNav.find("li").hasClass("open")) {
          $psNavLinks.addClass("back-to-main");
        } else {
          $psNavLinks.removeClass("back-to-main");
        }
      }
      function closeButton() {
        unlockBody();
        if(jQuery(this).closest(".ps-nav li").hasClass("open")) {
          $psNav.removeClass('desktop-active');
          $psNav.find("li").removeClass('open');
          $psNavHeaderDropdown.fadeOut(300);
        }
      }
      showHideNav();

      /************
       /* DROPDOWNS EVENTS
       /***********/

      jQuery(window).off("resize.psLocalNavigationComponent");
      jQuery(window).on("resize.psLocalNavigationComponent", function() {
        showHideNav();
      });

      // Drop down links
      $psNavLinks.find("> ul > li > a:not(:only-child)").off('click.psLocalNavigationComponent');
      $psNavLinks.find("> ul > li > a:not(:only-child)").on("click.psLocalNavigationComponent", function(e) {
        e.preventDefault();
        e.stopPropagation();
        if (jQuery(window).width() < 1024) {
          mobileDropdown.call(this);
        } else if(jQuery(window).width() >= 1024) {
          desktopDropdown.call(this);
        }

        if($psNav.find("li").hasClass("open") || $psNav.hasClass('mobile-active')){
          lockBody();
        } else {
          unlockBody();
        }
      });

      //click button to close dropdowns
      $psNavHeaderDropdown.find('.closebutton').off('click.psLocalNavigationComponent');
      $psNavHeaderDropdown.find('.closebutton').on('click.psLocalNavigationComponent', function(e) {
        e.preventDefault();
        closeButton.call(this);
      });

      //click overlay to close/reset dropdowns
      $psNavHeaderDropdown.off('click.psLocalNavigationComponent');
      $psNavHeaderDropdown.on('click.psLocalNavigationComponent', function(e) {
        if (e.target !== this) {
          return;
        }
        unlockBody();
        $psNav.removeClass("desktop-active");
        $psNav.find("li").removeClass("open");
        jQuery(".ps-nav-global .ps-nav--search #header_tabs--search").css("height","");
        jQuery(this).fadeOut(300);
        return false;
      });

      //handle mobile hamburger menu
      $psNavMobile.off('click.psLocalNavigationComponent');
      $psNavMobile.on('click.psLocalNavigationComponent', function(e) {
        e.preventDefault();
        var toggleMobile = jQuery(this).parents(".ps-nav--mobile");
        toggleMobile.toggleClass("mobile-active");

        lockBody();
        // reset dropdown/search on close
        if(!jQuery(".ps-nav--mobile").hasClass("mobile-active")) {
          var inputValue = jQuery("#header_dropdown--resultList");
          var container = $psNavHeaderDropdown.find(" > .section");

          unlockBody();

          if(!container.is(e.target) && container.has(e.target).length === 0) {
            $psNav.removeClass("search-is-active");
            $psNav.find("li").removeClass("open move-out");
            $psNavLinks.removeClass("back-to-main");
            $psNavHeaderDropdown.removeClass("slide-out");
          }
        }
      });

      //mobile accordion functionality
      $psNavMobileAccordionLinks.off('click.psLocalNavigationComponent');
      $psNavMobileAccordionLinks.on('click.psLocalNavigationComponent', function(e) {
        var link = jQuery(this).siblings("ul.nav-product-link-list");
        if($psNav.hasClass("mobile-active")) {
          jQuery("ul.nav-product-link-list").not(jQuery(".link-products")).slideUp();
          if(link.is(":hidden")) {
            link.slideToggle();
          }
          return false;
        }
      });


    });
  };
  if(jQuery('.ps-nav').length > 0) {
    // use init() callback to init the component after page load
    jQuery(() => {
      init();
    });

    // use init() callback to init the component after target finishes
    document.addEventListener('at-content-rendering-succeeded', function (e) {
      jQuery(() => {
        init();
      });
    });
    document.addEventListener('at-content-rendering-failed', function (e) {
      jQuery(() => {
        init();
      });
    });
  }
})();



/*global
  jQuery, Utils
 */
jQuery(function () {
  var $headers = jQuery('.ps-locale-nav.aem-component');

  $headers.each(function () {
    var $header = jQuery(this);
    var $anchorLink = $header.find('a[href*="#"]');
    var attemptCloseMobileNav = function () {
      if ($header.hasClass('mobile-active')) {
        jQuery('#menuMobile').trigger('click');
      }
    };
    // apply jumplink functionality to nav items (customer-stories)
    $anchorLink.on('click', function (e) {
      var $this = jQuery(e.target);
      var href = $this.attr('href');
      if (href !== "#") {
        var anchor = href.substring(href.indexOf('#') + 1);
        attemptCloseMobileNav();
        scrollTo(anchor);
      }
    });
  });

  var scrollTo = function (idName) {
    var element = document.getElementById(idName + '_');
    if (element !== null) {
      element.scrollIntoView();
    }
  };

  // read window hash jumplink if URL has # (e.g. /fr.html#customer-stories )
  setTimeout(function () {
    var hash = window.location.hash;
    if (hash.startsWith('#')) {
      hash = hash.substring(1);
      scrollTo(hash);
    }
  }, 500);
});

/*global
  jQuery, Utils
 */
// iife to set up component during page load
(() => {
  'use strict';

  const init = () => {
    var $globalNav = jQuery('.navigation');

    $globalNav.each(function () {
      var $nav = jQuery(this),
        $psNav = $nav.find(".ps-nav-global"),
        $psNavMain = $psNav.find(".ps-nav-global--main"),
        $psNavUtil = $psNav.find(".ps-nav-global--util"),
        $psNavLinks = $psNav.find(".ps-nav-global--links"),
        $psNavHeaderDropdown =$psNav.find(".header_dropdown"),
        $psNavMobile = $psNav.find("#navMobile"),
        $psNavSearchMobile = $psNav.find("#searchMobile"),
        $psNavAccordionProductLink = jQuery(".product-link"),

        numberOfUtilNavItem = $psNavUtil.find("li").length,
        bodyLocked = false,

        //Search
        $searchForm = jQuery("#header_searchForm"),
        $headerNav = $searchForm.parents(".ps-nav-global"),
        $searchWrapper = $headerNav.find(".header_nav_search"),
        $searchPopout = $headerNav.closest(".header_dropdown"),
        $searchInput = $searchForm.find(".header_search--input"),
        searchTerm = "",
        $resultsTarget = $searchForm.parents('.search-button__component').parent('.header_nav_search').siblings('.header_tabs_content--container').find('#header_dropdown--resultList'),
        $resultsTargetCourses = $searchForm.parents('.search-button__component').parent('.header_nav_search').siblings('.header_tabs_content--container').find('#header_dropdown--resultListCourses'),
        $resultsTargetPaths = $searchForm.parents('.search-button__component').parent('.header_nav_search').siblings('.header_tabs_content--container').find('#header_dropdown--resultListPaths'),
        minChars = 3,
        searchOpen = false,
        timer = null;


      function lockBody(){
        if (!bodyLocked){
          window.scrollPosition = window.pageYOffset;
          jQuery("#content").css("margin-top",-scrollPosition + "px");
          jQuery("body").addClass("header-popup-open");
          bodyLocked = true;
        }
      }
      function unlockBody(){
        if (bodyLocked){
          jQuery("body").removeClass("header-popup-open");
          jQuery("#content").css("margin-top",0);
          window.scrollTo(0,scrollPosition);
          bodyLocked = false;
        }
      }

      /************
       SEARCH
       ***********/
      function searchTermKeyUpHandler(e) {
        if (e.which == '27') {//escape
          e.preventDefault();
          hideSearchResultPopup();
        } else if (e.which == '40') {// down
          e.preventDefault();
          selectTerm();
        } else if (e.which == '38') {//up
          e.preventDefault();
          selectTerm(true);
        } else if (e.which == '13') {//enter - use highlighted option if available, otherwise use search text

        } else {
          if (timer) {
            clearTimeout(timer); // clear the timer as keys are still entered
          }

          if ($searchInput) {
            searchTerm = $searchInput.val().trim();
          }

          //DOES SEARCH CONTAIN COLON SYMBOL
          if(searchTerm.includes(':')) {
            searchTerm = searchTerm.replaceAll(':',' ').replaceAll(/\s\s+/g, ' ').trim();  // RegEx: replace all spacing, tabs, new lines etc to one space.
          }

          timer = setTimeout(function () {
            if (searchTerm !== undefined) {
              var term = jQuery.trim(searchTerm);
              if (term.length >= minChars) {
                search();
              } else if (term.length < minChars) {
                clearResults();
              }
            }
          }, 350);
        }

        //watch for users clicking on suggested search term - still need to pass referring page to Cludo.
        jQuery(document).off('click.psNavigationComponent');
        jQuery(document).on('click.psNavigationComponent', '.header_dropdown--resultInfo a', function() {
            var refurl = window.location.hostname + "" + window.location.pathname;
            Cookies.set("header_search_origin", refurl, { expires: 1, path: '/' }); //save current page URL to send in with search analytics on the search page.
            Cookies.set("header_search_origin_title", pageTitle, { expires: 1, path: '/' }); //save current page URL to send in with search analytics on the search page.
          }
        );

        function selectTerm(prev) {
          var $selectedTerm = $resultsTarget.find('.header_dropdown--resultInfo.selected');
          if ($selectedTerm.length) {
            var $selectedTermSibling = (prev ? $selectedTerm.prev() :$selectedTerm.next());

            if ($selectedTermSibling.length) {
              $selectedTerm.removeClass('selected');
              $selectedTermSibling.addClass('selected');
            }
          } else {
            if (prev) {
              $resultsTarget.find('.header_dropdown--resultInfo').last().addClass('selected');
            } else {
              $resultsTarget.find('.header_dropdown--resultInfo').first().addClass('selected');
            }
          }
        }
      }

      function handleSearch(){
        var $selectedTermAnchor = $resultsTarget.find('.header_dropdown--resultInfo.selected a');
        if ($selectedTermAnchor.length) {
          $selectedTermAnchor[0].click();
        } else {
          var refurl = window.location.hostname + "" + window.location.pathname;
          Cookies.set("header_search_origin", refurl, { expires: 1, path: '/' }); //save current page URL to send in with search analytics on the search page.
          var refpt = document.title;
          Cookies.set("header_search_origin", refpt, { expires: 1, path: '/' }); //save current page URL to send in with search analytics on the search page.

          searchTerm = $searchInput.val().trim();
          grabCludoSettings();
          handleQuickLinks(searchTerm);
          if(!window.quickLinkHandled){
            var encodedSearchTerm = encodeURIComponent(searchTerm);
            if (searchTerm == ""){ encodedSearchTerm = "*"; }
            window.location.href = $headerNav.find(".header_search--url").attr('href') + "?q=" + encodedSearchTerm;
          }
        }
      }

      function searchTermKeyDownHandler(e) { //stop jitters from happening
        if (e.which == '40') {// down
          e.preventDefault();
        } else if (e.which == '38') {//up
          e.preventDefault();
        }
      }

      function clearResults() {
        $resultsTarget.html("");
        $resultsTargetCourses.html("");
        $resultsTargetPaths.html("");
      }

      function showSearchResultPopup() {
        if (!searchOpen){
          lockBody();
          $searchPopout.fadeIn(300);
          $searchInput.focus();
          searchOpen = true;
          window.scrollTo(0,0);
        }
      }

      function hideSearchResultPopup() {
        if (searchOpen){
          unlockBody();
          $searchPopout.fadeOut(300);
          clearResults();
          $searchInput.val("");
          searchOpen = false;
        }
      }

      function search() {
        var spaceRegEx = new RegExp('\ ','g');
        //Auto Complete
        jQuery.ajax({
          url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId + '/Autocomplete?text=' + searchTerm.replace(spaceRegEx,"-"),
          method: "GET",
          async: true,
          crossDomain: true,
          headers: {
            "Content-Type": "application/json; charset=utf-8",
            "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
          },
          success: function (data) {
            // data[0] is the first word result
            if (data.length > 0) {
              renderSuggestionResults($resultsTarget, data);
            } else {
              clearResults();
            }
          },
          error: function (xhr, status, error){}
        });

        if(CludoSearch){
          var courseFacet = {};
          courseFacet["categories"] = ["course"];

          var pathsFacet = {};
          pathsFacet["categories"] = ["paths"];


          var  courseBody = {
            "ResponseType":"json",
            "query":searchTerm,
            "facets": courseFacet,
            "enableFacetFiltering":"true",
            "page":"1",
            "perPage":"8"
          };

          var  pathsBody = {
            "ResponseType":"json",
            "query": searchTerm,
            "facets": pathsFacet,
            "enableFacetFiltering":"true",
            "page":"1",
            "perPage":"8"
          };

          //Courses Search
          jQuery.ajax({
            url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId +'/search',
            method: "POST",
            async: true,
            crossDomain: true,
            processData: false,
            data: JSON.stringify(courseBody),
            headers: {
              "Content-Type": "application/json; charset=utf-8",
              "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
            },
            success: function (data) {
              if(data.TypedDocuments && data.TypedDocuments.length > 0){
                renderResultsCourse($resultsTargetCourses, data);
              }
            },
            error: function (xhr, status, error){
              console.log("ajax error: " + status + " - " + error);
            }
          });
          //Paths Search
          jQuery.ajax({
            url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId +'/search',
            method: "POST",
            async: true,
            crossDomain: true,
            processData: false,
            data: JSON.stringify(pathsBody),
            headers: {
              "Content-Type": "application/json; charset=utf-8",
              "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
            },
            success: function (data) {
              if(data.TypedDocuments && data.TypedDocuments.length > 0){
                renderResultsPaths($resultsTargetPaths, data);
              }
            },
            error: function (xhr, status, error){
              console.log("ajax error: " + status + " - " + error);
            }
          });
        }

        function renderSuggestionResults($resultsTarget, data) {
          var html = '<ul class="header_dropdown--lists">';
          var searchUrl = $headerNav.find(".header_search--url").attr('href');
          var dashRegEx = new RegExp('\-','g');
          for (var i = 0; i < data.length && i < 5; i++) {
            html += '<li class="header_dropdown--resultInfo">';
            html += '<a class="header_dropdown--resultInfoTitle" href="' + searchUrl + '?q=' + data[i].replace(dashRegEx,"%20") + '">' + data[i].replace(dashRegEx," ") + '</a>';
            html += '</li>';
          }
          html += '</ul>';
          $resultsTarget.html(html);
        }

        function renderResultsCourse(targetElement, data) {
          var html = '<ul class="header_dropdown--lists">';
          html += '<li class="first">Courses</li>';
          for (var i = 0; i < data.TypedDocuments.length; i++) {
            var course = data.TypedDocuments[i];
            html += '<li>';
            html += '<a href="https://www.pluralsight.com/courses/' + course.Fields.courseName.Value + '">' + course.Fields.Title.Value + '</a>';
            html += '</li>';
          }
          html += '<li class="last"><a href="https://www.pluralsight.com/search?categories=course&q=' + encodeURI(searchTerm) + '">See more results</a></li>';
          html += '</ul>';
          targetElement.html(html);
        }

        function renderResultsPaths(targetElement, data) {
          var html = '<ul class="header_dropdown--lists">';

          if(data.Banners && data.Banners.length > 0) {
            var bannerHtml = '<div class="banners">';
            data.Banners.forEach(function(banner) {
              var markup = `<div class="banner">${banner.Banner}</div>`;
              bannerHtml += markup;
            });
            bannerHtml += `</div>`;
            html = bannerHtml + html;
          }

          html += '<li class="first">Paths</li>';

          for (var i = 0; i < data.TypedDocuments.length; i++) {
            var path = data.TypedDocuments[i];
            html += '<li><div class="item">';
            html += '<a href="https://www.pluralsight.com/paths/' + path.Fields.urlSlug.Value + '">';
            html += '<div class="item-each">';
            html += '<div class="item-image"><img src="' + path.Fields.thumbnail.Value + '"' + ' alt="' + path.Fields.Title.Value + '" /></div>';
            html += '<div class="item-text">' + path.Fields.Title.Value;
            html += '<ul>';
            html += '<li>' + '<span>' + path.Fields.numberOfCourses.Value + '</span>' + ' Courses' + '</li>';
            html += '<li>' + '<span>' + path.Fields.numberOfHours.Value + '</span>' + ' Hours' + '</li>';
            html += '</ul>';
            html += '</div>';
            html += '</div>';
            html += '</a>';
            html += '</div></li>';
          }
          html += '<li class="last"><a href="https://www.pluralsight.com/product/paths">View all paths</a></li>';
          html += '</ul>';
          targetElement.html(html);
        }
      }

      /******************
       SEARCH EVENTS
       *****************/
      $searchInput.off('keyup.psNavigationComponent');
      $searchInput.on('keyup.psNavigationComponent', function(e){ searchTermKeyUpHandler(e); });
      $searchInput.off('keydown.psNavigationComponent');
      $searchInput.on('keydown.psNavigationComponent', function(e){ searchTermKeyDownHandler(e); });
      $searchForm.submit(function( event ) {
        event.stopPropagation();
        event.preventDefault();
        handleSearch();
      });
      $searchWrapper.off('click.psNavigationComponent');
      $searchWrapper.on('click.psNavigationComponent', function(e){
        if (jQuery(e.target).parents("#header_tabs--search").length == 0
          && jQuery(e.target).parents("#header_searchForm").length == 0){
          hideSearchResultPopup();
        }
      });

      if (document.URL.indexOf("www.pluralsight.com") > -1 || document.URL.indexOf("beta.www.pluralsight.com") > -1  || document.URL.indexOf("www-stage.pluralsight.com") > -1 || document.URL.indexOf("beta.www-stage.pluralsight.com") > -1){
        jQuery(".ps-nav--search a.header_search--url").attr("href","/search"); //This sometimes changes this to an absolute link to http (which gets redirected and breaks the query) and cause is unknown.
      }

      var pageTitle = document.title; //grab early since chat bot likes to change this.

      //header search popup
      jQuery(".search-button__component .header_search--form").off('focus.psNavigationComponent input.psNavigationComponent');
      jQuery(".search-button__component .header_search--form").on('focus.psNavigationComponent input.psNavigationComponent', function (e) {
        e.preventDefault();
        var inputValue = jQuery(".header_search--input").val().trim();
        if (inputValue.length >= 3) {
          // show popout
          jQuery(".ps-nav-global .ps-nav--search #header_tabs--search").css("height","auto");
          showSearchResultPopup();
        } else if (inputValue.length === 0) {
          jQuery(".ps-nav-global .ps-nav--search #header_tabs--search").css("height","");
          hideSearchResultPopup();
        }
      });

      /************
       DROPDOWNS
       ***********/
      function showHideNav() {
        var utilMenu = $psNavUtil.children(),
          navList = $psNavLinks.find("> ul > li"),
          originalUtilLIs = numberOfUtilNavItem;

        if(jQuery(window).width() < 1024) {
          utilMenu.appendTo($psNavMain);
          $psNavLinks.css('display','');
          $psNav.removeClass('ps-nav--desktop desktop-active');
          $psNav.addClass('ps-nav--mobile');
          $psNavHeaderDropdown.show();
          $psNavLinks.css('display','');
          jQuery(".nav-product-link-list").hide();

          if(!$psNav.hasClass('mobile-active')) {
            navList.removeClass('open move-out');
            $psNavHeaderDropdown.removeClass('slide-out');
          }
        } else if(jQuery(window).width() >= 1024) {
          $psNav.addClass("ps-nav--desktop");
          $psNav.removeClass("ps-nav--mobile mobile-active");
          $psNavLinks.removeClass("back-to-main").css("display","flex");
          jQuery(".nav-product-link-list").show();

          if (utilMenu.length === 0) {
            $psNavMain.find("> li").slice(-originalUtilLIs).appendTo($psNavUtil);
          }
          if(!$psNavLinks.find("li").hasClass("open")) {
            $psNavHeaderDropdown.hide(); //
          }
          if($psNav.hasClass("ps-nav--desktop") && !$psNav.hasClass("desktop-active")) {
            $psNavLinks.find("li").removeClass("open move-out");
            $psNavHeaderDropdown.removeClass("slide-out");
            $psNavHeaderDropdown.hide();
          }
        }
      }
      showHideNav();

      function desktopDropdown() {
        jQuery(this).siblings($psNavHeaderDropdown).fadeToggle(300);
        $psNavHeaderDropdown.not(jQuery(this).siblings()).fadeOut(300);
        jQuery(this).parent().fadeIn(300).toggleClass('open');
        $psNav.find("li.open").not(jQuery(this).parent()).removeClass("open");
        $psNav.find("li.ps-nav--search #header_tabs--search").css("height","");

        if($psNav.find("li").hasClass("open")) {
          jQuery('.ps-nav--desktop').addClass('desktop-active');
        } else {
          jQuery('.ps-nav--desktop').removeClass('desktop-active');
        }

        if (!jQuery('.ps-nav--search').hasClass('open')) {
          var inputValue = jQuery('#header_dropdown--resultList');
          if (inputValue.children().length > 0) {
            hideSearchResultPopup();
          }
        }
      }

      function mobileDropdown() {
        jQuery(this).siblings($psNavHeaderDropdown).toggleClass("slide-out");
        jQuery(this).find($psNavHeaderDropdown).not(jQuery(this).parent()).removeClass("slide-out");
        jQuery(this).parent().fadeIn(300).toggleClass("open");
        $psNav.find("li.open").not(jQuery(this).parent()).removeClass("open");
        jQuery(this).parent().siblings().toggleClass("move-out");
        $psNav.find("li.open").not(jQuery(this).parent()).removeClass("move-out");

        if ($psNav.find("li").hasClass("open")) {
          $psNavLinks.addClass("back-to-main");
        } else {
          $psNavLinks.removeClass("back-to-main");
        }
      }

      function closeButton() {
        var inputValue = jQuery("#header_dropdown--resultList");
        unlockBody();
        $psNav.removeClass("desktop-active");
        $psNav.find("li").removeClass("open");
        $psNavHeaderDropdown.fadeOut(300);
        $psNav.find(".ps-nav--search #header_tabs--search").css("height","");

        if(inputValue.children().length > 0) {
          hideSearchResultPopup();
        }
      }

      /******************
       DROPDOWN EVENTS
       *****************/
      jQuery(window).off("resize.psNavigationComponent");
      jQuery(window).on("resize.psNavigationComponent", function() {
        showHideNav();
      });

      // Monitor scrolling and show/hide nav.
      var scrollPos = 0;
      //window.shyGlobalNav = true;
      window.addEventListener('scroll', function(){
        if (this.window.shyGlobalNav){
          if ((document.body.getBoundingClientRect()).top > scrollPos){
            $psNav.css('height','');
            $psNav.slideDown(200);
          } else if (scrollPos < -100){
            $psNav.slideUp(200);
            $psNav.css('height','0');
          }
          scrollPos = (document.body.getBoundingClientRect()).top;
        }
      });

      // Drop down links
      $psNavLinks.find("> ul > li > a:not(:only-child)").off('click.psNavigationComponent');
      $psNavLinks.find("> ul > li > a:not(:only-child)").on("click.psNavigationComponent", function(e) {
        e.preventDefault();
        e.stopPropagation();
        if (jQuery(window).width() < 1024) {
          mobileDropdown.call(this);
        } else if(jQuery(window).width() >= 1024) {
          desktopDropdown.call(this);
        }

        // prevents 'focus' for mobile to NOT to display keyboard
        if(jQuery(this).parent().hasClass("ps-nav--search")) {
          jQuery("#header_searchForm .header_search--input").focus();
        } else {
          document.activeElement.blur();
        }

        if($psNav.find("li").hasClass("open") || $psNav.hasClass('mobile-active')){
          lockBody();
        } else {
          unlockBody();
        }
      });

      //click button to close dropdowns
      $psNavHeaderDropdown.find('.closebutton').off('click.psNavigationComponent');
      $psNavHeaderDropdown.find('.closebutton').on('click.psNavigationComponent', function(e) {
        e.preventDefault();
        closeButton.call(this);
      });

      //click overlay to close/reset dropdowns
      $psNavHeaderDropdown.off('click.psNavigationComponent');
      $psNavHeaderDropdown.on('click.psNavigationComponent', function(e) {
        var inputValue = jQuery('#header_dropdown--resultList');
        if (e.target !== this) {
          return;
        }
        unlockBody();
        $psNav.removeClass("desktop-active");
        $psNav.find("li").removeClass("open");
        jQuery(".ps-nav-global .ps-nav--search #header_tabs--search").css("height","");
        jQuery(this).fadeOut(300);

        if(inputValue.children().length > 0) {
          hideSearchResultPopup();
        }
        return false;
      });

      //handle mobile hamburger menu
      $psNavMobile.off('click.psNavigationComponent');
      $psNavMobile.on('click.psNavigationComponent', function(e) {
        e.preventDefault();
        var toggleMobile = jQuery(this).parents(".ps-nav--mobile");
        toggleMobile.toggleClass("mobile-active");

        lockBody();
        // reset dropdown/search on close
        if(!jQuery(".ps-nav--mobile").hasClass("mobile-active")) {
          var inputValue = jQuery("#header_dropdown--resultList");
          var container = $psNavHeaderDropdown.find(" > .section");

          unlockBody();

          if(!container.is(e.target) && container.has(e.target).length === 0) {
            $psNav.removeClass("search-is-active");
            $psNav.find("li").removeClass("open move-out");
            $psNavLinks.removeClass("back-to-main");
            $psNavHeaderDropdown.removeClass("slide-out");

            if(inputValue.children().length > 0) {
              hideSearchResultPopup();
            }
          }
        }
      });

      //handle mobile search
      $psNavSearchMobile.off('click.psNavigationComponent');
      $psNavSearchMobile.on('click.psNavigationComponent', function(e) {
        e.preventDefault();
        lockBody();
        $psNav.addClass("mobile-active search-is-active");
        if(jQuery(".ps-nav--mobile").hasClass("mobile-active")){
          $psNav.find("li").addClass("move-out");
          $psNav.find("li.ps-nav--search").addClass("open").removeClass("move-out");
          $psNav.find("li.ps-nav--search.open .header_dropdown").addClass("slide-out");
          jQuery('#header_searchForm .header_search--input').focus();
        }
      });

      //mobile accordion functionality
      $psNavAccordionProductLink.off('click.psNavigationComponent');
      $psNavAccordionProductLink.on('click.psNavigationComponent', function(e) {
        var link = jQuery(this).siblings(".nav-product-link-list");
        if($psNav.hasClass('mobile-active')) {
          jQuery(".nav-product-link-list").not(jQuery(".product-link")).slideUp();
          if(link.is(":hidden")) {
            link.slideToggle();
          }
          return false;
        }
      });

      // change CTA button text and link in /blog/
      if (window.location.pathname.indexOf('/blog') > -1) {
        var $navFTButton = jQuery('.ps-nav-global .ps-nav-global--util .button');
        $navFTButton.text('Skill up for free');
        $navFTButton.attr('href','https://www.pluralsight.com/product/skills/free');
      }
    });
  };

  if(jQuery('.global-navigation').length > 0) {
    // use init() callback to init the component after page load
    jQuery(() => {
      init();
    });

    // use init() callback to init the component after target finishes
    document.addEventListener('at-content-rendering-succeeded', function (e) {
      jQuery(() => {
        init();
      });
    });
    document.addEventListener('at-content-rendering-failed', function (e) {
      jQuery(() => {
        init();
      });
    });
  }
})();
/*global
  jQuery, Utils
 */
jQuery(function () {
    const $footerLinkGroups = jQuery('.footer-link-group.aem-component');
    $footerLinkGroups.each(function () {
        const $footerLinkGroup = jQuery(this);
        const $footerLinkLabel = $footerLinkGroup.find('.group-label');
        const $footerLinkParsys = $footerLinkGroup.find('.footer-link-group-parsys');
        const $window = jQuery(window);
        const mobileMaxWidth = 640;
        const resizeHandler = () => {
            const windowWidth = $window.width();
            if (windowWidth > mobileMaxWidth) {
                $footerLinkGroup.removeClass('mobile');
                $footerLinkParsys.slideDown(0);
                $footerLinkGroup.removeClass('closed');
            }  else {
                $footerLinkGroup.addClass('mobile');
                $footerLinkParsys.slideUp(0);
                $footerLinkGroup.addClass('closed');
            }
        };
        $footerLinkLabel.on('click', (event) => {
           if ($footerLinkGroup.hasClass('mobile')) {
               if ($footerLinkGroup.hasClass('closed')) {
                   $footerLinkParsys.slideDown();
                   $footerLinkGroup.removeClass('closed');
               } else {
                   $footerLinkParsys.slideUp();
                   $footerLinkGroup.addClass('closed');
               }
           }
        });
        $window.on('resize', () => {
            resizeHandler();
        });
        resizeHandler();
        const windowWidth = $window.width();
        if (windowWidth <= mobileMaxWidth) {
            $footerLinkParsys.slideUp();
        }
    });
});



/*global
    jQuery,Utils
*/
jQuery(() => {
  'use strict';

  const $footerLanguageSelectorComponents = jQuery('.footer-language-selector-component.aem-component');

  $footerLanguageSelectorComponents.each(function() {
    const $footerLanguageSelectorComponent = jQuery(this);
    const $currentLanguage = $footerLanguageSelectorComponent.find('.current-language');
    const $languageToggle = $footerLanguageSelectorComponent.find('.language-toggle');
    const $languagesContainer = $footerLanguageSelectorComponent.find('.languages');
    const $languages = $languagesContainer.find('li.language');
    const $englishLanguage = $languagesContainer.find(`.language a[hreflang='en']`);

    const setCurrentLanguage = () => {
      let languageFound = false;
      $languages.each(function() {
        const $language = jQuery(this);
        const $languageLink = $language.find('a');
        const languageAbbreviation = $languageLink.attr('hreflang');
        const languageName = $languageLink.text();

        if (location.href.includes(`pluralsight.com/${languageAbbreviation}`) || location.href.includes(`/content/pluralsight/en/${languageAbbreviation}`)) {
          languageFound = true;
          $languageLink.addClass('active');
          $currentLanguage.text(languageName);
          return false;
        }

      });

      if (!languageFound) {
        $englishLanguage.addClass('active');
        $currentLanguage.text($englishLanguage.text());
      }
    };
    setCurrentLanguage();

    // only apply if there's a toggle
    if ($languageToggle.length) {
      // start toggle closed
      $languagesContainer.slideToggle(0);

      // apply toggle click event
      $languageToggle.off('click.ps-language-toggle').on('click.ps-language-toggle', () => {
        $languagesContainer.slideToggle(100);
        $languageToggle.toggleClass('open');
      });
    }

  });
});

if (jQuery(".video-component").length){
    var $components = jQuery(".video-component");

    $components.on("click", '.video-new-window > div', function (e) {
        e.preventDefault();
        window.open(jQuery(this).parent().children('iframe').attr("src"),'_blank');
    });
    $components.on("click", '.video-modal', function(e) {
        e.preventDefault();
    });

    window.psYtVideos = window.psYtVideos || {};
    psYtVideos.vidConfigs = psYtVideos.vidConfigs || [];

    var $ytApiVids = $components.find(".video-comp-yt-api-vid");
    if ($ytApiVids.length) {
        $ytApiVids.each(function( index, element ) {
            var vidDiv = jQuery(element);
            var vidId = "video_comp_vid" + index
            vidDiv.attr("id", vidId);

            var videoYoutubeId = vidDiv.data('vid-comp-id');
            if(typeof videoYoutubeId !== "undefined" && videoYoutubeId.length) {
                psYtVideos.vidConfigs.push({
                    videoElId: vidId,
                    videoSettings: {
                        height: '100%',
                        width: '100%',
                        videoId: videoYoutubeId,
                        events: {
                            'onStateChange': function(event) {
                                if (event.data === -1) {
                                    //This is the new data value. Also switched from event.target.a to event.target.f.
                                    //I is the new value in the target. Get new value in event.target for iframe
                                    jQuery(event.target.getIframe()).closest('.video-component').removeClass("video-show-button");
                                }
                                if (event.data === 1) {
                                    //This is legacy, changed to -1 and also from a to f.
                                    //I is the new value in the target.
                                    jQuery(event.target.getIframe()).closest('.video-component').removeClass("video-show-button");
                                }
                            }
                        },
                        playerVars: {
                            autoplay: 0,
                            controls: 1,
                            cc_load_policy: 0,
                            enablejsapi: 1,
                            iv_load_policy: 3,
                            loop: 0,
                            modestbranding: 1,
                            origin: document.domain,
                            rel: 0
                        }
                    }
                });
            }
        });
    }
}
(() => {
    const init = () => {
        function lockBody() {
            if (!bodyLocked) {
                window.scrollPosition = window.pageYOffset;
                jQuery("#content").css("margin-top", -scrollPosition + "px");
                jQuery("body").addClass("header-popup-open");
                bodyLocked = true;
            }
        }

        function unlockBody() {
            if (bodyLocked) {
                jQuery("body").removeClass("header-popup-open");
                jQuery("#content").css("margin-top", 0);
                window.scrollTo(0, scrollPosition);
                bodyLocked = false;
            }
        }

        // Search
        var bodyLocked = false,
            searchOpen = false,
            $searchForm = jQuery("#header_searchForm"),
            $headerNav = $searchForm.parents(".ps-nav"),
            $searchWrapper = $headerNav.find(".header_nav_search"),
            $searchPopout = $headerNav.closest(".header_dropdown"),
            $searchCloseButton = $searchPopout.find(".closebutton"),
            $searchInput = $searchForm.find(".header_search--input"),
            searchTerm = "",
            $resultsTarget = $searchForm.parents('.search-button__component').parent('.header_nav_search').siblings('.header_tabs_content--container').find('#header_dropdown--resultList'),
            $resultsTargetCourses = $searchForm.parents('.search-button__component').parent('.header_nav_search').siblings('.header_tabs_content--container').find('#header_dropdown--resultListCourses'),
            $resultsTargetPaths = $searchForm.parents('.search-button__component').parent('.header_nav_search').siblings('.header_tabs_content--container').find('#header_dropdown--resultListPaths'),
            minChars = 3,
            timer = null;


        $searchInput.on('keyup', function (e) {
            searchTermKeyUpHandler(e);
        });
        $searchInput.on('keydown', function (e) {
            searchTermKeyDownHandler(e);
        });
        $searchForm.submit(function (event) {
            event.stopPropagation();
            event.preventDefault();
            handleSearch();
        });
        // $searchCloseButton.on('click',function(){ hideSearchResultPopup(); });
        $searchWrapper.on('click', function (e) {
            if (jQuery(e.target).parents("#header_tabs--search").length == 0
                && jQuery(e.target).parents("#header_searchForm").length == 0) {
                hideSearchResultPopup();
            }
        });

        var euroNumberCheck = function () {
            //display europe sales number for applicable countries during open hours
            var euroCountriesString = "DK,FI,IE,SE,NO,AT,DE,FR,CH,BE,NL,LU,GB";
            var now = new Date();
            if (now.getHours() >= 8 && now.getHours() < 17 && window.visitorCountry && euroCountriesString.indexOf(window.visitorCountry) > -1) {
                jQuery("nav.ps-nav .euro-phone-number").show();
            }
        }

        jQuery(document).ready(function () {
            if (window.visitorCountry) {
                euroNumberCheck();
            } else {
                window.setTimeout(function () {
                    euroNumberCheck();
                }, 1000);
            }
        });

        // Monitor scrolling and show/hide nav.
        var scrollPos = 0;
        var $globalHeader = jQuery(".ps-nav");
        //window.shyGlobalNav = true;
        window.addEventListener('scroll', function () {
            if (this.window.shyGlobalNav) {
                if ((document.body.getBoundingClientRect()).top > scrollPos) {
                    $globalHeader.css('height', '');
                    $globalHeader.slideDown(200);
                } else if (scrollPos < -100) {
                    $globalHeader.slideUp(200)
                    $globalHeader.css('height', '0');
                }
                scrollPos = (document.body.getBoundingClientRect()).top;
            }
        });

        if (
            document.URL.indexOf("www.pluralsight.com") > -1
            || document.URL.indexOf("beta.www.pluralsight.com") > -1
            || document.URL.indexOf("www-stage.pluralsight.com") > -1
            || document.URL.indexOf("beta.www-stage.pluralsight.com") > -1
        ) {
            jQuery(".ps-nav--search a.header_search--url").attr("href", "/search"); //Since AEM is dumb and sometimes changes this to an absolute link to http (which gets redirected and breaks the query) and we don't know why and I hate it.
        }

        var pageTitle = document.title; //grab early since chat bot likes to change this.

        function searchTermKeyUpHandler(e) {
            if (e.which == '27') {//escape
                e.preventDefault();
                hideSearchResultPopup();
            } else if (e.which == '40') {// down
                e.preventDefault();
                selectTerm();
            } else if (e.which == '38') {//up
                e.preventDefault();
                selectTerm(true);
            } else if (e.which == '13') {//enter - use highlighted option if available, otherwise use search text

            } else {
                if (timer) {
                    clearTimeout(timer); // clear the timer as keys are still entered
                }

                if ($searchInput) {
                    searchTerm = $searchInput.val().trim();
                }
                timer = setTimeout(function () {
                    if (searchTerm !== undefined) {
                        var term = jQuery.trim(searchTerm);
                        if (term.length >= minChars) {
                            search();
                        } else if (term.length < minChars) {
                            clearResults();
                        }
                    }
                }, 350);
            }

            //watch for users clicking on suggested search term - still need to pass referring page to Cludo.
            jQuery(document).on({
                click: function (e) {
                    var refurl = window.location.hostname + "" + window.location.pathname;
                    Cookies.set("header_search_origin", refurl, {expires: 1, path: '/'}); //save current page URL to send in with search analytics on the search page.
                    Cookies.set("header_search_origin_title", pageTitle, {expires: 1, path: '/'}); //save current page URL to send in with search analytics on the search page.
                }
            }, '.header_dropdown--resultInfo a');

            function selectTerm(prev) {
                var $selectedTerm = $resultsTarget.find('.header_dropdown--resultInfo.selected');
                if ($selectedTerm.length) {
                    var $selectedTermSibling = (prev ? $selectedTerm.prev() : $selectedTerm.next());

                    if ($selectedTermSibling.length) {
                        $selectedTerm.removeClass('selected');
                        $selectedTermSibling.addClass('selected');
                    }
                } else {
                    if (prev) {
                        $resultsTarget.find('.header_dropdown--resultInfo').last().addClass('selected');
                    } else {
                        $resultsTarget.find('.header_dropdown--resultInfo').first().addClass('selected');
                    }
                }
            }
        }

        function handleSearch() {
            var $selectedTermAnchor = $resultsTarget.find('.header_dropdown--resultInfo.selected a');
            if ($selectedTermAnchor.length) {
                $selectedTermAnchor[0].click();
            } else {
                var refurl = window.location.hostname + "" + window.location.pathname;
                Cookies.set("header_search_origin", refurl, {expires: 1, path: '/'}); //save current page URL to send in with search analytics on the search page.
                var refpt = document.title;
                Cookies.set("header_search_origin", refpt, {expires: 1, path: '/'}); //save current page URL to send in with search analytics on the search page.

                searchTerm = $searchInput.val().trim();
                grabCludoSettings();
                handleQuickLinks(searchTerm);
                if (!window.quickLinkHandled) {
                    var encodedSearchTerm = encodeURIComponent(searchTerm);
                    if (searchTerm == "") {
                        encodedSearchTerm = "*";
                    }
                    window.location.href = $headerNav.find(".header_search--url").attr('href') + "?q=" + encodedSearchTerm;
                }
            }
        }

        function searchTermKeyDownHandler(e) { //stop jitters from happening
            if (e.which == '40') {// down
                e.preventDefault();
            } else if (e.which == '38') {//up
                e.preventDefault();
            }
        }

        function clearResults() {
            $resultsTarget.html("");
            $resultsTargetCourses.html("");
            $resultsTargetPaths.html("");
        }

        //header search popup
        jQuery(".search-button__component .header_search--form").on("focus input", function (e) {
            e.preventDefault();
            var inputValue = jQuery(".header_search--input").val().trim();
            if (inputValue.length >= 3) {
                // show popout
                jQuery('.ps-nav .ps-nav--search #header_tabs--search').css('height', 'auto');
                showSearchResultPopup();
            } else if (inputValue.length == 0) {
                jQuery('.ps-nav .ps-nav--search #header_tabs--search').css('height', '');
                hideSearchResultPopup();
            }
            ;
        });

        function showSearchResultPopup() {
            if (!searchOpen) {
                lockBody();
                jQuery(".ps-nav--courses .header_dropdown").hide();
                jQuery(".ps-nav--courses .header_nav_primary").removeClass("open");
                $searchPopout.fadeIn(300);
                $searchInput.focus();
                searchOpen = true;
                window.scrollTo(0, 0);
            }
        }

        function hideSearchResultPopup() {
            if (searchOpen) {
                unlockBody();
                $searchPopout.fadeOut(300);
                clearResults();
                $searchInput.val("");
                searchOpen = false;
            }
        }

        function search() {
            var spaceRegEx = new RegExp('\ ', 'g');
            //Auto Complete
            jQuery.ajax({
                url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId + '/Autocomplete?text=' + searchTerm.replace(spaceRegEx, "-"),
                method: "GET",
                async: true,
                crossDomain: true,
                headers: {
                    "Content-Type": "application/json; charset=utf-8",
                    "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
                },
                success: function (data) {
                    // data[0] is the first word result
                    if (data.length > 0) {
                        renderSuggestionResults($resultsTarget, data);
                    } else {
                        clearResults();
                    }
                },
                error: function (xhr, status, error) {
                }
            });

            if (CludoSearch) {
                var courseFacet = {};
                courseFacet["categories"] = ["course"];

                var pathsFacet = {};
                pathsFacet["categories"] = ["paths"];


                var courseBody = {
                    "ResponseType": "json",
                    "query": searchTerm,
                    "facets": courseFacet,
                    "enableFacetFiltering": "true",
                    "page": "1",
                    "perPage": "8"
                };

                var pathsBody = {
                    "ResponseType": "json",
                    "query": searchTerm,
                    "facets": pathsFacet,
                    "enableFacetFiltering": "true",
                    "page": "1",
                    "perPage": "8"
                };

                //Courses Search
                jQuery.ajax({
                    url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId + '/search',
                    method: "POST",
                    async: true,
                    crossDomain: true,
                    processData: false,
                    data: JSON.stringify(courseBody),
                    headers: {
                        "Content-Type": "application/json; charset=utf-8",
                        "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
                    },
                    success: function (data) {
                        if (data.TypedDocuments && data.TypedDocuments.length > 0) {
                            renderResultsCourse($resultsTargetCourses, data);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log("ajax error: " + status + " - " + error);
                    }
                });
                //Paths Search
                jQuery.ajax({
                    url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId + '/search',
                    method: "POST",
                    async: true,
                    crossDomain: true,
                    processData: false,
                    data: JSON.stringify(pathsBody),
                    headers: {
                        "Content-Type": "application/json; charset=utf-8",
                        "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
                    },
                    success: function (data) {
                        if (data.TypedDocuments && data.TypedDocuments.length > 0) {
                            renderResultsPaths($resultsTargetPaths, data);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log("ajax error: " + status + " - " + error);
                    }
                });
            }

            function renderSuggestionResults($resultsTarget, data) {
                var html = '<ul class="header_dropdown--lists">';
                var searchUrl = $headerNav.find(".header_search--url").attr('href');
                var dashRegEx = new RegExp('\-', 'g');
                for (var i = 0; i < data.length && i < 5; i++) {
                    html += '<li class="header_dropdown--resultInfo">';
                    html += '<a class="header_dropdown--resultInfoTitle" href="' + searchUrl + '?q=' + data[i].replace(dashRegEx, "%20") + '">' + data[i].replace(dashRegEx, " ") + '</a>';
                    html += '</li>';
                }
                html += '</ul>';
                $resultsTarget.html(html);
            }

            function renderResultsCourse(targetElement, data) {
                var html = '<ul class="header_dropdown--lists">';
                html += '<li class="first">Courses</li>';
                for (var i = 0; i < data.TypedDocuments.length; i++) {
                    var course = data.TypedDocuments[i];
                    html += '<li>';
                    html += '<a href="https://www.pluralsight.com/courses/' + course.Fields.courseName.Value + '">' + course.Fields.Title.Value + '</a>';
                    html += '</li>';
                }
                html += '<li class="last"><a href="https://www.pluralsight.com/search?categories=course&q=' + encodeURI(searchTerm) + '">See more results &gt;</a></li>';
                html += '</ul>';
                targetElement.html(html);
            }

            function renderResultsPaths(targetElement, data) {
                var html = '<ul class="header_dropdown--lists">';

                if(data.Banners && data.Banners.length > 0) {
                    var bannerHtml = '<div class="banners">';
                    data.Banners.forEach(function(banner) {
                        var markup = `<div class="banner">${banner.Banner}</div>`;
                        bannerHtml += markup;
                    });
                    bannerHtml += `</div>`;
                    html = bannerHtml + html;
                }

                html += '<li class="first">Paths</li>';

                for (var i = 0; i < data.TypedDocuments.length; i++) {
                    var path = data.TypedDocuments[i];
                    html += '<li><div class="item">';
                    html += '<a href="https://www.pluralsight.com/paths/' + path.Fields.urlSlug.Value + '">';
                    html += '<div class="item-each">';
                    html += '<div class="item-image"><img src="' + path.Fields.thumbnail.Value + '"' + ' alt="' + path.Fields.Title.Value + '" /></div>';
                    html += '<div class="item-text">' + path.Fields.Title.Value;
                    html += '<ul>';
                    html += '<li>' + '<span>' + path.Fields.numberOfCourses.Value + '</span>' + ' Courses' + '</li>';
                    html += '<li>' + '<span>' + path.Fields.numberOfHours.Value + '</span>' + ' Hours' + '</li>';
                    html += '</ul>';
                    html += '</div>';
                    html += '</div>';
                    html += '</a>';
                    html += '</div></li>';
                }
                html += '<li class="last"><a href="https://www.pluralsight.com/product/paths">View all paths &gt;</a></li>';
                html += '</ul>';
                targetElement.html(html);
            }
        }

        function closeButton() {
            unlockBody();
            var inputValue = jQuery('#header_dropdown--resultList');
            if (jQuery(this).closest('.ps-nav li').hasClass('open')) {
                unlockBody();
                jQuery('.ps-nav').removeClass('desktop-active');
                jQuery('.ps-nav li').removeClass('open');
                jQuery('.header_dropdown').fadeOut(300);
                jQuery('.ps-nav .ps-nav--search #header_tabs--search').css('height', '');
            }
            if (inputValue.children().length > 0) {
                hideSearchResultPopup();
            }
        }

        function showHideNav() {
            var psHeader = jQuery('.ps-nav'),
                navList = jQuery('.ps-nav li'),
                utilMenu = jQuery('.ps-nav--util').children();

            if (jQuery(window).width() < 1024) {
                jQuery(psHeader).addClass('ps-nav--mobile');
                jQuery(psHeader).removeClass('ps-nav--desktop desktop-active');
                utilMenu.appendTo('.ps-nav--main');
                jQuery('.ps-nav .header_dropdown').show();
                jQuery('.ps-nav--links').css('display', '');
                jQuery('#header_tabs--products .link-items > ul').addClass('active');
                if (!psHeader.hasClass('mobile-active')) {
                    navList.removeClass('open move-out');
                    jQuery('.ps-nav .header_dropdown').removeClass('slide-out');

                }
                if (!jQuery('.ps-nav li.ps-nav--contact .euro-phone-number').is(':visible')) {
                    jQuery('.ps-nav li.ps-nav--contact').css('border-bottom', '0');
                } else {
                    jQuery('.ps-nav li.ps-nav--contact').css('border-bottom', '1px solid #212121');
                }
            } else if (jQuery(window).width() >= 1024) {
                jQuery(psHeader).addClass('ps-nav--desktop');
                jQuery(psHeader).removeClass('ps-nav--mobile mobile-active');
                jQuery('#header_tabs--products .link-items > ul').css('display', '').removeClass('active');
                jQuery('.ps-nav--links').removeClass('back-to-main').css('display', 'flex');
                if (jQuery('.ps-nav--main').children().length == 8) {
                    jQuery('.ps-nav--main > li').slice(-4).appendTo('.ps-nav--util');
                } else if (jQuery('.ps-nav--main').children().length == 7) {
                    jQuery('.ps-nav--main > li').slice(-3).appendTo('.ps-nav--util');
                } else if (jQuery('.ps-nav--main').children().length == 6) {
                    jQuery('.ps-nav--main > li').slice(-2).appendTo('.ps-nav--util');
                }
                if (!jQuery('.ps-nav li').hasClass('open')) {
                    jQuery('.ps-nav .header_dropdown').hide();
                }
                if (psHeader.hasClass('ps-nav--desktop') && !psHeader.hasClass('desktop-active')) {
                    jQuery('.ps-nav li').removeClass('open move-out');
                    jQuery('.ps-nav .header_dropdown').removeClass('slide-out');
                    jQuery('.ps-nav .header_dropdown').hide();
                }
            }
        }

        function desktopDropdown() {
            jQuery(this).siblings('.header_dropdown').fadeToggle(300);
            jQuery('.header_dropdown').not(jQuery(this).siblings()).fadeOut(300);
            jQuery(this).parent().fadeIn(300).toggleClass('open');
            jQuery('.ps-nav li.open').not(jQuery(this).parent()).removeClass('open');
            jQuery('.ps-nav li.ps-nav--search #header_tabs--search').css('height', '');

            if (jQuery('.ps-nav li').hasClass('open')) {
                jQuery('.ps-nav--desktop').addClass('desktop-active');
            } else {
                jQuery('.ps-nav--desktop').removeClass('desktop-active');
            }
            if (!jQuery('.ps-nav--search').hasClass('open')) {
                var inputValue = jQuery('#header_dropdown--resultList');
                if (inputValue.children().length > 0) {
                    hideSearchResultPopup();
                }
            }
        }

        function mobileDropdown() {
            jQuery(this).siblings('.header_dropdown').toggleClass('slide-out');
            jQuery(this).find('.header_dropdown').not(jQuery(this).parent()).removeClass('slide-out');
            jQuery(this).parent().fadeIn(300).toggleClass('open');
            jQuery('.ps-nav li.open').not(jQuery(this).parent()).removeClass('open');
            jQuery(this).parent().siblings().toggleClass('move-out');
            jQuery('.ps-nav li.open').not(jQuery(this).parent()).removeClass('move-out');

            if (jQuery('.ps-nav li').hasClass('open')) {
                jQuery('.ps-nav--links').addClass('back-to-main');
            } else {
                jQuery('.ps-nav--links').removeClass('back-to-main');
            }
        }

        /************
         /* DROPDOWNS
         /***********/
        jQuery(window).on('load resize', function () {
            showHideNav();
        });

        jQuery('.ps-nav--links > ul > li > a:not(:only-child)').on('click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            if (jQuery(window).width() < 1024) {
                mobileDropdown.call(this);
            } else if (jQuery(window).width() >= 1024) {
                desktopDropdown.call(this);
            }

            // prevents 'focus' for mobile to NOT to display keyboard
            if (jQuery(this).parent().hasClass('ps-nav--search')) {
                jQuery('#header_searchForm .header_search--input').focus();
            } else {
                document.activeElement.blur();
            }

            // lock body when dropdown opens
            if (jQuery('.ps-nav li').hasClass('open') || jQuery('.ps-nav').hasClass('mobile-active')) {
                lockBody();
            } else {
                unlockBody();
            }
        });

        //click button to close dropdowns
        jQuery('.header_dropdown .closebutton').on('click', function (e) {
            e.preventDefault();
            closeButton.call(this);
        });

        //course dropdown tabs
        jQuery(document).on({
            mouseenter: function () {
                var tab_id = jQuery(this).attr('data-tab');
                jQuery('#header_tabs li.header_tabs_link').removeClass('active');
                jQuery('.header_tabs_content').removeClass('active');
                jQuery(this).addClass('active');
                jQuery("#" + tab_id).addClass('active');
            }
        }, '#header_tabs li.header_tabs_link');

        //click overlay to close/reset dropdowns
        jQuery(document).on({
            click: function (e) {
                var inputValue = jQuery('#header_dropdown--resultList');
                var container = jQuery('#header_tabs, #header_tabs--search, #header_tabs--products, #header_tabs--resources, #header_tabs--signin');
                if (!container.is(e.target) && container.has(e.target).length == 0) {
                    unlockBody();
                    jQuery('.ps-nav li').removeClass('open');
                    jQuery('.ps-nav .ps-nav--search #header_tabs--search').css('height', '');
                    jQuery('.header_dropdown').fadeOut(300);
                }
                if (inputValue.children().length > 0) {
                    hideSearchResultPopup();
                }
            }
        }, '.header_dropdown');

        //handle mobile hamburger menu
        jQuery(document).on({
            click: function (e) {
                e.preventDefault();
                var toggleMobile = jQuery(this).parents('.ps-nav--mobile');
                toggleMobile.toggleClass('mobile-active');

                lockBody();
                // reset dropdown/search on close
                if (!jQuery('.ps-nav--mobile').hasClass('mobile-active')) {
                    var inputValue = jQuery('#header_dropdown--resultList');
                    var container = jQuery('#header_tabs, #header_tabs--search, #header_tabs--products, #header_tabs--resources, #header_tabs--signin');

                    unlockBody();
                    if (!container.is(e.target) && container.has(e.target).length == 0) {
                        unlockBody();
                        jQuery('.ps-nav').removeClass('search-is-active');
                        jQuery('.ps-nav li').removeClass('open move-out');
                        jQuery('.ps-nav--links').removeClass('back-to-main');
                        jQuery('.header_dropdown').removeClass('slide-out');

                        if (inputValue.children().length > 0) {
                            hideSearchResultPopup();
                        }
                    }
                }
            }
        }, '#menuMobile');

        //handle mobile search
        jQuery(document).on({
            click: function (e) {
                e.preventDefault();
                lockBody();
                jQuery('.ps-nav').addClass('mobile-active search-is-active');
                if (jQuery('.ps-nav--mobile').hasClass('mobile-active')) {
                    jQuery('.ps-nav li').addClass('move-out');
                    jQuery('.ps-nav li.ps-nav--search').addClass('open').removeClass('move-out');
                    jQuery('.ps-nav li.ps-nav--search.open .header_dropdown').addClass('slide-out');
                    jQuery('#header_searchForm .header_search--input').focus();
                }
            }
        }, '#searchMobile');

        //mobile accordion functionality
        jQuery(document).on({
            click: function (e) {
                e.preventDefault();
                jQuery(this).next('ul').slideToggle();
                jQuery(this).toggleClass('active');
            }
        }, '.ps-nav--mobile #header_tabs--products .link-products');

        // change CTA button text and link in /blog/
        if (window.location.pathname.indexOf('/blog') > -1) {
            var $navFTButton = jQuery('nav.ps-nav .ps-nav--cta__ft .button');
            $navFTButton.text('Skill up for free');
            $navFTButton.attr('href', 'https://www.pluralsight.com/product/skills/free');
        }
    };

    if(jQuery('.global-header').length > 0) {
        // use init() callback to init the component after page load
        jQuery(() => {
            init();
        });
    }
})();
if (jQuery("#ftr").length) {
  const $dd = jQuery("#ftr .ftr-cat-links-col");

  $dd.on( "click", function() {
    if (jQuery( window ).width() <= 768) {
      const dropdown = jQuery(this).find(".ftr-dd");
      if (dropdown.text() === "╲╱") {
        dropdown.text("╱╲");
      } else {
        dropdown.text("╲╱");
      }
      dropdown.parent().find(".ftr-cat-links").slideToggle( "slow" );
    }
  });
}


/*global
  jQuery
 */
jQuery(function() {
    var $text4 = jQuery('.text-4.section');

    $text4.each(function() {
        //remove margin from individual paragraphs
        jQuery('.text-4 span.remove-bottom-margin').closest('p').addClass('remove-bottom-margin');

        //remove margin from component, if last paragraph
        jQuery('.text-4 p:last-of-type span.remove-bottom-margin').closest('.text-4').addClass('remove-bottom-margin');

        //carry color class to bullets, if they exist and span is only child.
        var colorClassNames = ['tc-black','tc-white','tc-gray'];
        [].forEach.call(colorClassNames,function(className){
            jQuery('.text-4 li span.' + className).each(function(key,item){
                var $pointer = jQuery(item);
                var resolved = false;
                var safetyCount = 0;

                while (!resolved && safetyCount < 10){
                    $pointer = $pointer.parent();

                    //only apply change or loop this to the next level if tag is alone.
                    if ($pointer.contents().length == 1){
                        if ($pointer.prop("tagName") =="LI"){
                            $pointer.addClass(className);
                            resolved = true;
                        }
                    } else {
                        resolved = true;
                    }
                    safetyCount++;
                }
            });
        });
    });
});

jQuery('.text-3 span.remove-bottom-margin').closest('p').addClass('remove-bottom-margin');
function displayTargetedSections(){
    if (typeof wcmmodedisabled != "undefined" && wcmmodedisabled ){
        // set by interest profile first
        if (typeof selectedInterest != "undefined"){
            jQuery('.targeted-audience[data-targeted-profile="' + selectedInterest + '"]').siblings('.targeted-audience').hide();
            jQuery('.targeted-audience[data-targeted-profile="' + selectedInterest + '"]').show();
        } else if (typeof profiledInterest != "undefined"){
            jQuery('.targeted-audience[data-targeted-profile="' + profiledInterest + '"]').siblings('.targeted-audience').hide();
            jQuery('.targeted-audience[data-targeted-profile="' + profiledInterest + '"]').show();
        }

        //override and switch to business where content is available
        if (typeof selectedConsumerType != "undefined" && selectedConsumerType == "business"){
            jQuery('.targeted-audience[data-targeted-profile="business"]').siblings('.targeted-audience').hide();
            jQuery('.targeted-audience[data-targeted-profile="business"]').show();
        }

        if (document.cookie.indexOf("ps_sct=") > -1){
            var customerType = document.cookie.split("ps_sct=")[1].split(";")[0];
            if (typeof customerType != "undefined" && customerType === "individual"){
                var individualSections = jQuery('.targeted-audience[data-targeted-customer-type="pluralsight-customer-type:individual"]');
                individualSections.siblings('.targeted-audience').hide();
                individualSections.show();
            } else if (typeof customerType != "undefined" && customerType === "business"){
                var businessSections = jQuery('.targeted-audience[data-targeted-customer-type="pluralsight-customer-type:business"]');
                businessSections.siblings('.targeted-audience').hide();
                businessSections.show();
            }
        }


        //grab location code, activate any location-based targeted sections.
        if (window.visitorCountry){
            jQuery('.targeted-audience[data-targeted-countries*="' + visitorCountry + '"]').siblings('.targeted-audience').hide();
            jQuery('.targeted-audience[data-targeted-countries*="' + visitorCountry + '"]').show();
        } else {
            window.setTimeout(function(){
                if (window.visitorCountry){
                    jQuery('.targeted-audience[data-targeted-countries*="' + visitorCountry + '"]').siblings('.targeted-audience').hide();
                    jQuery('.targeted-audience[data-targeted-countries*="' + visitorCountry + '"]').show();
                }
            },1000); //Try once more after a delay if pricing service didn't get country fast enough
        }


        if (jQuery('.targeted-language').length > 0){
            //grab language code from headers by post to a helper app, activate any language-based targeted sections.
            jQuery.ajax({ 
                url: "https://ajaxhttpheaders.appspot.com", 
                dataType: 'jsonp', 
                success: function(headers) {
                    var languageHeader = headers['Accept-Language'];

                    //parse out first 2-char language code.
                    if (languageHeader.indexOf(";" > 0)){
                        var languageArray = languageHeader.split(";")[0].split(",");
                        for (i = 0; i < languageArray.length; i++){
                            if (languageArray[i].trim().length == 2){
                                var languageCode = languageArray[i].trim();
                                jQuery('.targeted-audience[data-targeted-languages*="' + languageCode + '"]').siblings('.targeted-audience').hide();
                                jQuery('.targeted-audience[data-targeted-languages*="' + languageCode + '"]').show();
                                break;
                            }
                        }
                    }
                }
            });
        }
    }
}

jQuery(document).ready(function(){
    if (jQuery('.targeted-audience').length > 0){
        displayTargetedSections();
    }
});
if (jQuery('.simple-navigation').length) {
    jQuery('#simpleNavMobile').on('change', function() {
        if(jQuery(this).is(':checked')) {
            jQuery('.simple-nav').addClass('simple-nav--expand');
        } else {
            jQuery('.simple-nav').removeClass('simple-nav--expand');
        }
    });
    jQuery('.simple-nav ul li a').each(function(key,item){
        var href = jQuery(item).attr('href');
        var urlContainsHref = document.URL.indexOf(href) > -1;
        if (urlContainsHref){
            var noFurtherPaths = document.URL.split(href)[1].indexOf("/") == -1;
            if (noFurtherPaths){
                jQuery(item).parent().addClass('active');
            }
        }
    });
}
/*global
  jQuery, Utils
 */
// iife to set up component during page load
(() => {
    'use strict';

    const init = () => {
        jQuery(function () {
            var $linkListSubNavs = jQuery('.link-list-text');
            $linkListSubNavs.each(function () {
                jQuery(document).off('click.psLinkListText');
                jQuery(document).on('click.psLinkListText', '.linklist-subnav--mobile', function(e) {
                    var clickedSubnav = jQuery(e.target).closest('.linklist-subnav');
                    clickedSubnav.find('ul').slideToggle('slow');
                    clickedSubnav.toggleClass('open');
                });

                jQuery('.linklist-subnav ul li a').each(function(key,item){
                    var href = jQuery(item).attr('href');
                    var urlContainsHref = document.URL.indexOf(href) > -1;
                    if (urlContainsHref){
                        var noFurtherPaths = document.URL.split(href)[1].indexOf('/') == -1;
                        if (noFurtherPaths){
                            jQuery(item).parent().addClass('active');
                        }
                    }
                });
            });
        });
    };

    // use init() callback to init the component after page load
    jQuery(() => {init();});

    // use init() callback to init the component after target finishes
    document.addEventListener('at-content-rendering-succeeded', function(e) {
        jQuery(() => {init();});
    });
})();

if (jQuery(".link a[data-anchor]").length){
    jQuery(document).ready(function(){
        jQuery(".link a[data-anchor]").each(function (index, deepLink) {
            jQuery(deepLink).click(function(e) {
                if (typeof jQuery(deepLink).data("anchor") != "undefined"){
                    location.hash = '#' + jQuery(deepLink).data("anchor");
                    window.anchorSetByModal = true;
                }
            });
        });
    
        //If a hash was set and pointed at a link, click it on load.
        if (location.hash != '') {
            var hashName = location.hash.slice(1, location.hash.length);
            var $target = jQuery("[data-anchor='" + hashName + "']");
            if ($target.length){
                $target.click();
            }
        }

        //clear any anchors after fancybox is closed, for fancyboxes who set an anchor
        document.addEventListener('afterClose.fb', function() {
            if (window.anchorSetByModal){
                history.pushState("", document.title, window.location.pathname + window.location.search);
                window.anchorSetByModal = false;
            }
        });
    });
}
if (document.querySelectorAll('img[data-img-width]').length) {

    function resizeImage(image) {
        var imgdata = parseInt(image.dataset.imgWidth);
        if (imgdata !== 100) {
            var imgwidth = image.width;
            var imgCount = 0;
            if (typeof imgwidth === "undefined" || imgwidth == 0 || imgwidth == 1) {
                setTimeout(function(){
                    resizeImage(image);
                }, 250);
            } else {
                imgwidth = image.width;
                var width = Math.round(imgwidth * (imgdata/100));
                image.style.width = width + "px";
                delete image.dataset.imgWidth;
            }
        }
    }

    var resizedImages = document.querySelectorAll('img[data-img-width]');
    for (var i = 0; i < resizedImages.length; ++i) {
        resizeImage(resizedImages[i]);
    }    
}


if (jQuery('img.overflow').length > 0){

    function resizeAllOverflows(){
        jQuery('img.overflow').each(function(index,image){
            var thisHeight = jQuery(image).outerHeight();
            jQuery(image).parent().css('height',thisHeight + "px");
        });
    }

    //catch any time window reflows
    jQuery(window).resize(function(){
        resizeAllOverflows();
    });

    //resize immediately on script run
    resizeAllOverflows();
    jQuery('img.overflow').show();

    //resize one more time with assets ready, in case wrong dimensions used from an incomplete asset.
    var prev_handler = window.onload;
    window.onload = function(){
        if (prev_handler){
            prev_handler();
        }
        resizeAllOverflows();
    };
}
jQuery('.modal-wrapper').each(function (index, component) {
    var $component = jQuery(component);
    var modalWidth = $component.find('.modal-override-width').val();

    if(modalWidth == '') {
        jQuery(this).css('width','800px').css('max-width','100%'); // Default width
    }

    //Attaching fancybox so it overrides new width and default max-width: 800px
    jQuery('.fancybox').fancybox({
        helpers: {
            overlay: {
                css: {'background': 'rgba(0,0,0,0.5)'}
            }
        }
    });
});
jQuery(".column-control-container>.row.add-flex>.columns").each(function(key,item){
    if (jQuery(item).children().length == 1){
        jQuery(item).children('.generic-block').css("height","100%");
        jQuery(item).children('.generic-block').children(".full-block-link").css("height","100%");
        jQuery(item).children('.generic-block').children(".full-block-link").children(".generic-block-wrapper").css("height","100%");
        jQuery(item).children('.generic-block').children(".generic-block-wrapper").css("height","100%");
    }
});

(() => {
    'use strict';

    const selectors = {
        self: '[data-cmp-is="flow-demo-image"]',
        tooltip: '[data-cmp-hook-flow-demo-image="tooltip"]',
        image: '[data-cmp-hook-flow-demo-image="image"]',
    };

    const breakpoint = 768;
    const padding = 25;

    const positionTooltip = ($demoItem, $tooltip, $image) => {
        if ($tooltip && $image) {
            const imageWidth = $image.width();
            const imageHeight = $image.height();
            const tooltipWidth = parseInt($tooltip.outerWidth());
            const tooltipHeight = parseInt($tooltip.outerHeight());

            if ($tooltip.is('[data-centered]')) {
                let css = {};

                if ($(window).width() > breakpoint) {
                    css.top = (imageHeight - tooltipHeight) / 2;
                    css.left = (imageWidth - tooltipWidth) / 2;
                } else {
                    css.top = padding;
                    css.left = ($demoItem.width() - tooltipWidth) / 2;
                }

                $tooltip.css(css);
            } else if ($tooltip.is('[data-anchored]')) {
                const imageOriginalWidth = $image.data('original-width');
                const imageRenderedOffset = imageWidth / imageOriginalWidth;

                const tooltipCoords = $tooltip.data('coords')
                    ? $tooltip.data('coords').split(',')
                    : [];

                const mapXStart = parseInt(tooltipCoords[0]) * imageRenderedOffset;
                const mapXStop = parseInt(tooltipCoords[2]) * imageRenderedOffset;
                const mapYStart = parseInt(tooltipCoords[1]) * imageRenderedOffset;
                const mapYStop = parseInt(tooltipCoords[3]) * imageRenderedOffset;
                const mapHeight = mapYStop - mapYStart;

                const anchorOnDesktop = () => {
                    let css = {};
                    const canPositionRight = tooltipWidth <= imageWidth - mapXStop;
                    const canPositionLeft = tooltipWidth <= mapXStart;
                    const canPositionTop = tooltipHeight <= mapYStart;

                    if (canPositionRight || canPositionLeft) {
                        if (canPositionRight) {
                            $tooltip.attr('data-tooltip-pos', 'right');
                            css.left = `${mapXStop}px`;
                        } else {
                            $tooltip.attr('data-tooltip-pos', 'left');
                            css.left = `${mapXStart - tooltipWidth}px`;
                        }

                        $tooltip.attr('data-tooltip-map-y', 'top');
                        css.top = `${mapYStart}px`;

                        const canFlowDown = tooltipHeight + mapYStart <= imageHeight;
                        const canFlowUp = tooltipHeight <= mapYStop;
                        if (!canFlowDown && canFlowUp) {
                            $tooltip.attr('data-tooltip-map-y', 'bottom');
                            css.top = `${mapYStop - tooltipHeight}px`;
                        }
                    } else {
                        if (canPositionTop) {
                            $tooltip.attr('data-tooltip-pos', 'top');
                            css.top = `${mapYStart - tooltipHeight}px`;
                        } else {
                            $tooltip.attr('data-tooltip-pos', 'bottom');
                            css.top = `${mapYStop}px`;
                        }

                        $tooltip.attr('data-tooltip-map-x', 'left');
                        css.left = `${mapXStart}px`;

                        const canFlowRight = tooltipWidth + mapXStart <= imageWidth;
                        const canFlowLeft = tooltipWidth <= mapXStop;
                        if (!canFlowRight && canFlowLeft) {
                            $tooltip.attr('data-tooltip-map-x', 'right');
                            css.left = `${mapXStop - tooltipWidth}px`;
                        }
                    }

                    $tooltip.css(css);
                };

                const anchorOnMobile = () => {
                    let css = {};
                    const viewportWidth = $demoItem.width();
                    const mapXStartMobile = mapXStart - padding;
                    const mapXStopMobile = mapXStop + padding;

                    $tooltip.attr('data-tooltip-pos', 'bottom');
                    $tooltip.attr('data-tooltip-map-x', 'left');
                    css.top = `${mapHeight + padding}px`;
                    css.left = `0px`;

                    if (viewportWidth > imageOriginalWidth - mapXStartMobile) {
                        if (viewportWidth > mapXStopMobile) {
                            $tooltip.attr('data-tooltip-map-x', 'left');
                            css.left = `${mapXStartMobile}px`;

                            const canFlowRight = tooltipWidth + mapXStartMobile <= viewportWidth;
                            const canFlowLeft = tooltipWidth <= mapXStopMobile;

                            if (!canFlowRight && canFlowLeft) {
                                $tooltip.attr('data-tooltip-map-x', 'right');
                                css.left = `${mapXStopMobile - tooltipWidth}px`;
                            }
                        } else {
                            $tooltip.attr('data-tooltip-map-x', 'right');
                            css.right = `0px`;
                            css.left = 'unset';
                        }
                    }

                    $tooltip.css(css);
                };

                if ($(window).width() > breakpoint) {
                    anchorOnDesktop();
                } else {
                    anchorOnMobile();
                }
            }
        }
    };

    const positionBgImage = ($container, $image, mapCoords) => {
        if ($image) {
            const viewportWidth = $container.width();
            const $imageContainer = $image.parent();
            const imageOriginalWidth = $image.data('original-width');
            const imageOriginalHeight = $image.data('original-height');
            let bgPositionX = 0,
                bgPositionY = 0;

            if (mapCoords.length >= 3) {
                const mapXStart = parseInt(mapCoords[0]) - padding;
                const mapXStop = parseInt(mapCoords[2]) + padding;
                const mapYStart = parseInt(mapCoords[1]) - padding;

                bgPositionX = mapXStart;
                bgPositionY = mapYStart;

                if (viewportWidth > imageOriginalWidth - mapXStart) {
                    if (viewportWidth > mapXStop) {
                        bgPositionX = 0;
                    } else {
                        bgPositionX = mapXStop - viewportWidth;
                    }
                }

                bgPositionX = bgPositionX * -1;
                bgPositionY = bgPositionY * -1;
            }

            $imageContainer.css({
                width: imageOriginalWidth,
                height: imageOriginalHeight + bgPositionY,
                backgroundImage: `url(${$image.attr('src')})`,
                backgroundPositionX: `${bgPositionX}px`,
                backgroundPositionY: `${bgPositionY}px`,
            });

            $(document).trigger('demoImageLoaded');
        }
    };

    const init = () => {
        const $demoImages = jQuery(selectors.self);

        $demoImages.each((index, element) => {
            element.removeAttribute('data-cmp-is');

            const $demoItem = jQuery(element);
            const $tooltip = $demoItem.find(selectors.tooltip);
            const $image = $demoItem.find(selectors.image);
            const $imageContainer = $image.parent();
            const mapCoords = $tooltip.data('coords') ? $tooltip.data('coords').split(',') : [];

            const initDemoItem = () => {
                if ($(window).width() > breakpoint) {
                    $imageContainer.removeAttr('style');
                } else {
                    positionBgImage($demoItem, $image, mapCoords);
                }

                positionTooltip($demoItem, $tooltip, $image);
            };

            $(window).on('load resize', () => setTimeout(initDemoItem, 200));
        });
    };

    jQuery(() => {
        init();
    });

    document.addEventListener('at-content-rendering-succeeded', (e) => {
        jQuery(() => {
            init();
        });
    });
    document.addEventListener('at-content-rendering-failed', (e) => {
        jQuery(() => {
            init();
        });
    });
})();


(() => {
    'use strict';

    const selectors = {
        self: '[data-cmp-is="flow-demo"]',
        indicator: '[data-cmp-hook-flow-demo="indicator"]',
        carousel: '[data-cmp-hook-flow-demo="carousel"]',
        next: '[data-cmp-hook-flow-demo="next"]',
        title: '[data-cmp-hook-flow-demo="title"]',
    };

    const init = () => {
        const $demos = jQuery(selectors.self);
        const _track = window.scTrack || (() => {});

        $demos.each((index, element) => {
            element.removeAttribute('data-cmp-is');

            const $demo = jQuery(element);
            const $carousel = $demo.find(selectors.carousel);
            const $indicators = $demo.find(selectors.indicator);
            const $nexts = $demo.find(selectors.next);
            const demoTitle = $demo.find(selectors.title).text();
            let currentStep = 1;

            const setActiveIndicator = (index) => {
                $indicators.removeClass('cmp-flow-demo__indicator--active');
                jQuery($indicators[index]).addClass('cmp-flow-demo__indicator--active');
            };

            const trackAction = (action) => {
                _track('link', {
                    eventName: `Flow Demo > ${demoTitle} > Step ${currentStep} > ${action}`,
                    demo: true,
                });
            };

            $indicators.each((index, indicator) => {
                const $indicator = jQuery(indicator);
                $indicator.on('click', () => {
                    setActiveIndicator(index);
                    $carousel.slick('slickGoTo', index);
                });
            });

            $nexts.each((index, next) => {
                const $next = jQuery(next);
                $next.on('click', () => {
                    $carousel.slick('slickNext');
                });
            });

            $carousel.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
                currentStep = currentSlide + 1;
                setActiveIndicator(nextSlide);
            });

            $carousel.on('swipe', (event, slick, direction) =>
                trackAction(`Swipe ${direction === 'left' ? 'Next' : 'Prev'}`)
            );

            $demo.on('click', `a, button, ${selectors.indicator}`, (e) => {
                trackAction($(e.target).text());
            });

            $carousel.slick({
                arrows: false,
                infinite: true,
                speed: 300,
                fade: true,
                cssEase: 'linear',
                adaptiveHeight: true,
            });

            $(document).on('demoImageLoaded', () => $carousel.slick('setPosition'));
        });
    };

    jQuery(() => {
        init();
    });

    document.addEventListener('at-content-rendering-succeeded', (e) => {
        jQuery(() => {
            init();
        });
    });
    document.addEventListener('at-content-rendering-failed', (e) => {
        jQuery(() => {
            init();
        });
    });
})();

/*global
  jQuery, Utils
 */
(() => {
  'use strict';
  const intervals = [];
  const init = () => {
    intervals.forEach(clearInterval);

    const $textScrollerComponents = jQuery(".text-scroller-component.aem-component");
    $textScrollerComponents.each( (index, element) => {
      const $textScrollerComponent = jQuery(element)

      const heroCycleText = function () {
        const $options = $textScrollerComponent.find (".text-fader .text-content");
        const $current = $textScrollerComponent.find (".text-fader .text-content.in");
        let $next = $current.next(".text-fader .text-content");
        if ($next.length === 0) {
          $next = $options.eq(0);
        }

        $current.removeClass("in").addClass("out");

        setTimeout(function () {
          $current.removeClass("out");
          $next.addClass("in");
        }, 100);
      };

       intervals.push(setInterval(heroCycleText, 2500));

    });
  };

  jQuery(() => {init();});

  document.addEventListener('at-content-rendering-succeeded', function(e) {
    jQuery(() => {init();});
  });
  document.addEventListener('at-content-rendering-failed', function(e) {
    jQuery(() => {init();});
  });
})();









/*global
  jQuery, Utils
 */
jQuery(function () {

  // select all the Tabv2 components
  const $tabsV2Components = jQuery('.tabs-v2-component.aem-component');

  // loop over and initiate all the Tabv2 components
  $tabsV2Components.each(function () {
    const $tabsV2Component = jQuery(this);
    const $tabsList = $tabsV2Component.find('.tab-list');
    const $tabs = $tabsList.find('.tab');
    const $tabsLink = $tabs.find('a.tab-link');
    const $tabAreasList = $tabsV2Component.find('.tab-areas');
    const $tabAreas = $tabAreasList.find('.tab-area');

    /**
     * Deactive tabs and areas, and active the newly clicked tab and associated area
     * @param clickedTab
     */
    const tabClickHandler = (clickedTab) => {
      const $clickedTab = jQuery(clickedTab).closest('li');
      const tabNumber = $clickedTab.data('tab-number');
      const tabAreaWithNumberSelector = ".tab-area[data-area-number='" + tabNumber + "']";
      const $tabAreaWithNumber = $tabAreasList.find(tabAreaWithNumberSelector);

      // deactivate all tabs
      $tabs.removeClass('active');

      // active newly clicked tab
      $clickedTab.addClass('active');

      // deactive all tab areas
      $tabAreas.removeClass('active');

      // activate tab area associated with newly clicked tab
      $tabAreaWithNumber.addClass('active');

      // if tabArea contains a slick carousel, re-initialize it
      $tabAreaWithNumber.find('.slick-slider.slick-initialized').slick('refresh');
    };

    // apply tab click handler
    $tabsLink.on('click', (e) => {
      tabClickHandler(e.target);
      return false;
    });
  });
});

if(jQuery('.section.tabs').length) {
    var hash = location.hash;
    jQuery('.tabs--list').each(function() {
        var $component = jQuery(this);
        $component.find('ul li.tab--item').on('click', function(e){
            e.preventDefault();
            var $tab = jQuery(this);
            var block_class = jQuery(this).attr('data-tab');

            $tab.closest('ul').find('li.tab--item').removeClass('active');
            $tab.addClass('active');

            $component.find('.tabs--content .generic-block-wrapper:not(:hidden)').removeClass('active').hide();
            $component.find(".generic-block-wrapper." + block_class).addClass('active').fadeIn();
            return false;
        });

        $component.find('ul li.tab--item:first').click();

        if(hash) {
            $component.find('ul li.tab--item[data-tab="' + hash.slice(1) + '"]').click();
        }
    });
}
/*global
  jQuery,setSelectedConsumerType
 */
jQuery(function() {
  var $switchToggle = jQuery('.switch-toggle.section');
  var counter = 1;

  $switchToggle.each(function() {
    var $switch = jQuery(this);
    var $switchRadio = $switch.find('input.switch-input[type=radio]');
    var $switchBlock = $switch.find('.switch-toggle-block');
    var $switchToggle = $switch.find('.switch-toggle--switchers');
    var $switchIndividual = $switchToggle.find('#individual');
    var $switchBusiness = $switchToggle.find('#business');

    // Group radio buttons
    $switchRadio.attr('name','group' + counter);
    counter++;

    $switchRadio.on('click', function() {
      var inputValue = jQuery(this).val();
      var targetBox = jQuery('.' + inputValue);

      // show / hide based on switch
      $switchBlock.not(targetBox).fadeOut(300, function(){
        jQuery(targetBox).fadeIn(300);
      });

      $switchToggle.toggleClass('switch-toggle-a').toggleClass('switch-toggle-b');

      // cookies
      if (inputValue === 'plans_individual'){
        setSelectedConsumerType('individual');
      } else if (inputValue === 'plans_business'){
        setSelectedConsumerType('business');
      }
    });

    // read the customer type from cookie and adjust the toggle as necessary
    const customerCookie = Utils.cookies.getCookie('ps_sct');
    if (customerCookie) {
      if (Utils.url.queryParameters.get('b2c-price') || customerCookie === 'individual') {
        if (!$switchToggle.hasClass('switch-toggle-a')) {
          // show individual if it's not already showing
          $switchIndividual.trigger('click');
        }
      } else if (Utils.url.queryParameters.get('b2b-price') || customerCookie === 'business') {
        // show business if it's not already showing
        $switchBusiness.trigger('click');
      }
    }
  });
});

(function($){
    jQuery(document).ready(function(){ 
        window.$speakers = jQuery(".live_speakers");
        jQuery.each( $speakers, function( key, value ) {
            var $speakerHtml = jQuery( value )[0].outerHTML;
            var $modalContent = jQuery( this ).parent().find(".speakers_modal .speakers_modal--content");
            $modalContent.html($speakerHtml);
            $modalContent.find(".live_speakers.live_cards").addClass("active");
        });

        $speakers.click(function() {
            var $modal = jQuery( this ).parent().find(".speakers_modal");
            $modal.fadeToggle();
        });

        jQuery(".speakers_modal--close").click(function() {
            var $modal = jQuery( this ).closest(".speakers_modal");
            $modal.fadeToggle();
        });
    });
})(jQuery);
(function(){
    var $component = jQuery(".prfeed-container");

    var $showMore = $component.find(".prf-feed-see-more");
    // If we need to limit # of updates to display, uncomment
    /*var $allCards = $component.find(".prf-flex-card");

    $allCards.hide();
    $allCards.slice(0,5).show();
    if(jQuery(".prf-flex-card:hidden").length != 0) {
        $showMore.fadeIn('slow');
    }
    $showMore.on('click', function(e) {
        e.preventDefault();
        jQuery(".prf-flex-card:hidden").slice(0, 3).fadeIn('slow');
        if(jQuery(".prf-flex-card:hidden").length == 0) {
            $showMore.fadeOut('slow');
        }
    });*/

    // product user type separator
    jQuery(".prf-type .prf-userType").each(function() {
        var separator = jQuery(this).html();
        jQuery(this).html(separator.replace(/,/g, "<i>&bull;</i>"));
        if (jQuery(this).is(":empty")) {
            jQuery(this).siblings(".prf-type-logo").addClass("prf-single-logo");
        }
    });

    // get filters
    var $posts = $component.find(".prf-flex-card");
    var categoryTypeArr = [];
    jQuery.each( $posts, function( key, post ) {
        var categorysType = jQuery(post).data("prf-type");
        if(categorysType != undefined && jQuery.inArray(categorysType, categoryTypeArr) === -1) {
            categoryTypeArr.push(categorysType);
        }

        var typeSkills = "skills",
            typeFlow = "flow",
            typeProserv = "proserv",
            typeLogo = jQuery(".prf-type-logo");

        if (categorysType === typeSkills) {
            jQuery(this).find(typeLogo).html('<img src="/etc.clientlibs/pluralsight/clientlibs/clientlib-main/resources/images/Skill_logo_white.png" alt="Skills logo"/>');
        } else if (categorysType === typeFlow) {
            jQuery(this).find(typeLogo).html('<img src="/etc.clientlibs/pluralsight/clientlibs/clientlib-main/resources/images/Flow_Logo_white.png" alt="Flow logo"/>');
        } else if (categorysType === typeProserv) {
            jQuery(this).find(typeLogo).html('<img src="/etc.clientlibs/pluralsight/clientlibs/clientlib-main/resources/images/Proserv_logo_white.png" alt="Proserv logo"/>');
        }
    });
    categoryTypeArr.sort(); // alphabetize

    // add filters
    var $filterContainer = $component.find(".prf-filters");
    jQuery.each(categoryTypeArr, function (key, value) {
        var filterText = value;
        var filterHtml = '<button type="button" class="control" data-prf-type-filter="' + value + '">' + value + '</button>';
        $filterContainer.append(filterHtml);
    });

    var $filters = $component.find(".prf-filters button.control");
    $filters.on('click', function() {
        $showMore.hide('slow');

        var filterCategory = "all";
        var categoryType = "all";

        var filterAll = jQuery(this).data("prf-all-filter");
        if (filterAll) {
            filterCategory = filterAll;
            categoryType = "all";
        }
        var filterType = jQuery(this).data("prf-type-filter");
        if (filterType) {
            filterCategory = filterType;
            categoryType = "type";
        }
        jQuery.each( $posts, function( key, post ) {
            var encodedStr = jQuery(post).data("prf-" + categoryType);
            var parser = new DOMParser;
            var dom = parser.parseFromString(
                '<!doctype html><body>' + encodedStr,
                'text/html');
            var category = dom.body.textContent;

            if(category === filterCategory || filterCategory === "all") {
                jQuery(post).show('slow');
            } else {
                jQuery(post).hide('slow');
            }
        });
    });
})();
/*global
  jQuery
 */
// iife to set up component during page load
(() => {
  'use strict';

  // an init() to be used in callbacks
  const init = () => {
    const $pricingTermsToggles = jQuery(".pricing-terms-toggle");
    $pricingTermsToggles.each(function(el) {
      const $this = jQuery(this);
      const $toggle = jQuery(".pricing-terms-toggle");
      const $toggleUIClass = $this.find(".pricing-billing-input");
      let isResizeDone;

      // Assign unique ID for toggle price
      let incrementNum = el;
      $toggleUIClass.attr("id", "pricingBillingCycle-" + incrementNum);
      $toggleUIClass.next("label").attr("for", "pricingBillingCycle-" + incrementNum);

      if ($pricingTermsToggles.length > 0 && !!$toggleUIClass) {
        $toggleUIClass.on("change", (e) => {
          if ($toggleUIClass.is(":checked")) {
            $this.parent().find(".pricing-card-v2").removeClass("show-monthly");
          } else {
            $this.parent().find(".pricing-card-v2").addClass("show-monthly");
          }
          return false;
        });
      }

      function renderPricingTermsToggle() {
        const width = jQuery(this).width();
        if (width > 1024) {
          if ($toggleUIClass.is(":checked")) {
            $toggle.parent().find(".pricing-card-v2").removeClass("show-monthly");
          } else {
            $toggle.parent().find(".pricing-card-v2").addClass("show-monthly");
          }
        } else {
          $toggle.parent().find(".pricing-card-v2").removeClass("show-monthly");
        }
      }

      jQuery(window).on('load resize', function () {
        clearTimeout(isResizeDone);
        isResizeDone = setTimeout(renderPricingTermsToggle, 300);
      });
    });
  };
  // Promo -- all pricing defaults to annual
  // use init() callback to init the component after page load
  jQuery(() => {init();});

  // use init() callback to init the component after target finishes
  document.addEventListener('at-content-rendering-succeeded', function(e) {
    jQuery(() => {init();});
  });
  document.addEventListener('at-content-rendering-failed', function(e) {
    jQuery(() => {init();});
  });
})();
/*global
  jQuery, Utils
 */
// iife to set up component during page load
(() => {
    'use strict';

    // an init() to be used in callbacks
    const init = () => {
        var isStickyHeaderRun = false;
        if (!window.wcmmodedisabled && jQuery('.pricing-plans.section').closest('.columns').length > 0) {
            jQuery('.pricing-plans.section').prepend('<h1>WARNING: Pricing component must control its own columns. Remove this pricing component from column controller (but still inside a black generic block) to ensure it renders properly.</h1>');
        }

        const $pricingSwitcher = jQuery(".pricing_plan--switcher input[type='radio']");
        const $pricingFeatureTooltips = jQuery("a.tooltip_wrapper")
        // Plan switcher
        jQuery(".pricing_plan--switcher #individual").prop("checked", "true");
        $pricingSwitcher.off("click.psPricingPlanSwitcher");
        $pricingSwitcher.on("click.psPricingPlanSwitcher", function () {
            var inputValue = jQuery(this).attr("value");
            var targetBox = jQuery("." + inputValue);
            var radioID = jQuery(this).attr("id");
            jQuery(".pricing_plan--switcher label").each(function () {
                if (jQuery(this).attr("for") === radioID) {
                    jQuery(this).css("color", "white");
                } else {
                    jQuery(this).css("color", "rgba(255,255,255,0.7)");
                }
            });
            jQuery('.pricing_plan--box, .pricing_wrapper').not(targetBox).fadeOut(300, function () {
                jQuery('.pricing_wrapper').not(targetBox).parents('.main-pricing-shadow-block').addClass('-off');
                jQuery(targetBox).parents('.main-pricing-shadow-block').removeClass('-off');
                jQuery(targetBox).fadeIn(300);
            });

            if (inputValue === "plans_business") {
                setSelectedConsumerType("business");
            } else {
                setSelectedConsumerType("individual");
            }
        });

        // read the customer type from cookie and adjust the toggle as necessary
        var customerCookie = document.cookie.split("ps_sct=")[1];
        if (customerCookie) {
            var customerCookieValue = customerCookie.split(";")[0];
            if (customerCookieValue) {
                if (document.URL.indexOf("type=individual") > -1 || customerCookieValue === "individual") {
                    // click to set consumer type, though this is already the default.
                    jQuery(".pricing_plan--switcher input[value='plans_individual']").click();
                } else if (document.URL.indexOf("type=business") > -1 || customerCookieValue === "business"
                  || (typeof selectedConsumerType !== "undefined" && selectedConsumerType === "business")) {
                    jQuery(".pricing_plan--switcher input[value='plans_business']").click();
                }
            }
        }

        $pricingFeatureTooltips.off("click.psPricingTooltip");
        $pricingFeatureTooltips.on("click.psPricingTooltip", function (e) {
            e.preventDefault();
        });

        // Toggle Features show/hide
        const $pricingFeatureToggle = jQuery(".pricing_toggleFeature");
        $pricingFeatureToggle.off("click.psPricingFeatureToggle");
        $pricingFeatureToggle.on("click.psPricingFeatureToggle", function(e){
            e.preventDefault();
            jQuery(this).closest(".pricing_wrapper").find(".pricing_features").slideToggle("slow", function() {
                if (jQuery(".pricing_features").is(':visible')) {
                    jQuery("html, body").animate({scrollTop: jQuery(this).closest(".pricing-plans").offset().top-90});
                }
            }).toggleClass("open");
            jQuery(this).toggleClass("open");
            if (jQuery(this).hasClass("open")) {
                jQuery(this).find(".toggleFeature--text").text("Hide all features");
            } else {
                jQuery(this).find(".toggleFeature--text").text("View all features");
            }
        });

        // Toggle Main
        const pricingComponent = jQuery(".pricing-plans-section");
        const toggleUI = jQuery(".pricing_wrapper > .toggle-container").find('input.toggle-terms');
        if (pricingComponent.length > 0 && !!toggleUI) {
          toggleUI.each(function(index, element) {
            let thisToggleUI = jQuery(element);
            let toggleContainer = thisToggleUI.parents('.toggle-container');
            let thisToggleMiniParents = toggleContainer.parents('.pricing_wrapper').find('.pricing_flex-container').find('.pricing_section');
            let thisGrid = toggleContainer.parents('.pricing_wrapper').find('.pricing_flex-container');
            thisToggleUI.on("change", (e) => {
              if (thisToggleUI.is(":checked")) {
                thisGrid.removeClass("show-monthly");
                thisToggleMiniParents.removeClass("show-monthly");
                toggleContainer.removeClass('-show-monthly');
              } else {
                thisGrid.addClass("show-monthly");
                thisToggleMiniParents.removeClass("show-monthly");
                toggleContainer.addClass('-show-monthly');
              }
            });
          });
        }

        // Toggle Mini
        const toggleMini = jQuery(".toggle-mini");
        const toggleMiniParents = toggleMini.parents(".pricing_section");
        let isResizeDone;
        toggleMini.each(function (i) {
            let incrementNum = i;
            jQuery(this).attr('id', 'toggle-mini-' + incrementNum);
            jQuery(this).next("label").attr('for', 'toggle-mini-' + incrementNum);
        });

        toggleMini.each(function(index, element) {
          const thisToggleMini = jQuery(element);
          thisToggleMini.off("change.psPricingToggleMini");
          thisToggleMini.on("change.psPricingToggleMini", function () {
            const cardParent = jQuery(this).parents(".pricing_section");
            const thisGrid = thisToggleMini.parents('.pricing_wrapper').find('.pricing_flex-container');
            jQuery(thisGrid).removeClass("show-monthly")
            if (cardParent.find(thisToggleMini).is(":checked")) {
              cardParent.removeClass("show-monthly");
            } else {
              cardParent.addClass("show-monthly");
            }
          });
        });

        function renderToggleMini() {
            toggleMini.each(function () {
                const $this = jQuery(this);
                const thisGrid = $this.parents('.pricing_wrapper').find('.pricing_flex-container');
              thisGrid.removeClass("show-monthly");
                if ($this.is(":checked")) {
                    $this.parents(".pricing_section").removeClass("show-monthly");
                } else {
                    $this.parents(".pricing_section").addClass("show-monthly");
                }
            });
        }

        function renderFeatures() {
            const width = jQuery(this).width();
                toggleUI.each(function(index, element) {
                    const thisToggleUI = jQuery(element);
                    const thisGrid = thisToggleUI.parents('.pricing_wrapper').find('.pricing_flex-container');
                    const thisToggleMiniParents = thisToggleUI.parents('.pricing_wrapper').find('.pricing_flex-container').find('.pricing_section');
                    if (width > 1024) {
                        if (thisToggleUI.is(":checked")) {
                            thisGrid.removeClass("show-monthly");
                            thisToggleMiniParents.removeClass("show-monthly");
                        } else {
                          thisGrid.addClass('show-monthly');
                        }
                    } else {
                        renderToggleMini();
                    }
                });
        }

        jQuery(window).on('load resize', function () {
            clearTimeout(isResizeDone);
            isResizeDone = setTimeout(renderFeatures, 300);
        });
    };

    // Promo -- all pricing defaults to annual
    // use init() callback to init the component after page load
    jQuery(() => {init();});

    // use init() callback to init the component after target finishes
    document.addEventListener('at-content-rendering-succeeded', function(e) {
        jQuery(() => {init();});
    });
    document.addEventListener('at-content-rendering-failed', function(e) {
        jQuery(() => {init();});
    });
})();



document.addEventListener("DOMContentLoaded", function(event) {
    var isB2BActiveFeatureFlag = Utils && Utils.activeFeatureFlag("B2B_Cart");

    // .product-service-ignore class on links will NOT be included in replacing links -- for private promos
    var allLinkSelector = 'a[href*="pluralsight.com/individual/checkout/account-details"]:not(.product-service-ignore), a[href*="pluralsight.com/checkout"]:not(.product-service-ignore), a[href*="pluralsight.com/offer-landing"]:not(.product-service-ignore), a[href*="pluralsight.com/gift-of-pluralsight"][href*="billing"]:not(.product-service-ignore), a[href*="pluralsight.com/buy"]:not(.product-service-ignore)';
    var showPriceEls = function() {
        var priceEls = document.querySelectorAll('[data-product-price], [data-product-annual-savings-percent]');

        [].forEach.call(priceEls, function(priceEl) {
            priceEl.style.visibility = 'visible' ;
        });
        window.showPriceElsComplete = true;
        handleCheckoutRedirect();
    };

    var hidePriceEls = function() {
        var priceEls = document.querySelectorAll('[data-product-price]');

        [].forEach.call(priceEls, function(priceEl) {
            priceEl.style.visibility = 'hidden' ;
        });
    };

    var disableCheckoutLinks = function(){
        var isIE = (window.navigator.userAgent.indexOf("MSIE") > -1 || window.navigator.userAgent.indexOf("Trident") > -1 );
        var linkEls = document.querySelectorAll(allLinkSelector);
        [].forEach.call(linkEls, function(linkEl) {
            linkEl.dataset.legacyLink = linkEl.href;
            linkEl.href = "#";
            if (!isIE){
                linkEl.setAttribute("onclick","dtmEventTrigger('ps.pricingServiceNotLoaded',{}); alert('Still loading checkout service - please click again in a few seconds, or refresh the page.\\n\\nIf this message remains even after refreshing the page, something is wrong! Please let us know at support@pluralsight.com!');");
            }
        });
    };

    var enableCheckoutLinks = function(){
        var linkEls = document.querySelectorAll('a[data-legacy-link]');
        [].forEach.call(linkEls, function(linkEl) {
            if (linkEl.getAttribute("href") == "#"){ //only bring this back if the link hasn't been changed by Target or other JS during our JSON request.
                linkEl.href = linkEl.dataset.legacyLink;
            }
            linkEl.removeAttribute("onclick");
            linkEl.removeAttribute("data-legacy-link");
        });
    };

    var getJSON = function(url, callback) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'json';
        xhr.withCredentials = true;
        xhr.onload = function() {
            var status = xhr.status;
            if (status === 200) {
                callback(null, xhr.response);
            } else {
                callback(status, xhr.response);
            }
        };
        xhr.send();
    };

    var setProductPricing = function(productApiData, callback) {
        var priceEls = document.querySelectorAll('[data-product-price]');

        [].forEach.call(priceEls, function(priceEl) {
            var marketingId = priceEl.dataset.productPrice;

            [].forEach.call(productApiData.products, function(offering) {
                [].forEach.call(offering.options, function(option) {
                    if (option.marketingId === marketingId) {
                        var swapPriceEls = function(pricingOption) {
                            var priceHtml = pricingOption.display.htmlTemplate;
                            priceEl.innerHTML = priceHtml;
                            window.currency = pricingOption.currency;

                            if (window.globalPromos && !priceEl.hasAttribute("data-block-promos")){
                                [].forEach.call(globalPromos, function(promo){
                                    if(promo.validMarketingIds.indexOf(marketingId) > -1){
                                        if (promo.discount.type == "percent"){
                                            if (priceEl.className.indexOf("promo-original-price") > -1){
                                                priceEl.style.display = "inline-block"; //display strikethrough prices for promos
                                            } else if (priceEl.className.indexOf("promo-off-percent") > -1){
                                                priceEl.parentElement.style.display = "inline-block"; //display yellow promo banners above price blocks
                                                var pricingTermToggleComponent = jQuery(".pricing-terms-toggle").find(".pricing_save.default");
                                                var otherBannerArray = jQuery(priceEl).parents(".pricing-plans").find(".pricing_save.default");
                                                if (pricingTermToggleComponent && pricingTermToggleComponent[0]) {
                                                    pricingTermToggleComponent[0].style.display = 'none';
                                                } //hide original yellow banner if block has one. Or any other area that has pricing_save class.
                                                if (otherBannerArray && otherBannerArray[0]) {
                                                    otherBannerArray[0].style.display = 'none';
                                                } //hide original yellow banner if block has one. Or any other area that has pricing_save class.
                                                priceEl.innerText = Math.floor(promo.discount.percent);
                                            } else if (!priceEl.hasAttribute("data-block-promos")){ //check once above for faster processing, again here to catch any that changed during the loop.
                                                var discountPercent = promo.discount.percent / 100;
                                                var showPercent = 1 - discountPercent;
                                                if (priceEl.hasAttribute("data-show-percent")){
                                                    var alreadyDisplayedPercent = parseFloat(priceEl.getAttribute("data-show-percent"));
                                                    showPercent = alreadyDisplayedPercent * showPercent;
                                                }
                                                priceEl.setAttribute("data-show-percent", showPercent);
                                                priceEl.setAttribute("data-block-promos", "true"); //stop double application.
                                            }
                                        }
                                    }
                                });
                            }

                            if (priceEl.hasAttribute("data-show-percent")){
                                var priceNum = pricingOption.price;
                                var percentage = parseFloat(priceEl.getAttribute("data-show-percent"));
                                var newAmount = (priceNum * percentage).toFixed(2);
                                var major = newAmount.toString().split(".")[0];
                                var minor = newAmount.toString().split(".")[1];
                                priceEl.querySelector(".curr-major").innerText = major;
                                priceEl.querySelector(".curr-minor").innerText = minor;
                            }

                        };

                        var defaultPricingOption = null,
                            testPricingOption = null;

                        [].forEach.call(option.pricing, function(pricingOption) {
                            if (typeof window.productTestId != "undefined" && pricingOption.testId === window.productTestId) {
                                testPricingOption = pricingOption;
                            } else if (pricingOption.testId === null) {
                                defaultPricingOption = pricingOption;
                            }
                        });

                        if (testPricingOption != null) {
                            swapPriceEls(testPricingOption);
                        } else if (defaultPricingOption != null) {
                            swapPriceEls(defaultPricingOption);
                        }
                    }
                });
            });
        });
        window.productPricingComplete = true;
        callback();
    };

    var setProductLinks = function(productApiData, callback) {
        var linkEls = document.querySelectorAll(allLinkSelector);
        var isStaging = document.URL.indexOf("-stage.pluralsight") > -1 || document.URL.indexOf("-dev.pluralsight") > -1 || document.URL.indexOf("aem-local-author.pluralsight") > -1;
        var BILLING_URL = "https://www.pluralsight.com/buy";
        var GIFT_URL = "https://billing.pluralsight.com/gift-of-pluralsight";
        var TRIAL_URL = "https://www.pluralsight.com/pricing/free-trial";
        var UCE_URL = 'https://www.pluralsight.com/checkout';

        if (isStaging){
            BILLING_URL = "https://www-stage.pluralsight.com/buy";
            GIFT_URL = "https://billing-stage.pluralsight.com/gift-of-pluralsight";
            TRIAL_URL = "https://www-stage.pluralsight.com/pricing/free-trial";
            UCE_URL = 'https://www-stage.pluralsight.com/checkout';
        }

        [].forEach.call(linkEls, function(linkEl) {
            var linkElHref = linkEl.href,
                marketingId = null;

            if (typeof linkEl.dataset.productSku === "undefined" || typeof linkEl.dataset.productSku === "null") { // since this script runs multiple times, leave a data attribute it can trigger off of in the future
                marketingId = getParameterByName('sku', linkElHref);
                linkEl.dataset.productSku = marketingId;
            } else {
                marketingId = linkEl.dataset.productSku;
            }

            if (marketingId !== null && marketingId !== "") { // only run if there is a sku
                var otherParams = linkElHref.substring(linkElHref.indexOf("?")+1).split("&");

                [].forEach.call(productApiData.products, function(product) {
                    [].forEach.call(product.options, function(productOption) {
                        if (productOption.marketingId === marketingId) {
                            var swapLinkEls = function(pricingOption) {
                                var baseUrl = BILLING_URL;
                                var isB2CSku = product.customerType.toLowerCase() === 'individual';
                                var isB2BSku = product.customerType.toLowerCase() === 'business';

                                /**
                                 * Qualifications for the pro quantity modal:
                                 *  1. This product must be a B2B sku
                                 *  2. This product must have a marketingId of "PROFESSIONAL-SG"
                                 *  3. CTALink must not have query parameter of nomodal=true
                                 *  4. CTA Element must not have the biz_qty_checkout class
                                 */
                                if (isB2BSku && marketingId === `PROFESSIONAL-SG` && !linkElHref.includes(`nomodal=true`) && !linkEl.classList.contains(`biz_qty_checkout`)) {
                                    linkEl.href=`#ps_pro_qty_modal`;
                                    return;
                                }

                                if (linkElHref.indexOf("STANDARD-FT") > -1
                                    || linkElHref.indexOf("PREM-FT") > -1) {
                                    if (!linkEl.classList.contains("free_trial_checkout") && linkElHref.indexOf("nofti=true") == -1){
                                        linkEl.href=TRIAL_URL;
                                        return;
                                    }
                                }
                                if (linkElHref.indexOf("pluralsight.com/gift-of-pluralsight") > -1) {
                                    baseUrl = GIFT_URL;
                                }

                                if(isB2CSku || isB2BActiveFeatureFlag) {
                                    baseUrl = UCE_URL;
                                }

                                var mstime = (new Date()).valueOf();
                                var linkHref = baseUrl + "?requestId=" + productApiData.requestId + "&priceOptionId=" + pricingOption.id + "&legacyTrackingId=" + marketingId + "&time=" + mstime;
                                if(isB2CSku || isB2BActiveFeatureFlag) {
                                    linkHref = linkHref + "&productOptionId=" + productOption.id;
                                }

                                if (otherParams.length > 0) {
                                    for (var i = 0; i < otherParams.length; i++) {
                                        if (otherParams[i].indexOf("sku=") == -1 && otherParams[i].indexOf("requestId=") == -1 && otherParams[i].indexOf("priceOptionId=") == -1 && otherParams[i].indexOf("legacyTrackingId=") == -1 && otherParams[i].indexOf("time=") == -1) {
                                            linkHref += "&" + otherParams[i];
                                        }
                                    }
                                }

                                //Get browser parameters.
                                //&promo=FreeAprilGC
                                var pathParams = window.location.search.substring(window.location.search.indexOf("?")+1).split("&");
                                if (pathParams.length > 0) {
                                    //Right now only checking if we are on indgcp path.
                                    if(window.location.search.indexOf("=indgcp") > -1){
                                        for (var i = 0; i < pathParams.length; i++) {
                                            if (pathParams[i].indexOf("promo=" > -1)) {
                                                linkHref += "&" + pathParams[i];
                                            }
                                        }
                                    }
                                }

                                if (window.globalPromos){
                                    [].forEach.call(globalPromos, function(promo){
                                        if(promo.validMarketingIds.indexOf(marketingId) > -1 && linkHref.indexOf("promo=") == -1){
                                            linkHref = linkHref + "&promo=" + promo.code;
                                        }
                                    });
                                }

                                linkEl.href = linkHref;
                            };

                            var defaultPricingOption = null,
                                testPricingOption = null;

                            [].forEach.call(productOption.pricing, function(pricingOption) {
                                if (typeof window.productTestId != "undefined" && pricingOption.testId === window.productTestId) {
                                    testPricingOption = pricingOption;
                                } else if (pricingOption.testId === null) {
                                    defaultPricingOption = pricingOption;
                                }
                            });

                            if (testPricingOption != null) {
                                swapLinkEls(testPricingOption);
                            } else {
                                swapLinkEls(defaultPricingOption);
                            }
                        }
                    });
                });
            }
        });
        window.productLinksComplete = true;
        callback();
    };

    var setAnnualSavingPercent = function(productApiData, callback) {
        var percentEls = document.querySelectorAll('[data-product-annual-savings-percent]'),
            annualPrice = "",
            monthlyPrice = "",
            ANNUAL_MARKETING_ID = "IND-Y-STANDARD",
            MONTHLY_MARKETING_ID = "IND-M-STANDARD",
            PERCENT_SLUG = "{{annual-percent-savings}}";

        if (percentEls.length) {
            [].forEach.call(productApiData.products, function(offering) {
                [].forEach.call(offering.options, function(option) {
                    if (option.marketingId === ANNUAL_MARKETING_ID) {
                        var defaultPricingOption = null,
                            testPricingOption = null;

                        [].forEach.call(option.pricing, function(pricingOption) {
                            if (typeof window.productTestId != "undefined" && pricingOption.testId === window.productTestId) {
                                testPricingOption = pricingOption;
                            } else if (pricingOption.testId === null) {
                                defaultPricingOption = pricingOption;
                            }
                        });

                        if (testPricingOption != null) {
                            annualPrice = testPricingOption.price;
                        } else {
                            annualPrice = defaultPricingOption.price;
                        }
                    }
                    if (option.marketingId === MONTHLY_MARKETING_ID) {
                        var defaultPricingOption = null,
                            testPricingOption = null;

                        [].forEach.call(option.pricing, function(pricingOption) {
                            if (typeof window.productTestId != "undefined" && pricingOption.testId === window.productTestId) {
                                testPricingOption = pricingOption;
                            } else if (pricingOption.testId === null) {
                                defaultPricingOption = pricingOption;
                            }
                        });

                        if (testPricingOption != null) {
                            monthlyPrice = testPricingOption.price;
                        } else {
                            monthlyPrice = defaultPricingOption.price;
                        }
                    }
                });
            });

            if (annualPrice != "" && monthlyPrice != "") {
                var percent = Math.floor(((monthlyPrice - annualPrice/12)/monthlyPrice)*100);

                [].forEach.call(percentEls, function(percentEl) {
                    percentEl.innerHTML = percentEl.innerHTML.replace(PERCENT_SLUG, percent);
                });
            }
        }
        window.annualSavingsPercentComplete = true;
        callback();
    };

    var processPricingSuccessData = function(data){
        enableCheckoutLinks(); //reset links and turn off error message
        window.visitorLocale = data.data.locale;
        window.visitorCountry = data.data.country;
        window.visitorIP = data.data.ipAddress;
        setProductPricing(data.data, handleCheckoutRedirect);
        setProductLinks(data.data, handleCheckoutRedirect);
        setAnnualSavingPercent(data.data, handleCheckoutRedirect);
    }

    var handleCheckoutRedirect = function(){
        if(window.productPricingComplete && window.productLinksComplete && window.annualSavingsPercentComplete && window.showPriceElsComplete){
            var event = new CustomEvent('ps.handleRedirect');
            document.dispatchEvent(event);
        }
    }

    try{
        var success = false;
        window.pricingServiceTimeoutDetails = {};
        var targetPricingOff = true; //comment out to delay pricing display until Target is loaded, useful for price A/B testing
        var pathname = window.location.pathname;
        if(pathname === '/pricing/skills'
            || pathname === '/pricing/free-trial'
            || pathname === '/product/skills/personal'
            || pathname === '/pricing/redirect-to-checkout') {
            targetPricingOff = false;
            //Temporary add this for our developing countries price change after target loads.
        }
        setTimeout(function(){ if (!success){dtmEventTrigger("ps.pricingServiceTimeout",window.pricingServiceTimeoutDetails);} }, 6000);

        if (document.querySelectorAll('[data-product-price]').length || document.querySelectorAll(allLinkSelector).length || document.querySelectorAll('.targeted-location').length) {
            window.pricingServiceTimeoutDetails['URL'] = document.URL;
            var PRODUCT_URL = "https://app.pluralsight.com/catalog/api/v1/localized-products";
            if (document.URL.indexOf("-stage.pluralsight") > -1
                || document.URL.indexOf("aem-local-author.pluralsight") > -1
                || document.URL.indexOf("-dev.pluralsight") > -1
                || document.URL.indexOf("adobeaemcloud.com") > -1){
                PRODUCT_URL = "https://app-stage.pluralsight.com/catalog/api/v1/localized-products";
            }
            if (typeof window.productParamOverride != "undefined"){
                PRODUCT_URL = PRODUCT_URL + window.productParamOverride; //example: "?ipaddress=1.22.0.0&locale=en-IN" to test what a user in India would see.
            }

            try {
                disableCheckoutLinks(); //turns on an error message if someone clicks before service finishes.
                getJSON(PRODUCT_URL, function(err, data) {
                    window.pricingServiceTimeoutDetails['PRODUCT_URL'] = PRODUCT_URL;
                    if (err !== null) {
                        var message = 'Pricing catalog JSON failed: ' + err;
                        console.log(message);
                        dtmEventTrigger("ps.pricingServiceError",{'Error': message});
                    } else {
                        var dataJSON = data;
                        if (typeof data == "string"){ //because IE is an idiot.
                            dataJSON = JSON.parse(data);
                        }

                        window.pricingServiceChecks = 0;
                        var rerunPricingSuccess = function(){
                            window.pricingServiceWaiting = true;
                            if ((window.promoCheckCompleted && (window.targetFinished || targetPricingOff)) || window.pricingServiceChecks > 30){
                                if (typeof window.productParamOverride != "undefined"){
                                    if (PRODUCT_URL.indexOf(productParamOverride) == -1) { PRODUCT_URL = PRODUCT_URL + window.productParamOverride; }
                                    getJSON(PRODUCT_URL, function(err, data) { //need new JSON if we're spoofing IPs. Won't work in IE. Who cares.
                                        window.pricingServiceTimeoutDetails[`PRODUCT_URL-${window.pricingServiceChecks}`] = PRODUCT_URL;
                                        processPricingSuccessData(data);
                                        showPriceEls();
                                        window.pricingServiceWaiting = false;
                                    });
                                } else {
                                    processPricingSuccessData(dataJSON);
                                    showPriceEls();
                                    window.pricingServiceWaiting = false;
                                }
                            } else {
                                window.pricingServiceChecks++;
                                window.setTimeout(function(){
                                    rerunPricingSuccess();
                                },100);
                            }
                        }

                        processPricingSuccessData(dataJSON);
                        success = true;
                        dtmEventTrigger("ps.pricingServiceSuccess",{});

                        if (window.promoCheckCompleted && (window.targetFinished || targetPricingOff)){ //only run once if everything made it in time
                            showPriceEls();
                        } else {
                            rerunPricingSuccess(); //if not, checkout links are in place. But rerun until ready to show pricing.
                        }

                        //in case timeout has happened - re-run if either of these completes.
                        document.addEventListener("at-content-rendering-succeeded", function(){
                            if (!window.pricingServiceWaiting){ rerunPricingSuccess(); }
                        }, false);
                        document.addEventListener("ps.promoTriggered", function(){
                            if (!window.pricingServiceWaiting){
                                window.setTimeout(function(){ rerunPricingSuccess(); }, 100); //gives a split second for any page modifications to finish up before re-running since ps.promoTriggered could be doing async changes.
                            }
                        }, false);
                    }
                });
            }
            catch(err) {
                var message = 'Placing price data from catalog failed: ' + err;
                console.log(message);
                dtmEventTrigger("ps.pricingServiceError",{'Error': message});
            }
        } else {
            success = true; //nothing to sub, so we successfully did nothing!
        }
    } catch(err){
        var message = 'Pricing catalog parent function failed: ' + err;
        console.log(message);
        dtmEventTrigger("ps.pricingServiceError",{'Error': message});
    }
});
/*global
  jQuery
 */
(() => {

  // an init() to be used in callbacks
  const init = () => {
    const $proQtyModals = jQuery('#ps_pro_qty_modal');

    $proQtyModals.each(function () {
      const $proQtyModal = jQuery(this);
      const $proDisplayNumber = $proQtyModal.find('.qty-display-number');
      const $proQtyDown = $proQtyModal.find('.qty-selector .qty-down');
      const $proQtyUp = $proQtyModal.find('.qty-selector .qty-up');

      var bodyLocked = false;
      var quantity = 20;

      function lockBody() {
        if (!bodyLocked) {
          window.scrollPosition = window.pageYOffset;
          jQuery("#content").css("margin-top", -scrollPosition + "px");
          jQuery("body").addClass("header-popup-open");
          bodyLocked = true;
        }
      }

      function unlockBody() {
        if (bodyLocked) {
          jQuery("body").removeClass("header-popup-open");
          jQuery("#content").css("margin-top", 0);
          window.scrollTo(0, scrollPosition);
          bodyLocked = false;
        }
      }

      //Note - no params allowed past quantity.
      function setVisibleQuantity() {
        $proDisplayNumber.text(quantity);
        jQuery(".biz_qty_checkout").each(function (key, item) {
          var checkoutUrlStart = item.href.split("&quantity=")[0];
          item.href = checkoutUrlStart + "&quantity=" + quantity;
        });
        var isPilotModal = jQuery("#ps_pro_qty_modal.display_pilot").length > 0;
        if (quantity <= 2) {
          $proQtyDown.addClass("disabled");
        } else if (quantity >= 50 || (isPilotModal && quantity >= 10)) {
          $proQtyUp.addClass("disabled");
          jQuery(".qty-sales-message.hidden").removeClass("hidden");
        } else {
          jQuery(".qty-selector .qty-down.disabled, .qty-selector .qty-up.disabled").removeClass("disabled");
          jQuery(".qty-sales-message:not(.hidden)").addClass("hidden");
        }
      }

      jQuery(document).off('click.psProQtyModal');
      jQuery(document).on('click.psProQtyModal', 'a[href="#ps_pro_qty_modal"]', function (e) {
        e.preventDefault();
        lockBody();
        if (jQuery(this).data('product-sku') === "PROFESSIONAL-SG-PILOT" || jQuery(this).data('product-sku') === "PRO-SG-PILOT-AC") {
          $proQtyModal.addClass("display_pilot");
          quantity = 20; //reset this in case they viewed purchase first.
        }
        $proQtyModal.show();
        setVisibleQuantity();
        window.setTimeout(function () {
          $proQtyModal.addClass('active');
        }, 50);
      });

      jQuery(document).on('click.psProQtyModal', '#ps_pro_qty_modal, .ps_pro_qty_modal-cancel', function (e) {
        if (jQuery(this).hasClass("ps_pro_qty_modal-cancel") ||
          jQuery(e.target).closest("#ps_pro_qty_modal .container").length === 0) {
          e.preventDefault();
          unlockBody();
          $proQtyModal.removeClass('active');
          window.setTimeout(function () {
            $proQtyModal.hide().removeClass("display_pilot");
          }, 700);
        }
      });

      $proQtyDown.off('click.psProQtyModal');
      $proQtyDown.add($proQtyUp).on('click.psProQtyModal', function (e) {
        var isPilotModal = jQuery(this).closest(".display_pilot").length > 0;
        if (jQuery(this).hasClass("qty-down")) {
          if (quantity > 2) {
            quantity = quantity - 1;
          }
        } else {
          if ((!isPilotModal && quantity < 50) || quantity < 50) {
            quantity = quantity + 1;
          }
        }
        setVisibleQuantity();
        return false;
      });
    });
  };

  // use init() callback to init the component after page load
  jQuery(() => {
    init();
  });

  // use init() callback to init the component after target finishes
  document.addEventListener('at-content-rendering-succeeded', function (e) {
    jQuery(() => {
      init();
    });
  });
})();

/*global
  jQuery
 */
jQuery(function () {
  const $starterQtyModals = jQuery("#ps_starter_qty_modal");

  $starterQtyModals.each(function() {
    const $starterQtyModal = jQuery(this);
    const $starterDisplayNumber = $starterQtyModal.find('.qty-display-number');
    const $starterQtyDown = $starterQtyModal.find('.qty-selector .qty-down');
    const $starterQtyUp = $starterQtyModal.find('.qty-selector .qty-up');

    var bodyLocked = false;
    var quantity = 10;
    function lockBody(){
      if (!bodyLocked){
        window.scrollPosition = window.pageYOffset;
        jQuery("#content").css("margin-top",-scrollPosition + "px");
        jQuery("body").addClass("header-popup-open");
        bodyLocked = true;
      }
    }

    function unlockBody(){
      if (bodyLocked){
        jQuery("body").removeClass("header-popup-open");
        jQuery("#content").css("margin-top",0);
        window.scrollTo(0,scrollPosition);
        bodyLocked = false;
      }
    }

    //Note - no params allowed past quantity.
    function setVisibleQuantity() {
      $starterDisplayNumber.text(quantity);
      jQuery(".biz_qty_checkout").each(function (key, item) {
        var checkoutUrlStart = item.href.split("&quantity=")[0];
        item.href = checkoutUrlStart + "&quantity=" + quantity;
      });
      if (quantity <= 2) {
        $starterQtyDown.addClass("disabled");
      } else if (quantity >= 50) {
        $starterQtyUp.addClass("disabled");
        jQuery(".qty-sales-message.hidden").removeClass("hidden");
      } else {
        jQuery(".qty-selector .qty-down.disabled, .qty-selector .qty-up.disabled").removeClass("disabled");
        jQuery(".qty-sales-message:not(.hidden)").addClass("hidden");
      }
    }

    jQuery(document).on({
      click: function (e) {
        e.preventDefault();
        lockBody();
        $starterQtyModal.show();
        setVisibleQuantity();
        window.setTimeout(function () {
          $starterQtyModal.addClass('active');
        }, 50);
      }
    }, 'a[href="#ps_starter_qty_modal"]');

    jQuery(document).on({
      click: function (e) {
        if (jQuery(this).hasClass("ps_starter_qty_modal-cancel")
          || jQuery(e.target).closest("#ps_starter_qty_modal .container").length === 0) {
          e.preventDefault();
          unlockBody();
          $starterQtyModal.removeClass('active');
          window.setTimeout(function () {
            $starterQtyModal.hide();
          }, 700);
        }
      }
    }, '#ps_starter_qty_modal, .ps_starter_qty_modal-cancel');

    $starterQtyDown.add($starterQtyUp).on('click', function(e) {
      if (jQuery(this).hasClass("qty-down")){
        if (quantity > 2){
          quantity = quantity - 1;
        }
      } else {
        if (quantity < 50) {
          quantity = quantity + 1;
        }
      }
      setVisibleQuantity();
      return false
    });
  });
});
if (jQuery('#flowModal').length > 0){
    (function(){
        var bodyLocked = false;
        function lockBody(){
            if (!bodyLocked){
                window.scrollPosition = window.pageYOffset;
                jQuery("#content").css("margin-top",-scrollPosition + "px");
                jQuery("body").addClass("header-popup-open");
                bodyLocked = true;
            }
        }

        function unlockBody(){
            if (bodyLocked){
                jQuery("body").removeClass("header-popup-open");
                jQuery("#content").css("margin-top",0);
                window.scrollTo(0,scrollPosition);
                bodyLocked = false;
            }
        }

        function sliderCB() {
            val = jQuery('input#flow-slider.irs-hidden-input').val();
            jQuery('.flow-modal--content').hide();
            jQuery('.flow-modal--roi').show();
            jQuery('.flow-modal--calc').show();

            if(val == '1') {
                jQuery('.flow-modal--content').hide();
                jQuery('.flow-modal--dynamicTitle').html('<span>Small team? Request a starter package</span>');
                jQuery('.flow-modal--team').html('Flow offers special plans for small teams and startups.').show();
            } else if(val == '25') {
                jQuery('.flow-modal--dynamicTitle').html('Up to <span>25 engineers</span>');
                jQuery('.flow-loaded-cost').text('$2,500,000');
                if(jQuery('#flowModal').hasClass('plus-active')) {
                    jQuery('.flow-modal--price .monthly-price').text('899');
                    jQuery('.flow-modal--investment span').text('44X');
                    jQuery('.flow-modal--market span').text('51 Days');
                } else if(jQuery('#flowModal').hasClass('standard-active')){
                    jQuery('.flow-modal--team').hide();
                    jQuery('.flow-modal--price .monthly-price').text('749');
                    jQuery('.flow-modal--investment span').text('39X');
                    jQuery('.flow-modal--market span').text('38 Days');
                }
            } else if(val == '50') {
                jQuery('.flow-modal--dynamicTitle').html('Up to <span>50 engineers</span>');
                jQuery('.flow-loaded-cost').text('$5,000,000');
                if(jQuery('#flowModal').hasClass('plus-active')) {
                    jQuery('.flow-modal--price .monthly-price').text('2,399');
                    jQuery('.flow-modal--investment span').text('32X');
                    jQuery('.flow-modal--market span').text('50 Days');
                } else {
                    jQuery('.flow-modal--price .monthly-price').text('1,999');
                    jQuery('.flow-modal--investment span').text('29X');
                    jQuery('.flow-modal--market span').text('38 Days');
                }
            } else if(val == '75') {
                jQuery('.flow-modal--dynamicTitle').html('Up to <span>75 engineers</span>');
                jQuery('.flow-loaded-cost').text('$7,500,000');
                if(jQuery('#flowModal').hasClass('plus-active')) {
                    jQuery('.flow-modal--price .monthly-price').text('3,599');
                    jQuery('.flow-modal--investment span').text('32X');
                    jQuery('.flow-modal--market span').text('50 Days');
                } else {
                    jQuery('.flow-modal--price .monthly-price').text('2,999');
                    jQuery('.flow-modal--investment span').text('29X');
                    jQuery('.flow-modal--market span').text('38 Days');
                }
            } else if(val == '100') {
                jQuery('.flow-modal--dynamicTitle').html('Up to <span>100 engineers</span>');
                jQuery('.flow-loaded-cost').text('$10,000,000');
                if(jQuery('#flowModal').hasClass('plus-active')) {
                    jQuery('.flow-modal--price .monthly-price').text('4,799');
                    jQuery('.flow-modal--investment span').text('32X');
                    jQuery('.flow-modal--market span').text('50 Days');
                } else {
                    jQuery('.flow-modal--price .monthly-price').text('3,999');
                    jQuery('.flow-modal--investment span').text('29X');
                    jQuery('.flow-modal--market span').text('38 Days');
                }
            } else if(val == '100+') {
                jQuery('.flow-modal--roi').hide();
                jQuery('.flow-modal--calc').hide();
                jQuery('.flow-modal--dynamicTitle').html('<span>Large team? Request a customized quote</span>');
                jQuery('.flow-modal--team').html('Flow offers custom pricing for teams over 100+ engineers.').show();
            } else {
                jQuery('.pricing_feature-list li').removeClass('pricing_feature-list-disabled');
            }
        }

        var val = '',
            lastValue = 0,
            $flowSlider = jQuery('#flow-slider'),
            $switchButton = jQuery('#seePlusPlan'),
            $switchStandardButton = jQuery('#seeStandardPlan');

        $flowSlider.ionRangeSlider({
            grid: true,
            grid_num: 100,
            from: 1,
            values: [
                '1','25','50','75','100','100+'
            ],
            onStart: function(data) {
                lastValue = data.from;
                sliderCB();
            },
            onChange: function(data) {
                lastValue = data.from;
                sliderCB();
            },
            onUpdate: function(data) {
                //lastValue = data.from_value;
                sliderCB();
            }
        });
        var flowSliderInstance = $flowSlider.data('ionRangeSlider');

        // See Plus Plan Button
        $switchButton.on('click', function(e){
            e.preventDefault();
            jQuery('.block-flow--header').hide();
            jQuery('.block-flow--standard').hide();
            jQuery('.block-flow-plus--header').show();
            jQuery('.block-flow--plus').show();
            jQuery('.pricing_feature-list li:nth-child(7)').removeClass('pricing_feature-list-disabled');
            jQuery('.pricing_feature-list li:nth-child(8)').removeClass('pricing_feature-list-disabled');
            jQuery('.pricing_feature-list li:nth-child(9)').removeClass('pricing_feature-list-disabled');
            var from = lastValue;
            flowSliderInstance.update({
                from: from
            });
            window.setTimeout(function(){
                jQuery('#flowModal').addClass('active plus-active');
                jQuery('#flowModal').removeClass('standard-active');
                sliderCB();
            },50);
        });

        // See Standard Plan Button
        $switchStandardButton.on('click', function(e){
            e.preventDefault();
            jQuery('.block-flow-plus--header').hide();
            jQuery('.block-flow--plus').hide();
            jQuery('.block-flow--header').show();
            jQuery('.block-flow--standard').show();
            jQuery('.pricing_feature-list li:nth-child(6) ~ li').addClass('pricing_feature-list-disabled');
            var from = lastValue;
            flowSliderInstance.update({
                from: from
            });
            window.setTimeout(function(){
                jQuery('#flowModal').addClass('active standard-active');
                jQuery('#flowModal').removeClass('plus-active');
                sliderCB();
            },50);
        });

        // Standard plan
        jQuery(document).on({
            click:function(e){
                e.preventDefault();
                lockBody();
                jQuery('#flowModal').show();
                jQuery('.block-flow').hide();
                jQuery('.block-flow--header').show();
                jQuery('.block-flow--standard').show();
                jQuery('.pricing_feature-list li:nth-child(6) ~ li').addClass('pricing_feature-list-disabled');
                flowSliderInstance.update({
                    from: 1
                });
                window.setTimeout(function(){
                    jQuery('#flowModal').addClass('active standard-active');
                    jQuery('#flowModal').removeClass('plus-active');
                    sliderCB();
                },50);
            }
        },'.pricing-standard a[href="#flowModal"]');

        // Plus plan
        jQuery(document).on({
            click:function(e){
                e.preventDefault();
                lockBody();
                jQuery('#flowModal').show();
                jQuery('.block-flow').hide();
                jQuery('.block-flow-plus--header').show();
                jQuery('.block-flow--plus').show();
                jQuery('.pricing_feature-list li:nth-child(9) ~ li').addClass('pricing_feature-list-disabled');
                flowSliderInstance.update({
                    from: 1
                });
                window.setTimeout(function(){
                    jQuery('#flowModal').addClass('active plus-active');
                    jQuery('#flowModal').removeClass('standard-active');
                    sliderCB();
                },50);
            }
        },'.pricing-plus a[href="#flowModal"]');

        // Close button
        jQuery(document).on({
            click:function(e){
                if (jQuery(this).hasClass("flow-modal-close")
                    || jQuery(e.target).closest("#flowModal .container").length == 0){
                    e.preventDefault();
                    unlockBody();
                    jQuery('.pricing_feature-list li').removeClass('pricing_feature-list-disabled');
                    window.setTimeout(function(){
                        jQuery('#flowModal').removeClass('active standard-active');
                        jQuery('#flowModal').hide();
                        flowSliderInstance.reset();
                    },50);
                }
            }
        },'#flowModal, .flow-modal-close');

        // B2b Pilot Modal
        jQuery(document).on({
            click:function(){
                jQuery('#flowModal').hide();
                jQuery('.pricing_feature-list li').removeClass('pricing_feature-list-disabled');
                flowSliderInstance.reset();
            }
        },'#flowModal #requestDemo');

        // B2b Pilot close button to unlockBody()
        jQuery(document).on({
           click: function(){
               jQuery('body').removeClass('header-popup-open');
               jQuery("#content").css("margin-top",0);
           }
        },'.ps_pilot_close_btn');
    })();
}
/*global
  jQuery
 */
jQuery(function() {
  var $pricingCardsV2 = jQuery(".pricing-card-skills-v2");
  $pricingCardsV2.each(function() {
     const $pricingCardV2 = jQuery(this);
     $pricingCardV2.parents(".flex-block.section").addClass("pricing-card-group");

    // Toggle Mini
    const $toggleMini = jQuery(".pricing-skills-toggle-mini");
    const $toggleParents = jQuery(".pricing-card-display");
    let isResizeDone;

    // Assign unique ID for mini toggle labels
    $toggleMini.each(function (i) {
      let incrementNum = i;
      jQuery(this).attr("id", "pricing-skills-toggle-mini-" + incrementNum);
      jQuery(this).next("label").attr("for", "pricing-skills-toggle-mini-" + incrementNum);
    });

    $toggleMini.off("change.psPricingSkillsToggleMini");
    $toggleMini.on("change.psPricingSkillsToggleMini", function () {
      const cardParent = jQuery(this).parents(".pricing-card-display");
      $pricingCardsV2.removeClass("show-monthly")
      if (cardParent.find($toggleMini).is(":checked")) {
        cardParent.removeClass("show-monthly");
      } else {
        cardParent.addClass("show-monthly");
      }
    });

    function renderPricingSkillsToggleMini() {
      $toggleMini.each(function () {
        const $this = jQuery(this);
        if ($this.is(":checked")) {
          $this.parents(".pricing-card-display").removeClass("show-monthly");
        } else {
          $this.parents(".pricing-card-display").addClass("show-monthly");
        }
      });
    }

    function renderFeatures() {
      const width = jQuery(this).width();
      if (width > 1024) {
        $toggleParents.removeClass("show-monthly");
        $pricingCardsV2.removeClass("show-monthly");
      } else {
        renderPricingSkillsToggleMini();
      }
    }

    jQuery(window).on('load resize', function () {
      clearTimeout(isResizeDone);
      isResizeDone = setTimeout(renderFeatures, 300);
    });
  });
});
/*global
  jQuery
 */
jQuery(function() {
  var $pricingCards = jQuery('.pricing-card-skills');
  $pricingCards.each(function() {
     var $pricingCard = jQuery(this);

     $pricingCard.parents('.flex-block.section').addClass('pricing-card-group');
  });
});
/*global
  jQuery
 */
// iife to set up component during page load
(() => {
  'use strict';

  // an init() to be used in callbacks
  const init = () => {
    var $pricingCardsV2 = jQuery('.pricing-card-freetrial-v2');
    $pricingCardsV2.each(function() {
      var $pricingCardV2 = jQuery(this);
      $pricingCardV2.parents('.flex-block.section').addClass('pricing-card-group');

      // Toggle Mini
      const $toggleMini = jQuery(".pricing-freetrial-toggle-mini");
      const $toggleParents = jQuery(".pricing-card-display");
      let isResizeDone;

      // Assign unique ID for mini toggle labels
      $toggleMini.each(function (i) {
        let incrementNum = i;
        jQuery(this).attr("id", "pricing-freetrial-toggle-mini-" + incrementNum);
        jQuery(this).next("label").attr("for", "pricing-freetrial-toggle-mini-" + incrementNum);
      });

      $toggleMini.off("change.psPricingFreeTrialToggleMini");
      $toggleMini.on("change.psPricingFreeTrialToggleMini", function () {
        const cardParent = jQuery(this).parents(".pricing-card-display");
        $pricingCardsV2.removeClass("show-monthly")
        if (cardParent.find($toggleMini).is(":checked")) {
          cardParent.removeClass("show-monthly");
        } else {
          cardParent.addClass("show-monthly");
        }
      });

      function renderPricingFreeTrialToggleMini() {
        $toggleMini.each(function () {
          const $this = jQuery(this);
          if ($this.is(":checked")) {
            $this.parents(".pricing-card-display").removeClass("show-monthly");
          } else {
            $this.parents(".pricing-card-display").addClass("show-monthly");
          }
        });
      }

      function renderFeatures() {
        const width = jQuery(this).width();
        if (width > 1024) {
          $toggleParents.removeClass("show-monthly");
          $pricingCardsV2.removeClass("show-monthly");
        } else {
          renderPricingFreeTrialToggleMini();
        }
      }

      jQuery(window).on('load resize', function () {
        clearTimeout(isResizeDone);
        isResizeDone = setTimeout(renderFeatures, 300);
      });
    });
  };
  // Promo -- all pricing defaults to annual
  // use init() callback to init the component after page load
  jQuery(() => {init();});

  // use init() callback to init the component after target finishes
  document.addEventListener('at-content-rendering-succeeded', function(e) {
    jQuery(() => {init();});
  });
  document.addEventListener('at-content-rendering-failed', function(e) {
    jQuery(() => {init();});
  });
})();
/*global
  jQuery
 */
jQuery(function() {
  var $pricingCards = jQuery('.pricing-card-freetrial');
  $pricingCards.each(function() {
    var $pricingCard = jQuery(this);

    $pricingCard.parents('.flex-block.section').addClass('pricing-card-group');
  });
});
/*global
  jQuery
 */
jQuery(function() {
  var $pricingCards = jQuery('.pricing-card-flow');
  $pricingCards.each(function() {
    var $pricingCard = jQuery(this);

    $pricingCard.parents('.flex-block.section').addClass('pricing-card-group');
  });
});
if (jQuery(".press-release-table-component").length) {
    var $component = jQuery(".press-release-table-component");
    $component.on('click', 'a.press-release-table-show-more', function(e){
        e.preventDefault();

        var pageLength = 25,
            nextRows = $component.find('.press-release-row:hidden:lt(' + pageLength + ')');

        if (nextRows.length < pageLength) {
            jQuery(this).hide();
        }

        var wrapper = nextRows.wrapAll('<div class="press-release-table-page"></div>').parent().slideDown();
    });

    $component.on('click', 'a.press-release-table-back-to-top', function(e){
        e.preventDefault();

        jQuery('html,body').animate({
            scrollTop: 0
        }, 700);
    });
}
jQuery(document).ready(function() {

  jQuery('#filterOptions li a').click(function() {
    // fetch the class of the clicked item
    var ourClass = jQuery(this).attr('class');
    // reset the active class on all the buttons
    jQuery(this).closest('#filterOptions').find("li").removeClass('active');
      // update the active state on our clicked button
    jQuery(this).parent().addClass('active');
    if (ourClass == 'all') {
      // show all our items
    	  jQuery(this).closest(".paths.section").find('#pathContent').children('div.item').show();
    } else {
      // hide all elements that don't share ourClass
    	  jQuery(this).closest(".paths.section").find('#pathContent').children('div:not(.' + ourClass + ')').hide();
        // show all elements that do share ourClass
      jQuery(this).closest(".paths.section").find('#pathContent').children('div.' + ourClass).show();
    }
    return false;
  });

});
/*global
  jQuery, Utils
 */
// marketo-form.js
(function () {

  // an init() to be used in callbacks
  const init = () => {
    window.munchkinLoaded = window.munchkinLoaded ?? false;
    window.marketoLoaded = window.marketoLoaded ?? false;
    window.marketoBizEmail = window.marketoBizEmail ?? false;

    let marketoUrlSetting = "//app-sj11.marketo.com";
    let munchkinIdSetting = "303-MNI-809";
    // if (document.URL.indexOf('marketotest') > -1) {
    //   marketoUrlSetting = "//app-sj14.marketo.com";
    //   munchkinIdSetting = "031-SJO-371";
    // }

    if (!munchkinLoaded) {
      loadRemoteScript(
        'munchkin.marketo.net/munchkin.js',
        'text/javascript',
        1,
        'marketo_munchkin_lib',
        function () {
          Munchkin.init(munchkinIdSetting);
          window.munchkinLoaded = true;
        }
      );
    }

    const formSetup = () => {
      jQuery(".marketo-form-component").each(function (key, component) {
        const thisForm = {};
        thisForm.$form = jQuery(component).find("form");
        if (!thisForm.$form.hasClass('loaded')) {
          thisForm.$form.addClass('loaded');
          thisForm.$marketoFormData = jQuery(component).find(".marketo-form-data");
          thisForm.authoredFormID = thisForm.$marketoFormData.find(".form-id").html().trim();
          thisForm.redirectPath = thisForm.$marketoFormData.find(".redirect-path").attr('href');
          thisForm.downloadPath = thisForm.$marketoFormData.find(".download-path").html().trim();
          thisForm.successMessage = thisForm.$marketoFormData.find(".success-message").html().trim();
          thisForm.formID = thisForm.authoredFormID;

          window.marketoBizEmail = false; // TODO: is this redundant?
          if (thisForm.$marketoFormData.find(".marketo-biz-email").length) {
            window.marketoBizEmail = thisForm.$marketoFormData.find(".marketo-biz-email").html().trim() === "true";
          }

          const embedForm = function (currentForm) {
            MktoForms2.loadForm(marketoUrlSetting, munchkinIdSetting, currentForm.formID, function (form) {
              if (!form) return;
              form.render(currentForm.$form);
              currentForm.$form.find('.loading-message').hide();

              //Set marketing cloud ID
              const mcVals = Utils.cookies.getCookie('AMCV_70D658CC558978FF7F000101@AdobeOrg');
              if (mcVals) {
                const mcVisIdToEnd = mcVals.substring(mcVals.indexOf("MCMID|") + 6);
                const mcVisId = mcVisIdToEnd.substring(0, mcVisIdToEnd.indexOf("|"));
                jQuery("input[name=mcvisid__c]").val(mcVisId);
              }

              dtmEventTrigger("ps.mktoFormRendered", {'formID': thisForm.formID});

              form.onSubmit(function (form) {
                if (currentForm.$form.find('#Single_Opt_In__c').is(':checked')) {
                  form.vals({"Opt_In_Source__c": (window.location.hostname + window.location.pathname)});
                }
                if (window.mktoDoNotTrack) {
                  form.vals({"_mkt_trk": ""});
                }
              });
              form.onSuccess(function (values, followUpUrl) {
                //recheck for new values
                currentForm.redirectPath = currentForm.$marketoFormData.find(".redirect-path").attr('href');
                currentForm.downloadPath = currentForm.$marketoFormData.find(".download-path").html().trim();
                currentForm.successMessage = currentForm.$marketoFormData.find(".success-message").html().trim();

                const isPilot = currentForm.$form.find('input[name="Sales_Contact_Me_For_A_PS_Business_Plan__c"], select[name="Sales_Contact_Me_For_A_PS_Business_Plan__c"]').val() === "Yes";
                const isSales = currentForm.$form.find('input[name="Contact_Sales__c"]').val() === "TRUE";
                dtmEventTrigger("ps.mktoFormSuccess", {
                  'formID': currentForm.formID,
                  'isPilot': isPilot,
                  'isSales': isSales
                });

                if (Utils.cookies.getCookie("ps_optout") !== 0) {
                  Utils.cookies.setCookie("marketoFilled", 1, null, null, 7);
                }

                // replace the form with success message
                if (currentForm.successMessage) {
                  currentForm.$form.replaceWith("<div class='marketo-form__success-message form-" + currentForm.formID + "'>" + currentForm.successMessage + "</div>");
                }

                //if file download
                if (currentForm.downloadPath) {
                  setTimeout(function () {
                    const a = jQuery("<a>")
                    .attr("href", currentForm.downloadPath)
                    .appendTo("body");
                    a[0].click();
                  }, 500);
                  currentForm.$form.find("button").text("Download started");
                } else if (currentForm.redirectPath) {
                  // Take the lead to a different page on successful submit, ignoring the form's configured followUpUrl.  Wait a bit for success tracking to fire all pixels.
                  setTimeout(function () {
                    location.href = currentForm.redirectPath;
                  }, 1000);
                  return false;
                }
                return false;
              });
              form.onValidate((isValid) => {
                const eventName = isValid ? "ps.mktoFormValid" : "ps.mktoFormInvalid";
                dtmEventTrigger(eventName, {'formID': currentForm.formID});
              });
            });
          };

          if (thisForm.formID && typeof MktoForms2 !== 'undefined') {
            embedForm(thisForm);
          }
        }
      });
    };

    if (!marketoLoaded) {
      loadRemoteScript(
        'app-sj11.marketo.com/js/forms2/js/forms2.min.js',
        'text/javascript',
        1,
        'marketo_forms_lib',
        () => {
          formSetup();
          marketoLoaded = true;
        }
      );
    } else {
      formSetup();
    }
  };

  // use init() callback to init the component after page load
  jQuery(() => {
    init();

    //Warn if we've seen a marketo form, but no OID is set on the page.
    if (jQuery('meta#view-oid').length == 0 && (document.URL.indexOf("aem.pluralsight.com") > -1 || document.URL.indexOf("www-stage.pluralsight.com") > -1)) {
      jQuery('#content').before("<h5 id='ps-no-oid-warning' style='text-align:center; color:black; background-color:white; display:none;'>A Marketo form exists on this page, but no OID has been set. Please set in page properties.</h3>");
      jQuery('#ps-no-oid-warning').slideDown();
      setTimeout(function () {
        jQuery('#ps-no-oid-warning').slideUp();
      }, 3000);
    }
  });

  // use init() callback to init the component after target finishes
  document.addEventListener('at-content-rendering-succeeded', function (e) {
    jQuery(() => {
      init();
    });
  });

  document.addEventListener('at-content-rendering-failed', function (e) {
    jQuery(() => {
      init();
    });
  });
})();
if (jQuery('.live-speaker.section').length > 0){
    //INSERT MODAL
    jQuery('body').append('<div class="ps_live_modal"><div class="ps_live_modal--overlay"></div><div class="ps_live_modal--window"><div class="ps_live_modal--close"></div><div class="ps_live_modal--content"></div></div></div>');

    jQuery('.live-speaker.section').parent().addClass('live-speaker-wrapper clearfix');

    jQuery('.pslive-speaker-highlights').each(function(index) {
        var title = jQuery(this).find('.box-highlight').find('.box-highlight--name').html();
        title = title.replace(/ +/g, '-').toLowerCase();
        jQuery(this).attr('data-anchor', title);
        var tabBio = "-bio";
        var tabSession = "-session";
        jQuery(this).find('.pslive-speakers--tabs .tabs li').eq(0).attr('data-tab', title + tabBio);
        jQuery(this).find('.pslive-speakers--tabs .tabs li').eq(1).attr('data-tab', title + tabSession);
        jQuery(this).find('.pslive-speakers--tabs .tab-content').eq(0).attr('data-content', title + tabBio);
        jQuery(this).find('.pslive-speakers--tabs .tab-content').eq(1).attr('data-content', title + tabSession);
        var authorType = jQuery(this).attr('data-ls-type');
        if(authorType == 'Author') {
            jQuery(this).find('.pslive-speaker-highlights--image').addClass('ps-author-badge');
        }
        if(jQuery(this).hasClass('mainstage')) {
            jQuery(this).parent('.live-speaker.section').addClass('live-speaker--mainstage');
        }
    });

    jQuery('.box-highlight--name').each(function() {
        jQuery(this).html(jQuery(this).html().replace(/^([^ ]*)/, '<div class="speaker_firstName">$1</div>'));

    });

    jQuery(document).on({
        click: function(e) {
            e.preventDefault();
            jQuery(this).addClass('active').siblings('[data-tab]').removeClass('active');
            jQuery(this).parent().siblings('[data-content=' + jQuery(this).data('tab') + ']').addClass('active').siblings('[data-content]').removeClass('active');
        }
    },'[data-tab]');


    //prevent clicks inside modal from triggering the code above
    jQuery(document).on({
        click:function(e){
            e.stopPropagation();
        }
    },'.pslive-speakers--tabs');

    // CONFIGURE MODAL
    jQuery(document).on({
        click:function(e){
            e.preventDefault();
            location.hash = jQuery(this).attr('data-anchor');
            var selected = jQuery('.pslive-speaker-highlights.selected');
            selected.removeClass('selected');

            var clone = jQuery(this).clone(true,true).addClass('active');
            jQuery('body').css('overflow','hidden');
            jQuery('.ps_live_modal').show('fast',function(){
                jQuery('.ps_live_modal').addClass('active');
            });
            jQuery('.ps_live_modal--content').html(clone);
            jQuery(this).addClass("selected");

        }
    },'.pslive-speaker-highlights');

    if(location.hash != ''){
        var anchor = location.hash.slice(1, location.hash.length);
        var item = jQuery("[data-anchor='"+anchor+"']");
        var clone = item.clone().addClass('active');
        jQuery('body').css('overflow','hidden');
        jQuery('.ps_live_modal').show('fast',function(){
            jQuery('.ps_live_modal').addClass('active');
        });
        jQuery('.ps_live_modal--content').html(clone);
        item.addClass("selected");
    }

    jQuery(document).on({
        click:function(e){
            e.preventDefault();
            jQuery('.ps_live_modal').removeClass('active');
            window.setTimeout(function(){
                jQuery('body').css('overflow','auto');
                jQuery('.ps_live_modal').hide()
            },600);
        }
    },'.ps_live_modal--overlay, .ps_live_modal--close');
}

if (jQuery(".lc_card").length) {
    jQuery(document).on({
        click:function(e){
            if (!e.currentTarget.className.indexOf("active") > -1) {
                e.preventDefault();
            }
            var selected = jQuery('.lc_cards.selected'); //lc_speakers
                selected.removeClass('selected');

            var clone = jQuery(this).clone().addClass('active');
            jQuery('body').css('overflow','hidden');
            jQuery('.lc_modal').show('fast',function(){
                jQuery('.lc_modal').addClass('active');
            });
            jQuery('.lc_modal--content').html(clone);
            jQuery(this).addClass("selected");
        }
    },'.lc_cards'); // lc_speakers

    jQuery(document).on({
        click:function(e){
            e.preventDefault();
            jQuery('.lc_modal').removeClass('active');
            window.setTimeout(function(){
                jQuery('body').css('overflow','auto');
                jQuery('.lc_modal').hide()
            },600);
        }
    },'.lc_modal--overlay, .lc_modal--close');
}
if (jQuery('.lc_agenda').length > 0) {
    jQuery(document).on({
        click:function(e){
            e.preventDefault();
            jQuery(this).toggleClass('open');
            jQuery(this).next().slideToggle();
            jQuery('body').css('overflow','auto');
        }
    },'.lc_agenda--timeline.timeline--full'); // agenda expand toggle


    jQuery('.lc_agenda').each(function() {
        if( jQuery(this).hasClass('lc_agenda_simple') ) {
            jQuery(this).parent('.live-agenda.section').addClass('single-use');
        }
   });
}
/*global
  jQuery
 */
jQuery(function() {
  const $libraryCarousels = jQuery(".library-carousel-feed");
  $libraryCarousels.each(function() {
    const $libraryCarousel = jQuery(this);
    const $libraryItems = $libraryCarousel.find(".library-carousel-feed-container");
    let leftProperties = $libraryCarousel.find(".left-arrow").data("aa-title");
    let rightProperties = $libraryCarousel.find(".right-arrow").data("aa-title");
    let tempCarouselButtons = $libraryCarousel.find(".carousel-arrow-buttons");

    function librarySlickLoad() {
      $libraryItems.slick({
        slidesToShow: 3,
        slidesToScroll: 3,
        speed: 300,
        infinite: true,
        arrows: true,
        prevArrow: '<button class="slick-prev" ' + 'data-aa-title="' + leftProperties + '">Previous</button>',
        nextArrow: '<button class="slick-next" ' + 'data-aa-title="' + rightProperties + '">Next</button>',
        responsive: [
          {
            breakpoint: 1080,
            settings: {
              slidesToShow: 3,
              slidesToScroll: 3,
            }
          },
          {
            breakpoint: 768,
            settings: {
              slidesToShow: 2,
              slidesToScroll: 2
            }
          },
          {
            breakpoint: 480,
            settings: {
              slidesToShow: 1,
              slidesToScroll: 1
            }
          }
          ]
      });
      tempCarouselButtons.remove();
    }

    librarySlickLoad();

  });
});
/*global
  jQuery, Utils
 */
jQuery(function () {

  // select all the Labs Tile components
  const $labsTileComponents = jQuery('.labs-tile-component.aem-component');

  $labsTileComponents.each(function () {
    const $labsTileComponent = jQuery(this);
    const $labsTabList = $labsTileComponent.find('.labs-tile-tabs');
    const $labsTabs = $labsTabList.find('.labs-tab');
    const $labsTiles = $labsTileComponent.find('.labs-tile');

    /**
     * Deactive tabs and areas, and active the newly clicked tab and associated area
     * @param clickedTab
     */
    const tabClickHandler = (clickedTab) => {
      const $clickedTab = jQuery(clickedTab).closest('.labs-tab');
      const tabFilter = $clickedTab.data('lab-filter');
      const tabFilterSelector = ".labs-tile[data-lab='" + tabFilter + "']";
      const tabTilesSelector = $labsTileComponent.find(tabFilterSelector);

      // deactivate all tabs
      $labsTabs.removeClass('active');

      // active newly clicked tab
      $clickedTab.addClass('active');

      // deactivate all tab areas
      $labsTiles.removeClass('active');

      // activate tab area associated with newly clicked tab
      tabTilesSelector.addClass('active');

      if (tabFilter === 'all') {
        $labsTiles.addClass('active');
      }

    };

    // apply tab click handler
    $labsTabs.on('click', (e) => {
      e.preventDefault();
      tabClickHandler(e.target);
      return false;
    });
  });
});


/*global
  jQuery
 */
jQuery(function () {
  'use strict';

  var $countdownComponent = jQuery('.countdown-component');
  var countdownRunOnce = false;
  var dateTimeStr;
  var $daysSpan;
  var $hoursSpan;
  var $minutesSpan;
  var $secondsSpan;
  var endtime;
  var timeinterval;

  var countdownInit = function () {
    if ($countdownComponent.length) {
      countdownRunOnce = true;

      dateTimeStr = $countdownComponent.data('countdown-date-time');
      $daysSpan = $countdownComponent.find('.countdown__days');
      $hoursSpan = $countdownComponent.find('.countdown__hours');
      $minutesSpan = $countdownComponent.find('.countdown__mins');
      $secondsSpan = $countdownComponent.find('.countdown__secs');

      if (dateTimeStr) {
        endtime = new Date(Date.parse(dateTimeStr));
        updateCountdown();
      }

      timeinterval = setInterval(updateCountdown, 1000);
    }
  };
  countdownInit();

  // we have to re-run to make this work in promo hero takeover
  document.getElementsByTagName('body')[0].addEventListener("ps.promoShown", function(){
    if (!countdownRunOnce) {
      $countdownComponent = jQuery('.countdown-component');
      countdownInit();
    }
  });

  function updateCountdown() {
    var t = getTimeRemaining(endtime);
    $daysSpan.html(t.days);
    $hoursSpan.html(t.hours);
    $minutesSpan.html(t.minutes);
    $secondsSpan.html(t.seconds);
    if (t.total <= 0) {
      clearInterval(timeinterval);
    }
  }

  function getTimeRemaining(endtime) {
    var t = Date.parse(endtime) - Date.parse(new Date());
    t = t < 0 ? 0 : t; // limit the countdown to 0

    var seconds = Math.floor((t / 1000) % 60);
    var minutes = Math.floor((t / 1000 / 60) % 60);
    var hours = Math.floor((t / (1000 * 60 * 60)) % 24);
    var days = Math.floor(t / (1000 * 60 * 60 * 24));

    return {
      'total': t,
      'days': days,
      'hours': hours,
      'minutes': minutes,
      'seconds': seconds
    };
  }
});

/*global
  jQuery, Utils
 */
jQuery(function () {
  const $browseSearchComponents = jQuery('.browse-search-component.aem-component');

  $browseSearchComponents.each(function () {
    const $browseSearchComponent = jQuery(this);
    const $resultList = $browseSearchComponent.find('ul.browse-search-results-list');
    const $searchForm = $browseSearchComponent.find('form.browse-search-form');

    const $filterTab = $browseSearchComponent.find('.browse-search-tab');
    const $filterList = $browseSearchComponent.find('.browse-search-filter-options');
    const $filterButtons = $filterList.find('.browse-search-filter-radio');
    const $filterButton = $browseSearchComponent.find('.filter-dropdown-button');

    const $sortContainer = $browseSearchComponent.find('.browse-search-sort');
    const $sortButton = $browseSearchComponent.find('.sort-dropdown-button');
    const $sortDropdownList = $browseSearchComponent.find('.sort-dropdown');
    const $selectSortDropdown = $browseSearchComponent.find('.select-sort-dropdown');

    const $pagination = $browseSearchComponent.find('.browse-search-results-pagination');
    const $paginationDotList = $browseSearchComponent.find('.pagination-dot-list');
    const $paginationLeftButton = $browseSearchComponent.find('.pagination-button.left');
    const $paginationRightButton = $browseSearchComponent.find('.pagination-button.right');

    const $facets = $browseSearchComponent.find('.browse-search-filter-section[data-facet-map]');

    const $clearButton = $browseSearchComponent.find('.clear-search-button');
    const $clearFilterButton = $browseSearchComponent.find('.filter-clearButton');

    const resultsPerPage = $browseSearchComponent.data('results-per') ?? 18;
    const paginationDotLimit = $browseSearchComponent.data('max-pages') ?? 10;
    let currentPage = 1;
    let currentSearch = '';

    const selectedFacets = {};

    $facets.each(function () {
      const $facet = jQuery(this);
      const key = $facet.data('facet-name');
      const facetDefault = $facet.data('default');
      if (facetDefault) {
        // supports comma delimited list of default values
        selectedFacets[key] = facetDefault.split(',').map(function (s) {
          return s.trim();
        });
      } else {
        selectedFacets[key] = [];
      }
    });

    // Filter Accordion
    $filterTab.on('click', function (e) {
      const $this = jQuery(this);
      const link = jQuery(this).next('.browse-search-tab-content');
      $this.toggleClass('closed');
      link.slideToggle();
      return false;
    });

    // Filter handler
    $filterButton.on('click', function () {
      jQuery(this).toggleClass('active');
      jQuery(this).closest('.browse-search-component.aem-component').find('.browse-left').toggleClass('active');
    });

    // Sort/Filter handler when browser is resized
    jQuery(window).on('resize', function () {
      if (jQuery(window).width() > 1023) {
        $sortButton.removeClass('active');
        $filterButton.removeClass('active');
        $sortDropdownList.hide();
        jQuery('.browse-left').removeClass('active');
      }
    });

    // do a asynchronous POST to the Cludo API to get results and render to the page
    const getCludoResults = (pushState) => {
      // don't attempt to push the state when loading the state (first call to getCludoResults passes false)
      if (pushState !== false) stateToRoute();

      // add loading
      $resultList.addClass('loading');

      const searchTerm = getCurrentSearch() === '' ? '*' : getCurrentSearch();
      const pageNumber = currentPage;
      const selectedFilter = getCurrentFilter() === '' ? 'all' : getCurrentFilter();
      const sortBy = getCurrentSortBy() === '' ? 'default' : getCurrentSortBy();
      const sortByNative = getCurrentSortByNative() === '' ? 'default' : getCurrentSortBy();

      // build request body object
      let requestBody = {
        "ResponseType": "json",
        "query": searchTerm,
        "enableFacetFiltering": "true",
        "facets": {"categories": ["course", "labs"]},
        "page": pageNumber,
        "perPage": resultsPerPage,
        "operator": "and"
      };

      if (sortBy === 'highest' || sortByNative === 'highest') {
        requestBody.sort = {'rating': 'desc'};
      } else if (sortBy === 'newest' || sortByNative === 'newest') {
        requestBody.sort = {'display-date-formatted': 'desc'};
      } else if (sortBy === 'a-z' || sortByNative === 'a-z') {
        requestBody.sort = {'courseName': 'asc'};
      } else if (sortBy === 'z-a' || sortByNative === 'z-a') {
        requestBody.sort = {'courseName': 'desc'};
      }

      $facets.each(function () {
        const $facet = jQuery(this);
        const key = $facet.data('facet-key');
        const name = $facet.data('facet-name');

        const items = selectedFacets[name] ?? [];
        if (items.length > 0) {
          requestBody.facets[key] = items
        }
      });


      // add filter to requestBody if necessary
      switch (selectedFilter) {
        case 'labs':
          requestBody.filters = {"categories": ["labs"]};
          break;
        case 'standard':
          requestBody.filters = {"standard-library": ["true"]};
          break;
        case 'premium':
          requestBody.filters = {"standard-library": ["false"]};
          break;
        case 'all':
        default:
          // no filter required -- just get all
          break;
      }

      if (requestBody.facets['Skill Levels'] !== undefined || requestBody.filters !== undefined) {
        $clearFilterButton.parent().hide();
      }

      // http POST request to Cludo
      jQuery.ajax({
        url: 'https://api-us1.cludo.com/api/v3/' + CludoSearch.customerId + '/' + CludoSearch.engineId + '/search',
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          "authorization": "SiteKey " + CludoSearch.getAuthorizationKey()
        },
        async: true,
        method: "POST",
        crossDomain: true,
        data: JSON.stringify(requestBody),
        success: function (jsonResponse) {
          renderSearchResults(jsonResponse);
          renderPagination(jsonResponse);
          renderFacets(jsonResponse);
        },
        error: function (xhr, status, error) {
          console.log(error);
        }
      });
    };

    // called after getCludoResults() to render the new search results to the page
    const renderSearchResults = (results) => {
      // clear old results
      $resultList.empty();

      // build new results html
      let searchResultsHtml = '';
      for (const result of results.TypedDocuments) {
        const url = result.Fields.Url.Value;
        const title = result.Fields.Title.Value;
        const author = result.Fields.authors ? result.Fields.authors.Value : false;
        const isStandardLibrary = result.Fields['standard-library'] ? result.Fields['standard-library'].Value : false;
        const isLabs = result.Fields.categories ? result.Fields.categories.Value : false;
        const duration = result.Fields.duration.Value;
        const parsedDuration = formatDuration(duration);
        const level = result.Fields['Skill Levels'].Value;

        // not all courses have ratings.. check for them first
        let rating;
        let ratingCount;
        if (result.Fields.rating && result.Fields['rating-count']) {
          rating = result.Fields.rating.Value;
          ratingCount = result.Fields['rating-count'].Value;
        }

        // write the result as html
        searchResultsHtml += `<li class="browse-search-results-item large-12 columns">
                                <a href="${url}" class="browse-search-results-item-link" data-aa-title="browse-search-result">
                                  <div class="course-details">
                                    <h3>
                                      <strong>${title}</strong> 
                                      <span class="type-label">
                                        ${isStandardLibrary === 'true' ? 'Skills' : 'Skills - Expanded'}
                                      </span>
                                    </h3>
                                    <h4>by ${author}</h4>
                                    ${isLabs === 'labs' ? '<div class="is-labs-label"><span class="lab-info__row--icon"></span>Lab</div>' : ''}
                                    <br class="rwd-break">
                                    <div class="duration">${parsedDuration} <span class="course-info__row--icon"></span></div>
                                    <br class="rwd-break">
                                    <div class="level">${level} <img src="/etc.clientlibs/pluralsight/clientlibs/clientlib-main/resources/images/course/level.png" class="course-info__row--icon"></div>
                                    ${rating ? renderRatingStars(rating) : ''}
                                    ${ratingCount ? '<span class="rating">(' + ratingCount + ')</span>' : ''}
                                  </div>
                                </a>
                              </li>`;
      }

      // indicate if no results
      if (results.TypedDocuments.length === 0) {
        searchResultsHtml += `
          <li class="browse-search-results-item no-results"><h4>No results...</h4></li>
        `;
      }

      // append new html
      $resultList.append(searchResultsHtml);

      // remove loading
      $resultList.removeClass('loading');
    };

    // format the duration from PT4H2M35S145 ==> 4H 35M
    const formatDuration = (duration) => {
      let hoursString = duration.match(/\d+H/),
        minutesString = duration.match(/\d+M/),
        secondsString = duration.match(/[\d.]+S/),
        formattedDuration = '',
        hours = 0,
        minutes = 0,
        seconds = 0;

      if (hoursString) {
        hours = parseInt(hoursString[0].substring(0, hoursString[0].length - 1));
      }
      if (minutesString) {
        minutes = parseInt(minutesString[0].substring(0, minutesString[0].length - 1));
      }
      if (secondsString) {
        seconds = parseInt(secondsString[0].split(".")[0].substring(0, secondsString[0].length - 1));
      }

      if (seconds >= 60) {
        minutes = minutes + Math.floor(seconds / 60);
        seconds = seconds % 60;
      }
      if (minutes >= 60) {
        hours = hours + Math.floor(minutes / 60);
        minutes = minutes % 60;
      }

      if (hours) {
        formattedDuration += hours + "h ";
      }
      if (minutes) {
        formattedDuration += minutes + "m";
      }

      return formattedDuration;
    };

    // convert star rating into star html like 4.2 ==> XXXXO
    const renderRatingStars = (rating) => {
      let ratingHtml = '';

      if (rating > 0) {
        let roundedRating = (Math.round(rating * 2) / 2).toFixed(1); // e.g. 4.5

        for (let i = 0; i < 5; i++, roundedRating--) {
          if (roundedRating > 0) {
            if (roundedRating - 1 >= 0) {
              // full star
              ratingHtml += `<i class="fa fa-star"></i>`;
            } else {
              // half star
              ratingHtml += `<i class="fa fa-star-half-o"></i>`;
            }
          } else {
            // empty star
            ratingHtml += `<i class="fa fa-star gray"></i>`;
          }
        }
      }

      return ratingHtml;
    };

    // called after getCludoResults() to render the new pagination to the page
    const renderPagination = (results) => {
      // clear pagination dots
      $paginationDotList.empty();

      // build pagination dots
      let paginationDotsHtml = '';
      const resultCount = results.TotalDocument;
      let pageCount = Math.ceil(resultCount / resultsPerPage);

      // limit dots to 5
      if (pageCount > paginationDotLimit) {
        pageCount = paginationDotLimit;
      }

      for (let pageNumber = 1; pageNumber <= pageCount; pageNumber++) {
        paginationDotsHtml += `
          <li class="pagination-dot${pageNumber === currentPage ? ' active' : ''}" data-page-number="${pageNumber}"></li>
        `;
      }

      // append new pagination
      $paginationDotList.append(paginationDotsHtml);

      // set left arrow pagination button
      $paginationLeftButton.data('page-number', currentPage - 1);
      $paginationLeftButton.removeClass('deactivated');

      // deactivate left button if at start
      if (currentPage <= 1) {
        $paginationLeftButton.addClass('deactivated');
      }

      // set right arrow pagination button
      $paginationRightButton.data('page-number', currentPage + 1);
      $paginationRightButton.removeClass('deactivated');

      // deactivate right button if at end
      if (currentPage >= pageCount) {
        $paginationRightButton.addClass('deactivated');
      }
    };

    // render facets for sidebar (Facets and Skill Levels)
    const renderFacets = (results) => {
      $facets.each(function () {
        let $facet = jQuery(this);

        let $name = $facet.data('facet-name');
        let facetResults = results.Facets[$name].Items;
        let facetHtml = '';

        if (facetResults.length <= 0) {
          $facet.closest('.browse-search-filter-section').addClass('hide');
        } else {
          let facetMap = $facet.data('facet-map');
          facetResults.map((facet) => {
            let key = facet.Key;
            let label = facetMap[key] ? facetMap[key] : false;
            if (label) {
              let isChecked = selectedFacets[$name] ? selectedFacets[$name].indexOf(key) >= 0 : false;

              facetHtml += `
              <div class="browser-search-facet">
                  <input class="facet-checkbox" type="checkbox" value="${key}" id="${key}" ${isChecked ? 'checked' : ''} data-aa-title="browse-subject-facet-${key}" />
                  <label for="${key}">${label}</label>
              </div>
              `;
            }
          });

          $facet.find('.browse-search-tab-content').empty().append(facetHtml);
          if (facetHtml.length <= 0) {
            $facet.closest('.browse-search-filter-section').addClass('hide');
          } else {
            $facet.closest('.browse-search-filter-section').removeClass('hide');
          }
        }
      });

      // HINT: /content/pluralsight/en/browse/jcr:content/main/generic_block_copy/parsys/columns/column-parsys-1/generic_block_120670/parsys/columns/column-parsys-1/browse_search
    };

    // execute new search
    const doSearch = (searchTerm) => {
      // prevent redoing same search
      if (currentSearch === searchTerm) {
        return;
      }

      // update current search
      currentSearch = searchTerm;

      // reset current page
      currentPage = 1;

      // get new results from Cludo
      getCludoResults();
    };

    // execute a filter selection
    const doFilter = (filterType) => {
      // prevent redoing same filter
      const $previousFilter = $filterList.find('.browse-search-filter-radio.selected');
      if ($previousFilter.data('filter-type') === filterType) {
        return;
      }

      $facets.each(function () {
        const $facet = jQuery(this);
        selectedFacets[$facet.data('facet-name')] = [];
        $facet.find('.facet-checkbox:checked').each(function () {
          jQuery(this).prop('checked', false);
        });
      });

      // clear previous selected filter
      $previousFilter.removeClass('selected');

      // reset current page
      currentPage = 1;

      // select new filter
      $filterList.find('.browse-search-filter-radio[data-filter-type="' + filterType + '"]').addClass('selected');

      // get new results from Cludo
      getCludoResults();
    };

    // execute a sort
    const doSort = (sortType) => {
      // prevent redoing same filter
      const $previousFilter = $sortContainer.find('.sort-dropdown li.current');
      if ($previousFilter.data('sort-type') === sortType) {
        return;
      }

      // clear previous selected filter
      $previousFilter.removeClass('current');

      // reset current page
      currentPage = 1;

      // select new filter for desktop exp
      $sortContainer.find('.sort-dropdown li[data-sort-type="' + sortType + '"]').addClass('current');

      // select new filter for mobile exp
      $sortContainer.find('.select-sort-dropdown option[data-sort-type="' + sortType + '"]');

      // get new results from Cludo
      getCludoResults();
    };

    // execute paginationa
    const doPagination = (pageNumber) => {
      // prevent if same page
      if (pageNumber === currentPage) {
        return;
      }

      // update current page number
      currentPage = pageNumber;

      // scroll to top
      const topOffset = $browseSearchComponent.offset().top - 150;
      jQuery('html, body').animate({scrollTop: topOffset}, 300);

      getCludoResults();
    };

    // execute facets
    const doFacet = (el) => {

      let $facet = jQuery(el);
      let key = $facet.data('facet-name');
      selectedFacets[key] = [];

      $facet.find('.facet-checkbox').each(function () {
        const $checkbox = jQuery(this);
        const isChecked = $checkbox.prop('checked');
        if (isChecked) {
          selectedFacets[key].push($checkbox.val());
        }
      });

      currentPage = 1;
      getCludoResults();
    };

    // clear search term
    const doClearSearch = () => {
      const $searchInput = $searchForm.find('input.browse-search-form-text');
      $searchInput.val('');

      // reset current page
      currentPage = 1;

      getCludoResults();
    };

    const doClearSort = () => {
      // sort to default
      const $resetSort = $sortContainer.find('.sort-dropdown-button');
      $resetSort.text('Sort by').attr('data-sort-type', 'default');
      $resetSort.append('<span class="sort-arrow"></span>');
      $sortDropdownList.find('li.current').removeClass('current');
      $selectSortDropdown.find('option').prop('selected', function () {
        return this.defaultSelected;
      });
    }

    const doClearFilterList = () => {
      // filter back to all
      $filterButtons.removeClass('selected');
      $filterList.find('.filter-all').addClass('selected');
    }

    const doClearFacets = () => {
      $facets.each(function () {
        const $facet = jQuery(this);
        $facet.find('.facet-checkbox:checked').trigger('click');
      });
    }

    // clear filters
    const doClearFilter = () => {
      doClearSort();
      doClearFilterList();
      doClearFacets();
      $clearFilterButton.parent().hide();

      // reset current page
      currentPage = 1;

      // get new results from Cludo
      getCludoResults();
    };

    // show the clear filter button when one of the filters are triggered
    const doCheck = () => {
      const clearButton = $clearFilterButton.parent();
      clearButton.show();
    }

    // gets the users text input from the search bar
    const getCurrentSearch = () => {
      const $searchInput = $searchForm.find('input.browse-search-form-text');
      let searchTerm = $searchInput.val();
      //DOES SEARCH CONTAIN COLON SYMBOL
      if (searchTerm.includes(':')) {
        searchTerm = searchTerm.replaceAll(':', ' ').replaceAll(/\s\s+/g, ' ').trim();  // RegEx: replace all spacing, tabs, new lines etc to one space.
      }
      return searchTerm;
    };

    // get current selected filter
    const getCurrentFilter = () => {
      const $selectedFilterButton = $filterList.find('.browse-search-filter-radio.selected');
      return $selectedFilterButton.data('filter-type');
    };

    // get current selected sort by
    const getCurrentSortBy = () => {
      const $selectedSort = $sortContainer.find('li.current');
      return $selectedSort.data('sort-type');
    };

    const getCurrentSortByNative = () => {
      const $selectedSort = $sortContainer.find('select.select-sort-dropdown option.current');
      return $selectedSort.data('sort-type');
    }

    const getCurrentFacets = (facetKey) => {
      for (let i = 0; i < $facets.length; i++) {
        let $facet = jQuery($facets[i]);
        let key = $facet.data('facet-name');
        if (key !== facetKey) continue;

        const results = [];
        $facet.find('.facet-checkbox:checked').each(function () {
          results.push(jQuery(this).val());
        });

        return results;
      }
    }

    // attach user interaction (click) handlers to the search, filters, facets, and pagination
    const attachHandlers = () => {
      $sortButton.on('click', function (e) {
        e.stopPropagation();
        const $this = jQuery(this);
        jQuery('.sort-dropdown-button.active').not(this).each(function () {
          $this.removeClass('active').next('ul.sort-dropdown').hide();
        });
        $this.toggleClass('active').next('ul.sort-dropdown').toggle();
      });

      // select custom dropdown
      $sortDropdownList.find('li').on('click', function (e) {
        const $clickedSortBy = jQuery(e.currentTarget);
        const sortValue = $clickedSortBy.data('sort-type');

        $sortButton.attr('data-sort-type', sortValue);
        $sortButton.text(jQuery(this).text()).removeClass('active');
        $sortButton.append('<span class="sort-arrow"></span>');

        // match it to native select
        $selectSortDropdown.val(sortValue);

        doCheck();
        doSort(sortValue);
        $clickedSortBy.parent().hide();
        return false;
      });

      // select select option
      $selectSortDropdown.on('change', function (e) {
        const $clickedSortBy = jQuery(e.currentTarget);
        const sortValue = $clickedSortBy.find(':selected').data('sort-type');
        $sortButton.attr('data-sort-type', sortValue);

        // match it to custom select
        const getText = $sortContainer.find('.sort-dropdown li[data-sort-type="' + sortValue + '"]').text();
        $sortButton.text(getText);
        $sortButton.append('<span class="sort-arrow"></span>');

        doCheck();
        doSort(sortValue);
      });

      // clicking outside will hide the dropdown list
      jQuery(document).on('click', function () {
        $sortButton.removeClass('active');
        $sortDropdownList.hide();
      });

      // filter button click handler
      $filterButtons.on('click', (e) => {
        const $clickedFilterButton = jQuery(e.currentTarget);
        const filterType = $clickedFilterButton.data('filter-type');

        doCheck();
        doFilter(filterType);
        return false;
      });

      // search form submit handler
      $searchForm.on('submit', () => {
        const searchTerm = getCurrentSearch();
        doSearch(searchTerm);
        return false;
      });

      // pagination handlers
      $pagination.on('click', '.pagination-dot,.pagination-button:not(".deactivated")', (e) => {
        const $clickedPaginationItem = jQuery(e.currentTarget);
        const pageNumber = $clickedPaginationItem.data('page-number');
        doPagination(pageNumber);
        return false;
      });

      $facets.each(function () {
        jQuery(this).on('click', '.facet-checkbox', (e) => {
          doCheck();
          doFacet(this);
        });
      });

      // clear search term handler
      $clearButton.on('click', function () {
        doClearSearch();
        return false
      });

      // clear filter handler
      $clearFilterButton.on('click', function () {
        doClearFilter();
        return false
      });
    };

    const parseQueryString = (queryString) => {
      let query = {};
      let pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');
      for (let i = 0; i < pairs.length; i++) {
        let pair = pairs[i].split('=');
        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
      }
      return query;
    }

    const routeToState = (force) => {
      // q=java                                                     // search
      // sort=asc                                                   // sort
      // type=all                                                   // library
      // level=beginner|advanced                                    // facet query
      // subject=web-developer|software-developer|it-ops            // facet query
      // page=1                                                     // page

      const query = parseQueryString(window.location.search);

      // console.log('query', query);

      if (query.q) {
        $searchForm.find('input.browse-search-form-text').val(query.q);
      } else if (force) {
        $searchForm.find('input.browse-search-form-text').val('');
      }

      if (query.type) {
        $filterList.find('.browse-search-filter-radio').removeClass('selected').each(function () {
          jQuery(this).prop('checked', false);
        });

        $filterList.find('.browse-search-filter-radio.filter-' + query.type).addClass('selected').prop('checked', true);
        doCheck();
      } else if (force) {
        $filterButtons.removeClass('selected');
        $filterList.find('.filter-all').addClass('selected');
      }

      if (query.sort) {
        $sortDropdownList.find('li').removeClass('current');
        let $currentSort = $sortDropdownList.find("[data-sort-type=" + query.sort + "]").addClass('current');

        $sortButton.attr('data-sort-type', $currentSort.data('data-sort-type'));
        $sortButton.text($currentSort.text()).removeClass('active');
        $sortButton.append('<span class="sort-arrow"></span>');

        $selectSortDropdown.val($currentSort.data('data-sort-type'));
      } else if (force) {
        doClearSort();
      }

      $facets.each(function () {
        let $facet = jQuery(this);
        let param = $facet.data('query');
        let key = $facet.data('facet-name');
        let val = query[param];
        if (val) {
          selectedFacets[key] = val.split('|').map(function (s) {
            return s.trim();
          });
          doCheck();
        } else if (force) {
          selectedFacets[key] = [];
        }
      });

      // console.log('selectedFacets', selectedFacets);
    }

    const stateToRoute = () => {
      const query = parseQueryString(window.location.search);
      let changed = false;

      let q = $searchForm.find('input.browse-search-form-text').val();
      if (q) {
        query.q = q;
        changed = true;
      } else {
        delete query.q;
        changed = true;
      }

      let filter = getCurrentFilter();
      if (filter) {
        query.type = filter;
        changed = true;
      } else {
        delete query.type;
        changed = true;
      }

      let sort = getCurrentSortBy();
      if (sort) {
        query.sort = sort;
        changed = true;
      } else {
        delete query.sort;
        changed = true;
      }

      $facets.each(function () {
        let $facet = jQuery(this);
        let key = $facet.data('facet-name');
        let param = $facet.data('query');
        let facet = getCurrentFacets(key);
        let val = facet.join('|');
        if (val) {
          query[param] = val;
          changed = true;
        } else {
          delete query[param];
          changed = true;
        }
      });

      if (changed) {
        let queryString = Object.keys(query).map(function (key) {
          return key + '=' + query[key]
        }).join('&');

        // console.log('query', query, queryString);

        window.history.pushState(
          {},
          document.title,
          window.location.pathname + '?' + queryString
        );
      }
    }

    // set up this browse search component
    const init = ($browseSearchComponent) => {
      routeToState();
      window.onpopstate = () => {
        routeToState(true);
        getCludoResults(false);
      };

      // get default results
      getCludoResults(false);

      // attach click handlers
      attachHandlers($browseSearchComponent);
    };

    init($browseSearchComponent);
  });
});

if (jQuery(".block-chart.section").length) {
    jQuery(".block-chart .cubes ul[class^='cubes--'], .block-chart .cubes ul[class*=' cubes--']").each(function(i,v){
        jQuery(this).css('z-index',i);  
        jQuery(this).find('ul').each(function(i,v){   
            var _l = jQuery(this).find('li').length;
            jQuery(this).find('li').each(function(i,v){  
                jQuery(this).css('z-index',(_l - i));
            });
        });
    });
}

/*global
  jQuery, Utils
 */
// iife to set up component during page load
(() => {
    'use strict';

    // an init() to be used in callbacks
    const init = () => {

        const $accordionComponents = jQuery(".accordion.section");
        $accordionComponents.each( function() {
            const $accordionComponents = jQuery(this);
            const $accordionTitle = $accordionComponents.find('.accordion-title');
            const $accordionContent = $accordionComponents.find('.accordion-content');

            // makes sure Google can see contents without running JS
            $accordionContent.css('display', 'none');

            // handle accordion click
            $accordionTitle.off('click.psAccordionComponent');
            $accordionTitle.on('click.psAccordionComponent', function(e){
                $accordionContent.slideToggle().toggleClass('open');
                $accordionTitle.toggleClass('open');
                return false;
            });
        });
    };

    // use init() callback to init the component after page load
    jQuery(() => {init();});

    // use init() callback to init the component after target finishes
    document.addEventListener('at-content-rendering-succeeded', function(e) {
        jQuery(() => {init();});
    });
    document.addEventListener('at-content-rendering-failed', function(e) {
        jQuery(() => {init();});
    });
})();

if (jQuery(".blog-hero-wrapper").length) {
    var $component = jQuery(".blog-hero-wrapper");
    var title = $component.data('title');
    $component.find("h5").text(title);
}

if(jQuery(".generic-block-core").length){

    if (jQuery(".generic-block-core .parallax").length){
        // fix ie11-win8.1 parallax jitter
        if(navigator.userAgent.match(/Trident\/7\./)) {
            jQuery('body').on("mousewheel", function () {
                event.preventDefault();
                var wheelDelta = event.wheelDelta;
                var currentScrollPosition = window.pageYOffset;
                window.scrollTo(0, currentScrollPosition - wheelDelta);
            });

            jQuery('body').keydown(function (e) {
                var currentScrollPosition = window.pageYOffset;

                switch (e.which) {

                    case 38: // up
                        e.preventDefault(); // prevent the default action (scroll / move caret)
                        window.scrollTo(0, currentScrollPosition - 120);
                        break;

                    case 40: // down
                        e.preventDefault(); // prevent the default action (scroll / move caret)
                        window.scrollTo(0, currentScrollPosition + 120);
                        break;

                    default: return; // exit this handler for other keys
                }
            });
        }
    }

    if(jQuery(".generic-block-core .block--overlap").length){
        var findBlockParent = jQuery('.block--overlap');
        findBlockParent.parent('.generic-block-core').css('overflow', 'visible');
    }

    if(jQuery(".generic-block-core .block--dropshadow").length){
        var findBlockParent = jQuery('.block--dropshadow');
        findBlockParent.parent('.generic-block-core').css({'box-shadow': '2px 20px 30px -15px rgba(0,0,0,0.8)'});
    }

    if(jQuery(".generic-block-core .block--sticky").length){

        window.setStickies = function(){
            var navHeight = 0;
            if (jQuery('.ps-navigation').length){
                navHeight = jQuery('.ps-navigation').height() + jQuery('.ps-navigation').position().top;
            }
            jQuery.each( jQuery('.generic-block-wrapper.block--sticky'), function( key, value ) {
                var $stickyBlock = jQuery(value);
                var $clonedBlock = jQuery('.cloned-nav-block');
                var $header = jQuery(".ps-navigation");

                //As we scroll past sticky, grab it.
                if (jQuery(window).scrollTop() + navHeight > $stickyBlock.offset().top && !window.navCloned) {
                    $stickyBlock.clone(true).addClass('cloned-nav-block').addClass('fixed').css('top', navHeight + 'px').removeClass('block--sticky').insertAfter($header);
                    window.navCloned = true;

                //If we've scrolled above sticky spot, or if the header position has changed and we're now above, remove it.
                } else if ( window.navCloned && (jQuery(window).scrollTop() + navHeight <= $stickyBlock.offset().top
                    || $clonedBlock.offset().top < navHeight) ){
                    $clonedBlock.remove();
                    window.navCloned = false;
                } else if (window.navCloned){
                    $clonedBlock.css('top', navHeight + 'px');
                }
            });
        }
        if(typeof window.contentShown == 'undefined' || window.contentShown){ //don't want to run this if we're doing the target hide delay. Undefined means it's on, but hasn't finished.
            setStickies();
        }
        jQuery(window).scroll(function() {
            setStickies();
        });
    }



    // Load YouTube background videos
    if(jQuery(".generic-block-video")){
        // Only show video backgrounds on non-mobile devices
        var mobileRegex = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i,
            isMobile = mobileRegex.test(navigator.userAgent);

        if (!isMobile) {
            window.psYtVideos = window.psYtVideos || {};
            psYtVideos.vidConfigs = psYtVideos.vidConfigs || [];

            // Loop through objects with data-youtube-video-id
            var $bgVideos = jQuery('[data-youtube-video-id]');
            jQuery.each( $bgVideos, function( key, value ) {
                var $videoDiv = jQuery(value),
                    youtubeVideoId = $videoDiv.data('youtube-video-id'),
                    playerId = "bgPlayer" + key;
                    $videoDiv.attr('id', playerId); // assign video a unique id

                psYtVideos.vidConfigs.push({
                    videoElId: playerId,
                    videoSettings: {
                        videoId: youtubeVideoId,
                        playerVars: {
                            autoplay: 1, // Auto-play the video on load
                            controls: 0, // Hide pause/play buttons in player
                            loop: 1, // Run the video in a loop
                            playlist: youtubeVideoId, // Must be the same as videoId to loop properly
                            fs: 0, // Hide the full screen button
                            cc_load_policy: 0, // Hide closed captions
                            iv_load_policy: 3, // Hide the Video Annotations
                            autohide: 1, // Hide video controls when playing
                            rel: 0 // Hide related videos
                        },
                        events: {
                            'onReady': function(e) {
                                var player = e.target;
                                player.mute(); // Mute video sound
                                // Loop video from cache by seeking to the beginning right before the video ends
                                var intervalDuration = player.getDuration() * 1000 - 1000; // get video length minus a second
                                setInterval(function(){
                                  player.seekTo(0);
                                }, intervalDuration);
                                vidRescale(playerId);
                            }
                        }
                    }
                });

                // calls resize function on load and resize
                var parentClassAttr = jQuery('#'+playerId).parent().attr('class');
                if (parentClassAttr.indexOf('youtube-video-expanded') === -1) {
                    jQuery(window).on('resize', function(){
                        vidRescale(playerId);
                    });
                }
            });

            // resizes youtube video background
            function vidRescale(playerId){
                var $video = jQuery('#' + playerId),
                    $wrapper = $video.closest( ".generic-block-core" ).find( ".generic-block-wrapper:eq(0)" );
                // remove generic block background so video shows
                $wrapper
                  .css( "background-color", "rgba(0, 0, 0, 0.3)" )
                  .css( "background-image", "initial" );
                // calculate video size to match block size
                var heroWidth = $wrapper.outerWidth(),
                    heroHeight = $wrapper.outerHeight(),
                    videoWidth = $video.outerWidth(),
                    videoHeight = $video.outerHeight(),
                    enlargeRatio = 1.03,
                    videoDimensions = videoWidth/videoHeight,
                    calculatedWidth,
                    calculatedHeight;
                if (heroWidth/heroHeight > videoDimensions){ // if block width/height is greater than the video
                  var calculatedWidth = heroWidth * enlargeRatio,
                      calculatedHeight = heroWidth / videoDimensions * enlargeRatio;
                } else { // block width/height is less than the video or equal
                  var calculatedWidth = heroHeight * videoDimensions * enlargeRatio,
                      calculatedHeight = heroHeight * enlargeRatio;
                }
                var calculatedHorizontalOffset = (heroWidth - calculatedWidth) / 2,
                    calculatedVerticalOffset = (heroHeight - calculatedHeight) / 2;
                // sets calculated youtube video brackground properties
                $video.css({'height': calculatedHeight+'px'});
                $video.css({'width': calculatedWidth+'px'});
                $video.css({'top': calculatedVerticalOffset+'px'});
                $video.css({'left': calculatedHorizontalOffset+'px'});
            }
        }
    }
}
if(jQuery(".generic-block").length){

    if (jQuery(".generic-block .parallax").length){
        // fix ie11-win8.1 parallax jitter
        if(navigator.userAgent.match(/Trident\/7\./)) {
            jQuery('body').on("mousewheel", function () {
                event.preventDefault();
                var wheelDelta = event.wheelDelta;
                var currentScrollPosition = window.pageYOffset;
                window.scrollTo(0, currentScrollPosition - wheelDelta);
            });

            jQuery('body').keydown(function (e) {
                var currentScrollPosition = window.pageYOffset;

                switch (e.which) {

                    case 38: // up
                        e.preventDefault(); // prevent the default action (scroll / move caret)
                        window.scrollTo(0, currentScrollPosition - 120);
                        break;

                    case 40: // down
                        e.preventDefault(); // prevent the default action (scroll / move caret)
                        window.scrollTo(0, currentScrollPosition + 120);
                        break;

                    default: return; // exit this handler for other keys
                }
            });
        }
    }

    if(jQuery(".generic-block .block--overlap").length){
        var findBlockParent = jQuery('.block--overlap');
        findBlockParent.parent('.generic-block').css('overflow', 'visible');
    }

    if(jQuery(".generic-block .block--dropshadow").length){
        var findBlockParent = jQuery('.block--dropshadow');
        findBlockParent.parent('.generic-block').css({'box-shadow': '2px 20px 30px -15px rgba(0,0,0,0.8)'});
    }

    if(jQuery(".generic-block .block--sticky").length){

        window.setStickies = function(){
            var navHeight = 0;
            if (jQuery('.ps-navigation').length){
                navHeight = jQuery('.ps-navigation').height() + jQuery('.ps-navigation').position().top;
            }
            jQuery.each( jQuery('.generic-block-wrapper.block--sticky'), function( key, value ) {
                var $stickyBlock = jQuery(value);
                var $clonedBlock = jQuery('.cloned-nav-block');
                var $header = jQuery(".ps-navigation");

                //As we scroll past sticky, grab it.
                if (jQuery(window).scrollTop() + navHeight > $stickyBlock.offset().top && !window.navCloned) {
                    $stickyBlock.clone(true).addClass('cloned-nav-block').addClass('fixed').css('top', navHeight + 'px').removeClass('block--sticky').insertAfter($header);
                    window.navCloned = true;

                //If we've scrolled above sticky spot, or if the header position has changed and we're now above, remove it.
                } else if ( window.navCloned && (jQuery(window).scrollTop() + navHeight <= $stickyBlock.offset().top
                    || $clonedBlock.offset().top < navHeight) ){
                    $clonedBlock.remove();
                    window.navCloned = false;
                } else if (window.navCloned){
                    $clonedBlock.css('top', navHeight + 'px');
                }
            });
        }
        if(typeof window.contentShown == 'undefined' || window.contentShown){ //don't want to run this if we're doing the target hide delay. Undefined means it's on, but hasn't finished.
            setStickies();
        }
        jQuery(window).scroll(function() {
            setStickies();
        });
    }



    // Load YouTube background videos
    if(jQuery(".generic-block-video")){
        // Only show video backgrounds on non-mobile devices
        var mobileRegex = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i,
            isMobile = mobileRegex.test(navigator.userAgent);

        if (!isMobile) {
            window.psYtVideos = window.psYtVideos || {};
            psYtVideos.vidConfigs = psYtVideos.vidConfigs || [];

            // Loop through objects with data-youtube-video-id
            var $bgVideos = jQuery('[data-youtube-video-id]');
            jQuery.each( $bgVideos, function( key, value ) {
                var $videoDiv = jQuery(value),
                    youtubeVideoId = $videoDiv.data('youtube-video-id'),
                    playerId = "bgPlayer" + key;
                    $videoDiv.attr('id', playerId); // assign video a unique id

                psYtVideos.vidConfigs.push({
                    videoElId: playerId,
                    videoSettings: {
                        videoId: youtubeVideoId,
                        playerVars: {
                            autoplay: 1, // Auto-play the video on load
                            controls: 0, // Hide pause/play buttons in player
                            loop: 1, // Run the video in a loop
                            playlist: youtubeVideoId, // Must be the same as videoId to loop properly
                            fs: 0, // Hide the full screen button
                            cc_load_policy: 0, // Hide closed captions
                            iv_load_policy: 3, // Hide the Video Annotations
                            autohide: 1, // Hide video controls when playing
                            rel: 0 // Hide related videos
                        },
                        events: {
                            'onReady': function(e) {
                                var player = e.target;
                                player.mute(); // Mute video sound
                                // Loop video from cache by seeking to the beginning right before the video ends
                                var intervalDuration = player.getDuration() * 1000 - 1000; // get video length minus a second
                                setInterval(function(){
                                  player.seekTo(0);
                                }, intervalDuration);
                                vidRescale(playerId);
                            }
                        }
                    }
                });

                // calls resize function on load and resize
                var parentClassAttr = jQuery('#'+playerId).parent().attr('class');
                if (parentClassAttr.indexOf('youtube-video-expanded') === -1) {
                    jQuery(window).on('resize', function(){
                        vidRescale(playerId);
                    });
                }
            });

            // resizes youtube video background
            function vidRescale(playerId){
                var $video = jQuery('#' + playerId),
                    $wrapper = $video.closest( ".generic-block" ).find( ".generic-block-wrapper:eq(0)" );
                // remove generic block background so video shows
                $wrapper
                  .css( "background-color", "rgba(0, 0, 0, 0.3)" )
                  .css( "background-image", "initial" );
                // calculate video size to match block size
                var heroWidth = $wrapper.outerWidth(),
                    heroHeight = $wrapper.outerHeight(),
                    videoWidth = $video.outerWidth(),
                    videoHeight = $video.outerHeight(),
                    enlargeRatio = 1.03,
                    videoDimensions = videoWidth/videoHeight,
                    calculatedWidth,
                    calculatedHeight;
                if (heroWidth/heroHeight > videoDimensions){ // if block width/height is greater than the video
                  var calculatedWidth = heroWidth * enlargeRatio,
                      calculatedHeight = heroWidth / videoDimensions * enlargeRatio;
                } else { // block width/height is less than the video or equal
                  var calculatedWidth = heroHeight * videoDimensions * enlargeRatio,
                      calculatedHeight = heroHeight * enlargeRatio;
                }
                var calculatedHorizontalOffset = (heroWidth - calculatedWidth) / 2,
                    calculatedVerticalOffset = (heroHeight - calculatedHeight) / 2;
                // sets calculated youtube video brackground properties
                $video.css({'height': calculatedHeight+'px'});
                $video.css({'width': calculatedWidth+'px'});
                $video.css({'top': calculatedVerticalOffset+'px'});
                $video.css({'left': calculatedHorizontalOffset+'px'});
            }
        }
    }
}
if ( jQuery('.flex-block-container').length && window.wcmmodedisabled ) {
    jQuery('.flex-block-container').each(function(key, component){
        var numMap = {
            "six": 6,
            "five": 5,
            "four": 4,
            "three": 3,
            "two": 2,
            "one": 1   
        };
        
        //grab our classes and make into just the slide limit word for each breakpoint
        var desktopNumText = component.className.split("desktop-")[1].split(" ")[0];
        var tabletNumText = component.className.split("tablet-")[1].split(" ")[0];
        var mobileNumText = component.className.split("mobile-")[1].split(" ")[0];
        
        //start off assuming we can't carousel at this size.
        var desktopSetting = 'unslick';
        var tabletSetting = 'unslick';
        var mobileSetting = 'unslick';

        //for any breakpoint with enough slides, turn on carousel setting to set number of slides.
        if (component.children.length > numMap[desktopNumText]){
            desktopSetting =  { slidesToShow: numMap[desktopNumText] };
        }
        if (component.children.length > numMap[tabletNumText]) {
            tabletSetting =  { slidesToShow: numMap[tabletNumText] };
        }
        if (component.children.length > numMap[mobileNumText]){
            mobileSetting =  { slidesToShow: numMap[mobileNumText] };
        }
        
        //initialize carousel
        if (component.className.indexOf("carousel") > -1){
            jQuery(component).slick({
                slidesToShow:numMap[desktopNumText],
                slidesToScroll:1,
                infinite: false,
                responsive: [
                      {
                        breakpoint: 9999,
                        settings: desktopSetting
                      },
                      {
                        breakpoint: 1024,
                        settings: tabletSetting
                      },
                      {
                        breakpoint: 640,
                        settings: mobileSetting
                      }
                  ]
            });
        }
        
        //either not a carousel, or at a breakpoint where it can't carousel
        if (component.className.indexOf("slick-initialized") == -1 && component.className.indexOf("override-to-center") == -1 ){
            jQuery(component).removeClass('carousel');
            for (var i = 0; i< 6; i++){
                jQuery(component).append('<div class="flex-card section hidden"></div>');
            }
        }
    });
} 

/*global
  jQuery
 */
jQuery(function() {
  var $featureBlock = jQuery('.feature-block.section');

  $featureBlock.each(function() {
    var $feature = jQuery(this);
    var $featureBlockContainer = $feature.find(".feature-block-container");
    var $featureBlockTabs = $featureBlockContainer.find(".feature-block-tabs");
    var $featureBlockContents = $featureBlockContainer.find(".feature-block-contents");
    var $featureItemTabs = $featureBlockTabs.find(".feature-item-tabs");
    var $featureItem = $featureBlockContents.find(".feature-item");
    var $featureContents = $featureBlockContents.find(".feature-item-contents");
    var isResize;

    var dataTab = "";
    var dataTabArr = [];
    $featureItemTabs.each(function () {
      dataTab = jQuery(this).data("tab");
      dataTabArr.push(dataTab);
    });

    $featureItem.each(function(i, e) {
      jQuery(e).attr("data-tab", dataTabArr[i]);
    });


    function desktopOnLoadReset() {
      $featureItem.hide();
      $featureItemTabs.removeClass("active");
      $featureContents.show();

      $featureItemTabs.first().addClass("active");
      $featureItem.first().addClass("active").fadeIn();
    }

    function mobileOnLoadReset() {
      $featureItem.removeClass("active").show();
      $featureContents.first().show();
      $featureContents.hide();
    }

    function updateResults() {
      var $selectedTab = $featureBlockTabs.find(".active");
      var selectedTabContent = $selectedTab.data("tab");
      var getData = selectedTabContent === '' ? '[data-tab]' : `[data-tab="${selectedTabContent}"]`;
      var result = $featureBlockContents.find(getData);

      $featureItem.hide();
      result.stop(false,true).fadeIn();
    }

    function desktopFunc() {
      if ($featureBlockContainer.hasClass("interactive-default")) {
        $featureBlockTabs.on("click", function (e) {
          var $tab = jQuery(e.target).closest(".feature-item-tabs");
          var $tabGroup = $tab.parent();
          var $tabGroupList = $tabGroup.find(".feature-item-tabs");

          $tabGroupList.removeClass("active");
          $tab.addClass("active");
          updateResults();
        });
        return false;
      }
      if ($featureBlockContainer.hasClass("interactive-alt")) {
        $featureBlockTabs.on("mouseover", function (e) {
          var $tab = jQuery(e.target).closest(".feature-item-tabs");
          var $tabGroup = $tab.parent();
          var $tabGroupList = $tabGroup.find(".feature-item-tabs");

          $tabGroupList.removeClass("active");
          $tab.addClass("active");
          updateResults();
        });
        return false;
      }
    }

    function mobileFunc() {
      $featureBlockContents.unbind("click").on("click", function (e) {
        var $tab = jQuery(e.target).closest(".feature-item .feature-item-tabs");
        var $tabGroup = $tab.parent();
        var $tabGroupList = $tabGroup.find(".feature-item-tabs");
        $tabGroupList.next(".feature-item-contents").slideToggle();
      });
      return false;
    }

    function renderFeature() {
      var width = jQuery(this).width();
      if (width > 1024) {
        desktopOnLoadReset();
        desktopFunc();
      } else {
        mobileOnLoadReset();
        mobileFunc();
      }
    }

    jQuery(window).on('load resize', function() {
      clearTimeout(isResize);
      isResize = setTimeout(renderFeature, 300);
    });
  });
});
jQuery(".ps-carousel-wrapper").each(function(index, component){
  var $component = jQuery(component);
  var speed = $component.find('.ps-carousel-speed').val();
  var msSpeed = speed ? speed * 1000 : 3000
  var $carousel = $component.find('.ps-carousel');

  // init slick
  $carousel.slick({
    nextArrow: $component.find('.ps-carousel-next'),
    prevArrow: $component.find('.ps-carousel-prev'),
    dots: true,
    autoplay: true,
    autoplaySpeed: msSpeed,
    pauseOnHover: true
  });
});

if (jQuery('.animation-wrapper-container').length && document.URL.indexOf("disableAnimation=true") == -1) {
    jQuery('.aos-noscript-override').each(function (key, item) {
        jQuery(item).removeClass("aos-noscript-override");
    });

    AOS.init({
        duration: 1000,
        once: true,
        startEvent: 'load',
    });

    var debounce_timer;

    jQuery(window).on('scroll', function() {
        if(debounce_timer) {
            window.clearTimeout(debounce_timer);
        }

        debounce_timer = window.setTimeout(function() {
            AOS.refresh();
        }, 100);
    });

    if(jQuery('.rellax').length && typeof(Rellax) !== 'undefined') {
      let r = new Rellax('.rellax');
    }
}

jQuery(".abm-image-carousel-wrapper").each(function(index, component){
  var $component = jQuery(component);
  var $carousel = $component.find('.abm-image-carousel');
  const numSlides = parseInt($carousel.data('num-slides'));

  // init slick
  $carousel.slick({
    slidesToShow: numSlides,
    slidesToScroll: numSlides,
    infinite: true,
    dots: false,
    autoplay: false,
    arrows: true,
    prevArrow: '<button class="slick-prev">Previous</button>',
    nextArrow: '<button class="slick-next">Next</button>',
    responsive: [
      {
        breakpoint: 1080,
        settings: {
          slidesToShow: 4,
          slidesToScroll: 4,
        }
      },
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2
        }
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1
        }
      }
    ]
  });
});