(() => {
  'use strict';

  function init() {
    const allCustomImages = document.querySelectorAll(`[data-custom-image-component-src]:not([src])`);
    allCustomImages.forEach(applyCustomImageSrc);
  }

  function applyCustomImageSrc(customImage) {
    const dataSrc = customImage.dataset?.customImageComponentSrc;
    const containerWidth = customImage?.parentElement?.clientWidth || 0;
    const isUnsupportedFormat = dataSrc && dataSrc.endsWith(`.svg`) || dataSrc.endsWith(`.webp`);

    if (dataSrc && !isUnsupportedFormat) {
      const lastDot = dataSrc.lastIndexOf(".");
      const src = `${dataSrc.slice(0, lastDot)}.resize.${containerWidth}${dataSrc.slice(lastDot)}`;
      customImage.setAttribute(`src`, src);
    } else {
      customImage.setAttribute(`src`, dataSrc);
    }
  }

  document.addEventListener("customImageRefresh", init);
  document.readyState !== `loading` ? init() : document.addEventListener(`readystatechange`, () => {document.readyState === `complete` && init()});

})();
/*global
  jQuery, Utils
 */
// iife to set up component during page load
(() => {
  'use strict';

  // an init() to be used in callbacks
  const init = () => {
    const $rteComponents = jQuery(".rich-text-editor");
    $rteComponents.each( function() {
      const $rteComponent = jQuery(this),
            $rteLinks = $rteComponent.find("a"),
            rteComponentName = "rich_text_editor";

      $rteLinks.each(function (i) {
          const $this = jQuery(this);
          let $rteLinkText = $this.text(),
              $rteLinkUrl = $this.attr("href");
          $this.attr("data-ps-analytics", rteComponentName + "|" + $rteLinkText + "|" + $rteLinkUrl);
        });

    });
  };

  document.readyState !== `loading` ? init() : document.addEventListener(`readystatechange`, () => {document.readyState === `complete` && init()});

})();


(() => {
  'use strict';

  function init() {
    let formsWaiting = document.querySelectorAll(`[data-script-work="marketo-cmp"]`);

    [...formsWaiting].forEach(formWaitingElement => {
      let form = formWaitingElement.querySelector('form');
      let successMsg = formWaitingElement.querySelector('.successText');
      form.addEventListener("submit", (event) => {
        event.preventDefault();
        submitForm(form, successMsg);
      })
      formWaitingElement.attributes.removeNamedItem(`data-script-work`);
    });
  }

  function submitForm(form, successText) {
    let formData = new FormData(form);
    let submitButton = form.querySelector(`button[type='submit']`);
    submitButton.disabled = true;

    let url = new URL(document.location.href);
    let containsExtension = url.pathname.indexOf(`.`) > 0;
    if (containsExtension) {
      url.pathname =  url.pathname.slice(0, url.pathname.indexOf(`.`));
    }
    url.pathname += ".marketo.json";
    url.search = "";

    fetch(url.href, {
      method: "POST",
      body: formData,
    })
    .then((response) => {
      if (response.status === 200) {
        successfulSubmission(form, successText);
      } else {
        submitButton.disabled = false;
      }
    });
  }

  function successfulSubmission(form, successText) {
    form.classList.add(`hidden`);
    successText?.classList.remove(`hidden`);
    if (form.action && form.action !== document.location.href) {
      document.location.href = form.action;
    }
  }

  document.readyState !== `loading` ? init() : document.addEventListener(`readystatechange`, () => {document.readyState === `complete` && init()});

})();