(() => {
  'use strict';

  const TABBABLE_ELEMENT_QUERY = `a, button, input, [tabindex]`
  let allDropdownButtons
  let allMobileAccordionButtons
  let dialogModal
  let openModalButton
  let closeModalButton

  function init() {
    allDropdownButtons = document.querySelectorAll(`.main-header button.dropdown`)
    allMobileAccordionButtons = document.querySelectorAll(`.main-header #mobile-menu button.dropdown`)
    allDropdownButtons.forEach(applyDropdownButtonClickHandler)

    dialogModal = document.querySelector(`.main-header-dialog-modal`);
    openModalButton = document.querySelectorAll(`.ps-button.contact-sales`)
    closeModalButton = document.querySelectorAll('.dialog-close-button')

    openModalButton.forEach((button) => button.addEventListener(`click`, () => {
      openModal(dialogModal);
    }))
    closeModalButton.forEach((button) => button.addEventListener(`click`, () => {
      closeModal(button);
    }))
    dialogModal.addEventListener("click", (event) => {
      const dialogDimensions = dialogModal.getBoundingClientRect();
      if (event.clientX < dialogDimensions.left ||
        event.clientX > dialogDimensions.right ||
        event.clientY < dialogDimensions.top ||
        event.clientY > dialogDimensions.bottom) {
        dialogModal.close();
      }
    });

    function openModal(dialogModal) {
      dialogModal.showModal();
    }

    function closeModal(closeModalButton) {
      let closestModal = closeModalButton.closest('dialog');
      closestModal.close();
    }

    const allClickScreens = document.querySelectorAll(`.click-screen`)
    allClickScreens.forEach(applyClickScreenClickHandler)

    const innerDrawerContents = document.querySelectorAll(`.drawer-wrapper:not(.accordion)`)
    innerDrawerContents.forEach(applyInnerDrawerContentsClickHandler)

    handleEscapeKeyDown()
    handleSearchSubmit()
  }

  function applyDropdownButtonClickHandler(dropdownButton) {
    dropdownButton.addEventListener(`click`, handleDropdownButtonClick)
  }

  function applyClickScreenClickHandler(clickScreen) {
    clickScreen.addEventListener(`click`, handleClickScreenClick)
  }

  function applyInnerDrawerContentsClickHandler(innerDrawerContents) {
    innerDrawerContents.addEventListener(`click`, handleInnerDrawerContentsClick)
  }

  function handleDropdownButtonClick(event) {
    const dropdownButton = event.currentTarget
    const isSpace = event.detail === 0
    const isMobileAccordion = document.getElementById('mobile-menu').contains(dropdownButton);

    const drawer = getDrawerFromButton(dropdownButton)

    if (dropdownButton.classList.contains(`open`) && !drawer.classList.contains(`-hidden`)) {
      closeDrawer(dropdownButton, drawer)
      unlockTabbing()
    } else {
      if (!isMobileAccordion) {
        closeAnyOpenDrawers()
      } else {
        closeAnyOpenAccordion()
      }
      openDrawer(dropdownButton, drawer, isSpace)
    }
  }

  function handleClickScreenClick(event) {
    if (event.currentTarget.classList?.contains(`click-screen`)) {
      closeAnyOpenDrawers(true)
    }
  }

  function handleInnerDrawerContentsClick(event) {
    event.stopPropagation();
  }

  function getDrawerFromButton(dropdownButton) {
    const drawerName = dropdownButton.getAttribute(`data-drawer-name`)
    return document.getElementById(drawerName)
  }

  function closeAnyOpenDrawers(isClick) {
    allDropdownButtons.forEach(dropdownButton => closeDrawer(dropdownButton, getDrawerFromButton(dropdownButton), isClick))
    unlockTabbing()
  }

  function closeAnyOpenAccordion(isClick) {
    allMobileAccordionButtons.forEach(dropdownButton => closeDrawer(dropdownButton, getDrawerFromButton(dropdownButton), isClick))
    unlockTabbing()
  }

  function openDrawer(dropdownButton, drawer, focusFirstElement) {
    drawer.classList.remove(`-hidden`)
    dropdownButton.setAttribute(`aria-expanded`, `true`)
    dropdownButton.classList.add(`open`)
    dropdownButton.parentNode.classList.add(`active`)
    if (focusFirstElement) drawer.querySelector(TABBABLE_ELEMENT_QUERY)?.focus()
    lockTabbing(drawer.classList.contains(`sign-in`) ? `header .utility-bar` : `header.main-header`)
    applyTabHandlerToDrawerEnds(dropdownButton, drawer)
    document.body.classList.add(`locked`)
  }

  function closeDrawer(dropdownButton, drawer, preventFocus) {
    if (!dropdownButton.classList.contains(`open`) && drawer.classList.contains(`-hidden`)) return

    drawer.classList.add(`-hidden`)
    dropdownButton.setAttribute(`aria-expanded`, `false`)
    dropdownButton.classList.remove(`open`)
    dropdownButton.parentNode.classList.remove(`active`)
    if (!preventFocus) dropdownButton.focus()
    document.body.classList.remove(`locked`)
  }

  function lockTabbing(exclusionParentSelector) {
    const exclusionParentElement = document.querySelector(exclusionParentSelector)
    const allTabbableElementsArray = [...document.querySelectorAll(TABBABLE_ELEMENT_QUERY)]

    allTabbableElementsArray.forEach(element => processItemForTabIndexLocking(element, exclusionParentElement))

    processTreeForAriaHidden(exclusionParentElement.parentElement, exclusionParentElement)
  }

  function processTreeForAriaHidden(currentTree, exclusionParentElement) {
    [...currentTree.children].forEach(element => {
      if (!element.contains(exclusionParentElement)) {
        const previousAriaHidden = element.getAttribute(`aria-hidden`)
        if (previousAriaHidden) element.setAttribute(`data-previous-aria-hidden`, previousAriaHidden)
        element.setAttribute(`aria-hidden`, `true`)
        element.setAttribute(`data-hidden-set-by`, `header-nav`)
      }
    })
    if (currentTree.parentElement && currentTree.parentElement.tagName !== `HTML`) {
      processTreeForAriaHidden(currentTree.parentElement, exclusionParentElement)
    }
  }

  function processItemForTabIndexLocking(element, exclusionParentElement) {
    if (!exclusionParentElement.contains(element)) {
      const previousAriaHidden = element.getAttribute(`tabindex`)
      if (previousAriaHidden) element.setAttribute(`data-previous-tabindex`, previousAriaHidden)
      element.setAttribute(`tabindex`, -1)
      element.setAttribute(`data-tabindex-set-by`, `header-nav`)
    }
  }

  function unlockTabbing() {
    document.querySelectorAll(`[data-tabindex-set-by="header-nav"]`).forEach(item => {
      const previousTabIndex = item.getAttribute(`data-previous-tab-index`)
      previousTabIndex ? item.setAttribute(`tabindex`, previousTabIndex) : item.removeAttribute(`tabindex`)
      item.removeAttribute(`data-previous-tab-index`)
      item.removeAttribute(`data-tabindex-set-by`)
    })

    document.querySelectorAll(`[data-hidden-set-by="header-nav"]`).forEach(item => {
      const previousAriaHidden = item.getAttribute(`data-previous-aria-hidden`)
      previousAriaHidden ? item.setAttribute(`aria-hidden`, previousAriaHidden) : item.removeAttribute(`aria-hidden`)
      item.removeAttribute(`data-previous-aria-hidden`)
      item.removeAttribute(`data-hidden-set-by`)
    })
  }

  function applyTabHandlerToDrawerEnds(dropdownButton, drawer) {
    const allTabbableElementsInDrawer = [...drawer.querySelectorAll(TABBABLE_ELEMENT_QUERY)]
    if (allTabbableElementsInDrawer.length <= 0) return
    let firstTabbableElementInDrawer
    let lastTabbableElementInDrawer
    firstTabbableElementInDrawer = allTabbableElementsInDrawer[0]
    firstTabbableElementInDrawer.addEventListener(`keydown`, function (event) {
      if (event.shiftKey && event.keyCode === 9) {
        event.preventDefault()
        closeDrawer(dropdownButton, drawer)
        unlockTabbing()
      }
    })

    lastTabbableElementInDrawer = allTabbableElementsInDrawer[allTabbableElementsInDrawer.length - 1]
    lastTabbableElementInDrawer.addEventListener(`keydown`, function (event) {
      if (!event.shiftKey && event.keyCode === 9) {
        closeDrawer(dropdownButton, drawer, true)
        unlockTabbing()
      }
    })
  }

  function handleEscapeKeyDown() {
    document.addEventListener(`keydown`, function (event) {
      if (event.key === `Escape`) {
        closeAnyOpenDrawers()
      }
    })
  }

  function handleSearchSubmit() {
    const searchForms = [...document.getElementsByClassName(`header-search-form`)]
    searchForms.forEach((searchForm) => {
      searchForm.addEventListener(`submit`, function (event) {
        event.stopPropagation()
        event.stopImmediatePropagation()
        event.preventDefault()

        const searchInput = searchForm.querySelector(`.header-search-input`)
        const searchTerm = searchInput.value
        if (!!searchTerm) {
          window.location.href = `https://www.pluralsight.com/search?q=${searchTerm}`
        }
      });
    })
  }

  document.readyState !== `loading` ? init() : document.addEventListener(`readystatechange`, () => {
    document.readyState === `complete` && init()
  });

})()