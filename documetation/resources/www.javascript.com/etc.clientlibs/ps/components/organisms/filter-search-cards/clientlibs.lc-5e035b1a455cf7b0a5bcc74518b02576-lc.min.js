(() => {
  'use strict';

  window.onpopstate = function(e){
    location.reload();
  };

  function init() {
    const allFilterSearchCardComponents = document.querySelectorAll(`.filter-search-cards-drop-container`);

    allFilterSearchCardComponents.forEach(componentInit);
  }

  function componentInit(component) {
    const allComponentFormElements = component.querySelectorAll('form.filter-search-cards-content-wrapper');
    allComponentFormElements.forEach(applyFormSubmitHandler);
    const allAccordionButtons = component.querySelectorAll(`.filter-search-cards-accordion-button`);
    allAccordionButtons.forEach(applyAccordionButtonClickHandler);
    const allContentSection = component.querySelector(`.filter-search-cards-content-wrapper`);
    const filterClearButtons = component.querySelectorAll(`.filter-search-cards-clear-button button.ps-button`);
    filterClearButtons.forEach(setClearFilterHandler);
    const everyFilterCheckbox = component.querySelectorAll(`.filter-search-cards-filter-checkbox-fieldset .filter-search-cards-filter-checkbox`);
    everyFilterCheckbox.forEach(setFilterHandler);

    parseFormComponentState(allContentSection);
  }

  function applyFormSubmitHandler(componentFormElement) {
    componentFormElement.addEventListener(`submit`, handleFormElementSubmit);
  }

  function applyAccordionButtonClickHandler(accordionButton) {
    accordionButton.addEventListener(`click`, handleAccordionButtonClick);
  }

  function handleFormElementSubmit(componentFormElementSubmitEvent) {
    componentFormElementSubmitEvent.preventDefault();
    initiateSearch(componentFormElementSubmitEvent.target);
  }

  function handleAccordionButtonClick(eventOrButton) {
    const accordionButton = eventOrButton?.currentTarget ? eventOrButton.currentTarget : eventOrButton;

    const accordionContent = getAccordionContentFromButton(accordionButton);

    if (accordionButton.classList.contains(`-active`)) {
      closeAccordion(accordionButton, accordionContent);
    } else {
      openAccordion(accordionButton, accordionContent);
    }
  }

  function getAccordionContentFromButton(accordionButton) {
    const accordionContentId = accordionButton.getAttribute(`aria-controls`);
    return accordionButton.closest(`.filter-search-cards`).querySelector(`#${accordionContentId}`);
  }

  function openAccordion(accordionButton, accordionContent) {
    accordionContent.classList.add(`-active`);
    accordionButton.setAttribute(`aria-expanded`, `true`);
    accordionButton.classList.add(`-active`);
  }

  function closeAccordion(accordionButton, accordionContent, preventFocus) {
    if (!accordionButton.classList.contains(`-active`)) return;

    accordionContent.classList.remove(`-active`);
    accordionButton.setAttribute(`aria-expanded`, `false`);
    accordionButton.classList.remove(`-active`);
    if (!preventFocus) accordionButton.focus();
  }

  async function initiateSearch(submittingFormChildElementOrContainer) {
    const targetContainer = submittingFormChildElementOrContainer.closest(`.filter-search-cards-drop-container`);
    const form = targetContainer?.nodeName === "FORM" ? targetContainer : targetContainer.querySelector('form.filter-search-cards-content-wrapper');
    const formValueMapArray = getFormValueMapArray(form);
    const componentJcrPath = targetContainer.dataset.jcrPath + ".html";
    const currentOrigin = location.origin;
    const currentPathname = location.pathname;
    const historyPushUrl = new URL(currentPathname, currentOrigin);
    const searchUrl = new URL(componentJcrPath, currentOrigin);
    const customImageRefreshEvent = new Event("customImageRefresh");
    let returnHtml;

    targetContainer.classList.add("-sort-in-progress");

    appendParameterMapToUrlObject(searchUrl, formValueMapArray);
    appendParameterMapToUrlObject(historyPushUrl, formValueMapArray);

    let headers = getHtmlHeaders();

    await fetch(searchUrl, {
      method: "GET",
      headers
    })
    .then((response) => {
      if (response.status === 200) {
        return response.text();
      }
    })
    .then((responseHtmlAsText) => {
      returnHtml = responseHtmlAsText;
    });

    if (returnHtml) {
      const domParser = new DOMParser();
      const parsedHtml = domParser.parseFromString(returnHtml, "text/html");
      const htmlNodeArray = parsedHtml?.body?.children ? Array.from(parsedHtml.body.children) : null;

      if(htmlNodeArray) {
        targetContainer.innerHTML = "";
        htmlNodeArray.forEach((htmlNode) => {
          targetContainer.append(htmlNode.parentElement.removeChild(htmlNode));
        });
      }

      document.dispatchEvent(customImageRefreshEvent);

      setFiltersAfterSearch(targetContainer, formValueMapArray);
      window.history.pushState({}, "", historyPushUrl.toString());
      componentInit(targetContainer);
    }

    targetContainer.classList.remove("-sort-in-progress");
  }

  function getHtmlHeaders() {
    let headers = new Headers();
    headers.append('Content-Type', 'text/html; charset=UTF-8');
    headers.append('Accept', 'text/html; charset=UTF-8');
    return headers;
  }

  function appendParameterMapToUrlObject(urlObject, formValueMapArray) {
    if (formValueMapArray.length) {
      formValueMapArray.forEach((formKeyValuePair) => {
        if(formKeyValuePair.value) {
          urlObject.searchParams.append(formKeyValuePair.key, formKeyValuePair.value);
        }
      });
    }
  }

  function getFormValueMapArray(formComponent) {
    if (formComponent.nodeName !== "FORM") return false;

    const formData = new FormData(formComponent);
    let returnMap = []

    formData.forEach((val, key) => {
      returnMap.push({
        "key": key,
        "value": val
      });
    });
    return returnMap.length >= 1 ? returnMap : false;
  }

  function setClearFilterHandler(clearFilterButton) {
    clearFilterButton.addEventListener(`click`, clearFilters);
  }

  function clearFilters(clearButtonEventOrButton) {
    const clearButton = clearButtonEventOrButton.currentTarget ? clearButtonEventOrButton.currentTarget : clearButtonEventOrButton;
    const parentComponent = clearButton.closest(`.filter-search-cards`);
    const filterParseInProgress = parentComponent.dataset.filtersParsing === "true";
    const allComponentCheckboxFieldsets = parentComponent.querySelectorAll(`.filter-search-cards-filter-checkbox-fieldset`);

    if (!filterParseInProgress) {
      parentComponent.dataset.filtersParsing = "true";

      allComponentCheckboxFieldsets.forEach((fieldset) => resetCheckboxFieldset(fieldset));

      initiateSearch(clearButton);
      parentComponent.dataset.filtersParsing = "false";
    }
  }

  function resetCheckboxFieldset(fieldset) {
    const allFilterCheckboxes = fieldset.querySelectorAll(`.filter-search-cards-filter-checkbox-fieldset .filter-search-cards-filter-checkbox.-all`);
    const individualFilterCheckboxes = fieldset.querySelectorAll(`.filter-search-cards-filter-checkbox-fieldset .filter-search-cards-filter-checkbox:not(.-all)`);

    allFilterCheckboxes.forEach((allCheckbox) => allCheckbox.checked = true);
    individualFilterCheckboxes.forEach((allCheckbox) => allCheckbox.checked = false);
  }

  function setFilterHandler(filterCheckbox) {
    filterCheckbox.addEventListener(`change`, parseFilters);
  }

  function parseFilters(filterCheckboxEventOrCheckbox) {
    const filterCheckbox = filterCheckboxEventOrCheckbox.currentTarget ? filterCheckboxEventOrCheckbox.currentTarget : filterCheckboxEventOrCheckbox;
    const parentComponent = filterCheckbox.closest(`.filter-search-cards`);
    const filterParseInProgress = parentComponent.dataset.filtersParsing === "true";
    const checkboxFieldset = filterCheckbox.closest(`.filter-search-cards-filter-checkbox-fieldset`);
    const allFilterCheckbox = checkboxFieldset.querySelector(`.filter-search-cards-filter-checkbox.-all`);

    if (!filterParseInProgress) {
      parentComponent.dataset.filtersParsing = "true";

      if (filterCheckbox.classList.contains(`-all`)) {
        //If the checkbox is an "all" selection
        //If toggling "off" - block / if toggling "on" uncheck all other boxes in fieldset
        if (filterCheckbox.checked === true) {
          resetCheckboxFieldset(checkboxFieldset);
        } else {
          //"All" checkboxes cannot be unchecked unless you click an individual checkbox. This is done automatically at that time and manual unchecking of the "all" checkbox is prevented
          //to ensure that any updates have a valid selection.
          filterCheckbox.checked = true;
        }
      } else {
        //If the checkbox is an individual (Not "all") checkbox
        //If toggling "on" - Uncheck "all" / If toggling "off" and NO OTHER "individual" checkboxes are checked, check "all" checkbox
        if (filterCheckbox.checked === true) {
          allFilterCheckbox.checked = false;
        } else {
          const currentlyCheckedIndividualCheckboxesLength = checkboxFieldset.querySelectorAll(`.filter-search-cards-filter-checkbox:checked:not(.-all)`).length;
          allFilterCheckbox.checked = currentlyCheckedIndividualCheckboxesLength ? false : true;
        }
      }

      incrementClearFilterButtonCount(parentComponent);
      parentComponent.dataset.filtersParsing = "false";
      initiateSearch(filterCheckbox);
    }
  }

  function setFiltersAfterSearch(formElementComponentWrapper, formValueMapArray) {
    if (!formElementComponentWrapper || !formValueMapArray) return;
    const filterParsingWrapper = formElementComponentWrapper.querySelector(`.filter-search-cards`);
    const filterParseInProgress = filterParsingWrapper.dataset.filtersParsing === "true";
    const searchTermKey = "q";
    const searchField = formElementComponentWrapper.querySelector(`input.filter-search-cards-search-field[type="search"]`);
    const checkboxFieldsets = filterParsingWrapper.querySelectorAll(`.filter-search-cards-filter-checkbox-fieldset`);

    if (!filterParseInProgress) {
      formValueMapArray.forEach((formKeyValuePair) => {
        if (formKeyValuePair.key === searchTermKey && searchField?.nodeName == "INPUT") {
          searchField.value = formKeyValuePair.value;
        } else {
          if (formKeyValuePair.key.length <= 0 || formKeyValuePair.value.length <= 0) return;
          const queryString = `input[type="checkbox"][value="${formKeyValuePair.value}"][name="${formKeyValuePair.key}"]`;
          const currentCheckbox = formElementComponentWrapper.querySelector(queryString);
          if (currentCheckbox) {
            const currentAllCheckbox = currentCheckbox.closest(`fieldset.filter-search-cards-filter-checkbox-fieldset`).querySelector(`input.filter-search-cards-filter-checkbox.-all`);
            if (currentAllCheckbox) currentAllCheckbox.checked = false;
            currentCheckbox.checked = true;
          }
        }
      });
    }
    filterParsingWrapper.dataset.filtersParsing = "false";

    incrementClearFilterButtonCount(formElementComponentWrapper);
  }

  function incrementClearFilterButtonCount(parentComponent) {
    const checkedFilterBoxCount = parentComponent.querySelectorAll(`.filter-search-cards-filter-checkbox-fieldset .filter-search-cards-filter-checkbox:checked:not(.-all)`).length;
    const filterClearButtonTextSpan = parentComponent.querySelector(`.filter-search-cards-clear-button button.ps-button .ps-button__text`);

    const CLEAR_BUTTON_STRING = "Clear";

    if (checkedFilterBoxCount && filterClearButtonTextSpan) {
      filterClearButtonTextSpan.innerText = `${CLEAR_BUTTON_STRING} (${checkedFilterBoxCount})`;
    } else if(filterClearButtonTextSpan) {
      filterClearButtonTextSpan.innerText = `${CLEAR_BUTTON_STRING}`;
    }
  }

  function parseFormComponentState(allContentSection) {
    const searchField = allContentSection.querySelector(`input.filter-search-cards-search-field`);
    const checkboxMap = fetchCheckboxMap(allContentSection);
    const currentUrl = new URL(window.location);
    let searchParamMap = new Map();

    currentUrl.searchParams.forEach((value, key) => {
      searchParamMap.set(key, currentUrl.searchParams.getAll(key));
    });

    searchParamMap.forEach((value, key) => {
      if (key === `q` && value[0]?.length > 0) {
        searchField.classList.add(`-active`);
        searchField.value = searchParamMap.get(`q`);
      } else if (checkboxMap.get(key)?.size) {
        checkboxMap.get(key).forEach((subValue, subKey) => {

          if (value.includes(subKey.trim())) {
            subValue.checked = true;
          }
        });
      }
    });

    incrementClearFilterButtonCount(allContentSection);
    setAllCheckboxesAsNeeded(allContentSection);
  }

  function setAllCheckboxesAsNeeded(allContentSection) {
    const allFieldsets = allContentSection.querySelectorAll(`fieldset.filter-search-cards-filter-checkbox-fieldset`);

    allFieldsets.forEach(fieldset => {
      const currentAllCheckbox = fieldset.querySelector(`input.filter-search-cards-filter-checkbox.-all`);
      const checkCount = fieldset.querySelectorAll(`input.filter-search-cards-filter-checkbox:not(.-all):checked`);

      if (!checkCount?.length) {
        currentAllCheckbox.checked = true;
      }
    });
  }

  function fetchCheckboxMap(allContentSection) {
    const checkboxSets = allContentSection.querySelectorAll(`[data-facet-name]`);
    let checkBoxMap = new Map();
    checkboxSets.forEach(checkboxSet => {
      const allCheckboxesInSet = checkboxSet.querySelectorAll(`input.filter-search-cards-filter-checkbox`);
      let allCheckboxesInSetMap = new Map();
      allCheckboxesInSet.forEach(checkbox => {
        const checkboxValue = checkbox?.value;
        allCheckboxesInSetMap.set(checkboxValue, checkbox);
      });
      checkBoxMap.set(checkboxSet.dataset.facetName, allCheckboxesInSetMap);
    });
    return checkBoxMap;
  }

  document.readyState !== `loading` ? init() : document.addEventListener(`readystatechange`, () => {
    document.readyState === `complete` && init()
  });

})();